<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库系统</title>
      <link href="2020/09/20/shu-ju-ku-xi-tong/"/>
      <url>2020/09/20/shu-ju-ku-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是数据库"><a href="#1-什么是数据库" class="headerlink" title="1.什么是数据库"></a>1.什么是数据库</h2><p>数据库起源于规范化 “ 表(Table) “ 的处理。</p><p>表(Table)：以按行按列形式组织及展现的数据。</p><p>表(Table)中描述了一批相互有关联关系的数据–&gt;关系</p><p>常用术语：</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9301.png"></p><p>数据库(Database)：相互之间有关联关系的若干个Table的集合，如下图。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9303.png"></p><p>以下的图中，左边称为结构化数据库，右边称为非结构化数据库。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9302.png"></p><p>左边称为结构化数据库，右边称为非结构化数据库。非结构化数据库除了有关系数据库的特性之外，还有其他的特性。各种各样的数据都可聚集成库，它们的基础都是关系数据库。</p><h2 id="2-什么是数据库系统"><a href="#2-什么是数据库系统" class="headerlink" title="2.什么是数据库系统"></a>2.什么是数据库系统</h2><h3 id="2-1-数据库系统-工作环境"><a href="#2-1-数据库系统-工作环境" class="headerlink" title="2-1.数据库系统(工作环境)"></a>2-1.数据库系统(工作环境)</h3><ul><li>数据库(DB)：Database</li><li>数据库管理系统(DBMS)</li><li>数据库应用(DBAP)</li><li>数据库管理员(DBA)</li><li>计算机基本系统</li></ul><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9304.png"></p><h3 id="2-2-实例层次"><a href="#2-2-实例层次" class="headerlink" title="2-2.实例层次"></a>2-2.实例层次</h3><p>数据库系统(工作环境)：图书管理数据库系统</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9305.png"></p><h3 id="2-3-实例化与抽象化-概念化"><a href="#2-3-实例化与抽象化-概念化" class="headerlink" title="2-3.实例化与抽象化(概念化)"></a>2-3.实例化与抽象化(概念化)</h3><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9306.png"></p><h2 id="3-数据库管理系统-DBMS"><a href="#3-数据库管理系统-DBMS" class="headerlink" title="3.数据库管理系统(DBMS)"></a>3.数据库管理系统(DBMS)</h2><h3 id="3-1-从用户角度"><a href="#3-1-从用户角度" class="headerlink" title="3-1.从用户角度"></a>3-1.从用户角度</h3><h4 id="3-1-1-具有数据库定义的功能"><a href="#3-1-1-具有数据库定义的功能" class="headerlink" title="3-1-1.具有数据库定义的功能"></a>3-1-1.具有数据库定义的功能</h4><p>定义数据库中Table的名称，标题(内含的属性名称及对该属性的值的要求)等。</p><ul><li>DBMS提供一套数据定义语言(DDL：Data Definition Language)给用户</li><li>用户使用DDL描述其所要建立表的格式</li><li>DBMS依照用户的定义，创建数据库及其中的Table</li></ul><h4 id="3-1-2-具有数据库操作的功能"><a href="#3-1-2-具有数据库操作的功能" class="headerlink" title="3-1-2.具有数据库操作的功能"></a>3-1-2.具有数据库操作的功能</h4><p>向数据库当中的Table中<strong>增加，删除，更新</strong>数据及对数据进行查询，检索，统计等。</p><ul><li>DBMS提供一套数据操纵语言(DML：Data Manipulation Language)给用户</li><li>用户使用DML描述其所要进行的增，删，改，查等操作</li><li>DBMS依照用户的操作描述，实际执行这些操作</li></ul><h4 id="3-1-3-具有数据库控制的功能"><a href="#3-1-3-具有数据库控制的功能" class="headerlink" title="3-1-3.具有数据库控制的功能"></a>3-1-3.具有数据库控制的功能</h4><p>控制数据库中的数据使用。</p><ul><li>DBMS提供一套数据控制语言(DCL：Data Control Language)给用户</li><li>用户使用DCL描述其对数据库所要实施的控制</li><li>DBMS依照用户的操作描述，实际执行控制</li></ul><h4 id="3-1-4-具有数据库维护的功能"><a href="#3-1-4-具有数据库维护的功能" class="headerlink" title="3-1-4.具有数据库维护的功能"></a>3-1-4.具有数据库维护的功能</h4><p>转储，恢复，重组，性能检测，分析</p><ul><li>DBMS提供一系列程序(实用程序，例行程序)给用户</li><li>在这些程序中提供了对数据库维护的各种功能</li><li>用户使用这些程序进行各种数据库维护操作</li></ul><p>数据库维护的实用程序，一般都是有数据库管理员(DBA)来使用和掌握的。</p><h3 id="3-2-数据库语言"><a href="#3-2-数据库语言" class="headerlink" title="3-2.数据库语言"></a>3-2.数据库语言</h3><ul><li>数据定义语言(DDL：Data Definition Language)</li><li>数据操纵语言(DML：Data Manipulation Language)</li><li>数据控制语言(DCL：Data Control Language)</li><li>数据库各种操作的执行</li></ul><h3 id="3-3-从系统实现角度"><a href="#3-3-从系统实现角度" class="headerlink" title="3-3.从系统实现角度"></a>3-3.从系统实现角度</h3>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git介绍及使用(更新中)</title>
      <link href="2020/09/14/git-jie-shao-ji-shi-yong/"/>
      <url>2020/09/14/git-jie-shao-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>Git是一套程序源代码的分布式版本管理系统，最初用于管理Linux核心代码的开发，后来被多个开源工程采用，现在已经成为互联网协作开发的标准的源代码管理软件。（更加管理项目的开发流程）</p><p><a href="https://git-scm.com/">Git官方网站</a></p><h3 id="Git初运行"><a href="#Git初运行" class="headerlink" title="Git初运行"></a>Git初运行</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> version//查看git的版本号</code></pre><p><img src="/images/Git/git-version.png"></p><p><a href="https://try.github.io/">Git在线体验</a></p><h3 id="采用Git的云服务"><a href="#采用Git的云服务" class="headerlink" title="采用Git的云服务"></a>采用Git的云服务</h3><ul><li>GitHub</li><li>gitee(oschina)</li><li>等等</li></ul><h2 id="理解版本管理的流程"><a href="#理解版本管理的流程" class="headerlink" title="理解版本管理的流程"></a>理解版本管理的流程</h2><h3 id="代码开发流程"><a href="#代码开发流程" class="headerlink" title="代码开发流程"></a>代码开发流程</h3><ol><li>系统开发，编写代码</li><li>提交代码给Git本地库</li><li>将代码提交到Git远程库，分享给团队其他人</li><li>从远程库获取最新代码</li><li>继续修改代码</li><li>重复第二步</li></ol><h3 id="Git基础概念（本期重点）"><a href="#Git基础概念（本期重点）" class="headerlink" title="Git基础概念（本期重点）"></a>Git基础概念（本期重点）</h3><ol><li>本地工作文件夹</li><li>Git索引区（Stage）</li><li>Git库（Repository）<ul><li>local：本地库</li><li>remote：远程库（服务器端）</li></ul></li></ol><h2 id="Git初始设定"><a href="#Git初始设定" class="headerlink" title="Git初始设定"></a>Git初始设定</h2><h3 id="建立一个Git库"><a href="#建立一个Git库" class="headerlink" title="建立一个Git库"></a>建立一个Git库</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> init//初始化</code></pre><p><strong>在当前文件下，建/初始一个Git的数据库</strong>。当前文件夹下所有的文件，都可以进行文件管理。</p><h3 id="设置基础信息"><a href="#设置基础信息" class="headerlink" title="设置基础信息"></a>设置基础信息</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> init//建一个库$ <span class="token function">git</span> config -l//查看当前的设置$ <span class="token function">git</span> config --global user.name <span class="token string">"LogicVan"</span>//进行用户名的设置$ <span class="token function">git</span> config --global user.email <span class="token string">"LogicVan@163.com"</span>//Git是Internet分布式开发管理系统，Internet每个用户有邮件地址，进行邮箱的设置$ <span class="token function">git</span> config --global color.ui true//设置编辑器的颜色为true，多在Linux和Mac系统设置，Windows里不多$ <span class="token function">git</span> config -l</code></pre><p>跳转到D盘下文件夹F下的Cloud文件夹</p><p><img src="/images/Git/git01.png"></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init//建一个库</code></pre><p><img src="/images/Git/git02.png"></p><p>查看新建出来的.git文件下有什么</p><p><img src="/images/Git/git03.png"></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config -l//查看当前的设置</code></pre><p><img src="/images/Git/git04.png"></p><p>由于我之前已经设置好用户名和邮箱了，就不再演示了。</p><h3 id="方便的命令"><a href="#方便的命令" class="headerlink" title="方便的命令"></a>方便的命令</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> config --help//$ <span class="token function">git</span> <span class="token function">help</span> config也可以</code></pre><p>在Git Bash中敲下代码，再按下回车键，在浏览器中打开帮助文档（Windows下），若是Linux，则在当前命令行中打开。</p><h2 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h2><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><ul><li>建立文件（本地工作区）</li><li>追加文件（索引区）</li><li>提交文件（本地库）</li></ul><p>跳转到D盘下文件夹F下的Cloud文件夹</p><p><img src="/images/Git/git01.png"></p><p>初始化Git库</p><p><img src="/images/Git/git02.png"></p><p>在F/Cloud文件下，新建index.html文件，命令如下，也可手动自行创造。</p><p><img src="/images/Git/git05.png"></p><p>使用<strong>git status</strong>命令，看一下当前文件夹的状态。此时index.htm文件未放入到索引区，显示红色。</p><p><img src="/images/Git/git06.png"></p><p>使用<strong>git add index.htm</strong>命令，把当前红色文件放到索引区。</p><p><img src="/images/Git/git07.png"></p><p>再次查看状态，index.htm变为绿色。本地有一个文件，修改完之后，提交到索引区，但是还没有向数据库提交。</p><p><img src="/images/Git/git08.png"></p><p>**git commit -m “…”**提交，需要加一些备注，告诉数据库你改了些什么。</p><p><img src="/images/Git/git09.png"></p><p>再次查看状态。index.htm并未消失，只是在数据库当中寄存了一个版本。</p><p><img src="/images/Git/git10.png"></p><p><strong>git log</strong>查看提交历史。</p><p><img src="/images/Git/git11.png"></p><h2 id="查看提交履历"><a href="#查看提交履历" class="headerlink" title="查看提交履历"></a>查看提交履历</h2><p><strong>知识点：git log</strong>命令的使用</p><h3 id="实战演练-1"><a href="#实战演练-1" class="headerlink" title="实战演练"></a>实战演练</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> log$ <span class="token function">nano</span> index.htm<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.$ <span class="token function">git</span> add index.htm$ <span class="token function">git</span> commit -m <span class="token string">"added code"</span>$ <span class="token function">git</span> log$ <span class="token function">git</span> log -n//n为1,2,3<span class="token punctuation">..</span>.,显示最近n次记录$ <span class="token function">git</span> log --oneline//**将记录归为一行显示$ <span class="token function">git</span> log -p//将记录详细显示$ <span class="token function">git</span> log --stat//对每次提交的信息进行统计$ <span class="token function">git</span> log --help//对于git log 选项的帮助文档</code></pre><h2 id="把握Git状态"><a href="#把握Git状态" class="headerlink" title="把握Git状态"></a>把握Git状态</h2><p><strong>知识点</strong></p><ul><li>git status</li><li>git checkout – [file]</li><li>git restore / git restore –staged</li></ul><p>修改先前的index.htm文件，多加一句“I love git”，检查状态。</p><p><img src="/images/Git/git12.png"></p><ul><li>使用<strong>git checkout – index.htm</strong>，回车，发现刚刚加上的“I love git”撤销了，回复之前的状态。</li><li>观察红字上方，有restore命令，于是<strong>git restore index.htm</strong>，也可以撤销，恢复刚刚状态。</li></ul><p><img src="/images/Git/git13.png"></p><p>如果加入了索引区add（<strong>没有提交commit</strong>），使用<strong>git checkout – [file]**是无效的。此时，</strong>git restore –staged index.htm<strong>即可将文件从索引区（暂存区）撤出，但是</strong>不撤销对 工作区 文件的更改**,即由<strong>git status</strong>命令得出的红字“被修改  且 被加入暂存区 ”被撤销。</p><p>详细内容：</p><p><a href="https://blog.csdn.net/houhj168/article/details/106335131">git restore 和 git restore –staged 的区别（详细）</a></p><p><a href="https://blog.csdn.net/u013493841/article/details/104451987/">git restore 和 git restore –staged 的区别</a></p><h2 id="比较修改内容"><a href="#比较修改内容" class="headerlink" title="比较修改内容"></a>比较修改内容</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git diff</li><li>git diff –cached</li></ul><h3 id="实战演练-2"><a href="#实战演练-2" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们再次对上次的index.htm文件进行操作，增加一行“I love git”，查看状态，显示未添加（红字状态），图略。</p><p>此时，我们使用<strong>git diff</strong>命令，显示出我们修改的内容。</p><p><img src="/images/Git/git-diff01.png"></p><p>我们再将index.htm文件提交到索引区（暂存区）并查看状态，代码略，图略。</p><p>再次使用<strong>git diff</strong>命令，这时，我们发现没有任何反映和显示。</p><p>使用<strong>git diff –cached</strong>命令，则再一次显示出我们修改的内容。</p><p><img src="/images/Git/git-diff02.png"></p><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git add [file1 file 2 …]</li><li>git add .  将当前工作文件夹下的所有文件（包括子目录）添加到索引区  </li><li>git rm / git rm –cached 删除</li><li>git mv  文件移动，更多用于文件更名</li></ul><h3 id="实战演练-3"><a href="#实战演练-3" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们再一次修改index.htm文件，并且创建style.css文件，查看状态。</p><p><img src="/images/Git/git-add01.png"></p><p>使用**git add .**，提交所有文件到索引区。</p><p><img src="/images/Git/git-add02.png"></p><p>使用<strong>git mv</strong>，进行文件更名。</p><p><img src="/images/Git/git-mv.png"></p><p>使用<strong>git rm</strong>命令，将刚刚提交到索引区内的文件从中撤了出来。</p><p><img src="/images/Git/git-rm.png"></p><h2 id="Git忽略管理"><a href="#Git忽略管理" class="headerlink" title="Git忽略管理"></a>Git忽略管理</h2><p>设置Git忽略的文件，这些文件不参与Git库的提交和管理。</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul><li>. gitignore</li></ul><p>详情查询：</p><p><a href="https://git-scm.com/docs/gitignore">帮助网页</a></p><h3 id="实战演练-4"><a href="#实战演练-4" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们创建temp.txt文件，查看状态，显示红字，但是我们不想这个文件被管理，所以我们有创建了一个<strong>末尾文件名</strong>为“ . gitignore”的文件，查看状态，这两个文件目前都是被管理的（ . gitignore文件肯定是需要管理的）</p><p><img src="/images/Git/git-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86.png"></p><p>我们在 . gitignore文件中写入 “ *.txt “这一行，如图：</p><p><img src="/images/Git/git-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%8602.png"></p><p>再次查看状态，这次只有 . gitignore文件被管理，达到了我们的目的。</p><p><img src="/images/Git/git-gitignore.png"></p><h2 id="更新最后的提交"><a href="#更新最后的提交" class="headerlink" title="更新最后的提交"></a>更新最后的提交</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git commit -m “…”</li><li>git cmmit –amend</li><li>git commit -am “…” [–amend]</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三)更新中</title>
      <link href="2020/09/14/mysql-san/"/>
      <url>2020/09/14/mysql-san/</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接查询"><a href="#1-连接查询" class="headerlink" title="1.连接查询"></a>1.连接查询</h2><ul><li>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</li><li>在实际开发中，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。</li></ul><table><thead><tr><th>stuno</th><th>stuname</th><th>classno</th><th>classname</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>1</td><td>第二中学高三1班</td></tr><tr><td>2</td><td>ls</td><td>1</td><td>第二中学高三1班</td></tr></tbody></table><p>因此，学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致<strong>数据的冗余</strong>。</p><h2 id="2-连接查询分类"><a href="#2-连接查询分类" class="headerlink" title="2.连接查询分类"></a>2.连接查询分类</h2><ul><li>根据语法出现的年代<ul><li>SQL92（一些老的DBA可能还在使用这种语法。DBA：DataBase Administrator，数据库管理员）</li><li>SQL99（比较新的语法）</li></ul></li><li>根据表的连接方式<ul><li>内连接(inner)<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接(outter)<ul><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ul></li><li>全连接（这个不讲，很少用）</li></ul></li></ul><h2 id="3-笛卡尔积现象"><a href="#3-笛卡尔积现象" class="headerlink" title="3.笛卡尔积现象"></a>3.笛卡尔积现象</h2><p>在表的连接查询方面有一种现象被称为：笛卡尔积现象（笛卡尔乘积现象）</p><p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><p>EMP表：</p><table><thead><tr><th>ename</th><th>deptno</th></tr></thead><tbody><tr><td>SMITH</td><td>20</td></tr><tr><td>ALLEN</td><td>30</td></tr><tr><td>WARD</td><td>30</td></tr><tr><td>JONES</td><td>20</td></tr><tr><td>MARTIN</td><td>30</td></tr><tr><td>BLAKE</td><td>30</td></tr><tr><td>CLARK</td><td>10</td></tr><tr><td>SCOTT</td><td>20</td></tr><tr><td>KING</td><td>10</td></tr><tr><td>TURNER</td><td>30</td></tr><tr><td>ADAMS</td><td>20</td></tr><tr><td>JAMES</td><td>30</td></tr><tr><td>FORD</td><td>20</td></tr><tr><td>MILLER</td><td>10</td></tr></tbody></table><p>DEPT表：</p><table><thead><tr><th>DEPTNO</th><th>DNAME</th><th>LOC</th></tr></thead><tbody><tr><td>10</td><td>ACCOUNTING</td><td>NEW YORK</td></tr><tr><td>20</td><td>RESEARCH</td><td>DALLAS</td></tr><tr><td>30</td><td>SALES</td><td>CHICAGO</td></tr><tr><td>40</td><td>OPERATIONS</td><td>BOSTON</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token punctuation">;</span></code></pre><p>此处，我们为EMP表起了别名e，DEPT表别名d，这样的好处：</p><ul><li>执行效率高</li><li>可读性好</li></ul><p>显示结果：</p><blockquote><p>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| SMITH  | SALES      |<br>| SMITH  | OPERATIONS |<br>| ALLEN  | ACCOUNTING |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| ALLEN  | OPERATIONS |<br>…………</p></blockquote><p>最后一行显示：</p><blockquote><p>56 rows in set (0.00 sec)  //总共56次，显示56行</p></blockquote><p>这就是笛卡尔积现象：</p><p>当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。</p><p>如何避免该现象</p><p>想要避免，很显然，就是<strong>加入过滤条件</strong>。</p><p><strong>思考</strong>：当我们加入条件进行过滤后，避免了笛卡尔积现象，会减少记录的匹配次数吗？</p><p><strong>答</strong>：不会，次数还是56次，只是显示的是有效记录。</p><p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno</code></pre><p>这个语句可以帮我们避免笛卡尔积现象，但是，这是SQL92的写法，现在不用了。（表格连接条件与之前的条件查询都放在了where里面，不好）</p><h2 id="4-内连接-inner-：等值连接"><a href="#4-内连接-inner-：等值连接" class="headerlink" title="4.内连接(inner)：等值连接"></a>4.内连接(inner)：等值连接</h2><p>特点：条件是<strong>等量</strong>关系</p><p>还是上面的案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><p>（SQL92的写法就在上面，就不再写了，而且现在也不用了）下面是SQL99的写法，被普遍采用。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    dept<span class="token number">.d</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//where</span><span class="token comment" spellcheck="true">//    ...</span></code></pre><p>因为此处是等值连接，正如小标题所述一样，等值连接属于内连接（inner)，所以inner被省略了，但是，带着inner目的是可读性更好一些。</p><p>SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了。同样达到避免笛卡尔积现象的目的。</p><h2 id="5-内连接-inner-：非等值查询"><a href="#5-内连接-inner-：非等值查询" class="headerlink" title="5.内连接(inner)：非等值查询"></a>5.内连接(inner)：非等值查询</h2><p>特点：连接条件中的关系是非等量关系。</p><p>案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将此表取别名：e</span></code></pre><blockquote><p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| ALLEN  | 1600.00 |<br>| WARD   | 1250.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 1250.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+——–+———+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将此表区别名：s</span></code></pre><blockquote><p>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+</p></blockquote><p>工资等级是按照工资在LOSAL和HISAL里哪个区间进行等级评判的，这就是连接条件。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>     emp <span class="token number">e</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span></code></pre><p>显示结果：</p><blockquote><p>+——–+———+——-+<br>| ename  | sal     | grade |<br>+——–+———+——-+<br>| SMITH  |  800.00 |     1 |<br>| ALLEN  | 1600.00 |     3 |<br>| WARD   | 1250.00 |     2 |<br>| JONES  | 2975.00 |     4 |<br>| MARTIN | 1250.00 |     2 |<br>| BLAKE  | 2850.00 |     4 |<br>| CLARK  | 2450.00 |     4 |<br>| SCOTT  | 3000.00 |     4 |<br>| KING   | 5000.00 |     5 |<br>| TURNER | 1500.00 |     3 |<br>| ADAMS  | 1100.00 |     1 |<br>| JAMES  |  950.00 |     1 |<br>| FORD   | 3000.00 |     4 |<br>| MILLER | 1300.00 |     2 |<br>+——–+———+——-+</p></blockquote><h2 id="6-自连接"><a href="#6-自连接" class="headerlink" title="6.自连接"></a>6.自连接</h2><p>特点：一张表看做两张表。自己连接自己。</p><p>案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>EMP a 员工表</p><blockquote><p>+——-+——–+——+<br>| empno | ename  | mgr  |<br>+——-+——–+——+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+——-+——–+——+</p></blockquote><p>EMP b 领导表</p><blockquote><p>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7566 | JONES  |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7902 | FORD   |<br>+——-+——–+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'员工'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'领导'</span><span class="token keyword">from</span>     emp <span class="token number">a</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//员工的领导编号 = 领导的员工编号</span></code></pre><h2 id="7-外连接"><a href="#7-外连接" class="headerlink" title="7.外连接"></a>7.外连接</h2><h3 id="7-1-与内连接区别"><a href="#7-1-与内连接区别" class="headerlink" title="7-1.与内连接区别"></a>7-1.与内连接区别</h3><ul><li>内连接<ul><li>假设A和B表使用内(inner)连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。AB两张表没有主副之分，两张表是平等的。</li></ul></li><li>外连接<ul><li>假设A和B表使用外(outer)连接的话，AB两张表中有一张表是<strong>主表</strong>，一张表是<strong>副表</strong>，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</li></ul></li></ul><h3 id="7-2-外连接分类"><a href="#7-2-外连接分类" class="headerlink" title="7-2.外连接分类"></a>7-2.外连接分类</h3><ul><li>左外连接（左连接）：表示左边的这张表是主表。</li><li>右外连接（右连接）：表示右边的这张表是主表。</li></ul><p>左连接有右连接的写法，右连接也会有对应的左连接的写法。</p><p>案例：找出每个员工的上级领导？（所有员工必须全部查询出来。）</p><p>EMP a 员工表</p><blockquote><p>+——-+——–+——+<br>| empno | ename  | mgr  |<br>+——-+——–+——+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+——-+——–+——+</p></blockquote><p>EMP b 领导表</p><blockquote><p>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7566 | JONES  |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7902 | FORD   |<br>+——-+——–+</p></blockquote><p>内连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'员工'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'领导'</span><span class="token keyword">from</span>     emp <span class="token number">a</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>左外连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token string">'领导'</span><span class="token keyword">from</span>    emp <span class="token number">a</span><span class="token keyword">left</span> <span class="token comment" spellcheck="true">/*outer*/</span> <span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>右外连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token string">'领导'</span><span class="token keyword">from</span>    emp <span class="token number">b</span><span class="token keyword">right</span> <span class="token comment" spellcheck="true">/*outer*/</span> <span class="token keyword">join</span>    emp <span class="token number">a</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>外连接最重要的特点：主表的数据无条件的全部查询出来。</p><p>案例：找出哪个部门没有员工？</p><p>EMP表：</p><blockquote><p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p></blockquote><p>DEPT表：</p><blockquote><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     emp <span class="token number">e</span> <span class="token keyword">right</span> <span class="token keyword">join</span>     dept <span class="token number">d</span> <span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token keyword">where</span>     <span class="token number">e</span><span class="token punctuation">.</span>empno <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><h2 id="8-三张表的连接查询"><a href="#8-三张表的连接查询" class="headerlink" title="8.三张表的连接查询"></a>8.三张表的连接查询</h2><p>案例：找出每一个员工的部门名称以及工资等级。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token keyword">join</span>    dept <span class="token number">d</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span></code></pre><p>表示：emp表和dept表先进行表连接，连接之后emp表继续和salgrade表进行连接。</p><hr><h2 id="9-子查询"><a href="#9-子查询" class="headerlink" title="9.子查询"></a>9.子查询</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(二)</title>
      <link href="2020/09/13/mysql-er/"/>
      <url>2020/09/13/mysql-er/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h2><h3 id="1-1-字符函数"><a href="#1-1-字符函数" class="headerlink" title="1-1.字符函数"></a>1-1.字符函数</h3><p><strong>length函数</strong>用于获取参数值的字节个数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>4</p></blockquote><p><strong>concat函数</strong>拼接字符串</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>l_name<span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span>f_name<span class="token punctuation">)</span> 姓名 <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>upper、lower函数</strong>改变大小写<br><strong>substr、substring函数</strong>截取，索引从1开始</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">//截取从指定索引处后面的所有字符</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'李莫愁爱上了陆展元'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//截取从指定索引处指定字符长度的字符</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'李莫愁爱上了陆展元'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>陆展元<br>李莫愁</p></blockquote><p><strong>instr函数</strong>返回字符串第一次出现的索引，若找不到，则返回0</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> instr<span class="token punctuation">(</span><span class="token string">'杨不悔爱上了殷六侠'</span><span class="token punctuation">,</span><span class="token string">'殷六侠‘'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>7</p></blockquote><p><strong>trim函数</strong>去前后空格</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'张翠山'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">from</span> <span class="token string">'aaa张aaaa翠山aaaa'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//去掉a</span></code></pre><p>结果：</p><blockquote><p>张翠山<br>张翠山</p></blockquote><p><strong>lpad函数</strong>用指定字符实现左填充指定长度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>**aaa</p></blockquote><p><strong>rpad函数</strong>同上<br><strong>replace函数</strong>替换</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">'aaabbbddd'</span><span class="token punctuation">,</span><span class="token string">'ddd'</span><span class="token punctuation">,</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>aaabbbccc</p></blockquote><h3 id="1-2-数学函数"><a href="#1-2-数学函数" class="headerlink" title="1-2.数学函数"></a>1-2.数学函数</h3><p><strong>round()函数</strong>四舍五入<br><strong>ceil函数</strong>向上取整<br><strong>floor函数</strong>向下取整<br><strong>truncate函数</strong>截断<br><strong>mod函数</strong>取余</p><h3 id="1-3-日期函数"><a href="#1-3-日期函数" class="headerlink" title="1-3.日期函数"></a>1-3.日期函数</h3><p><strong>now函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>curdate函数</strong>返回当前日期，不包含时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>curtime函数</strong>返回当前时间，不包含日期<br><strong>获取指定部分，年，月，日</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> year<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'年'</span><span class="token punctuation">;</span></code></pre><p><strong>str_to_date函数</strong></p><pre class=" language-sql"><code class="language-sql">str_to_date<span class="token punctuation">(</span><span class="token string">'9-13-1999'</span><span class="token punctuation">,</span><span class="token string">'%m-%d-%Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>date_format函数</strong></p><pre class=" language-sql"><code class="language-sql">date_format<span class="token punctuation">(</span><span class="token string">'2018/6/6'</span><span class="token punctuation">,</span><span class="token string">'%Y年%m月%d日'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-其他函数"><a href="#1-4-其他函数" class="headerlink" title="1-4.其他函数"></a>1-4.其他函数</h3><p><strong>version()</strong><br><strong>database()</strong><br><strong>user()</strong></p><h2 id="2-排序（升序，降序）"><a href="#2-排序（升序，降序）" class="headerlink" title="2.排序（升序，降序）"></a>2.排序（升序，降序）</h2><p>按照工资升序，找出员工名和薪资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token punctuation">,</span>sal<span class="token keyword">from</span>     emp<span class="token keyword">order</span> <span class="token keyword">by</span>    sal<span class="token punctuation">;</span></code></pre><p><strong>PS</strong>:默认是升序。怎么指定升序或者降序呢？<strong>asc表示升序，desc表示降序</strong>。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序</span><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 升序</span><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 降序</span></code></pre><p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token punctuation">,</span> ename <span class="token keyword">asc</span><span class="token punctuation">;</span></code></pre><p><strong>PS</strong>:越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p><p>找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token keyword">order</span> <span class="token keyword">by</span>    sal <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><p><strong>总结</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段                        <span class="token number">3</span><span class="token keyword">from</span>    表名                        <span class="token number">1</span><span class="token keyword">where</span>    条件                        <span class="token number">2</span><span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token number">4</span><span class="token comment" spellcheck="true">//order by是最后执行的。</span></code></pre><h2 id="3-分组函数"><a href="#3-分组函数" class="headerlink" title="3.分组函数"></a>3.分组函数</h2><p><strong>count 计数<br>sum 求和<br>avg 平均值<br>max 最大值<br>min 最小值</strong><br>记住：所有的分组函数都是对“某一组”数据进行操作的。</p><p>找出工资总和？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>找出最高工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>找出总人数？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>count(*)和count(具体的某个字段)，他们有什么区别？</p><ul><li>count(*):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）</li><li>count(comm): 表示统计comm字段中不为NULL的数据总数量。</li></ul><p>分组函数一共5个。<br>分组函数还有另一个名字：多行处理函数。<br>多行处理函数的特点：<strong>输入多行，最终输出的结果是1行。</strong></p><p>分组函数也能组合起来用：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+———-+———-+————-+———-+———-+<br>| count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |<br>+———-+———-+————-+———-+———-+<br>|       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |<br>+———-+———-+————-+———-+———-+</p></blockquote><p><strong>分组函数自动忽略NULL。</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><pre><code>+-------------+</code></pre><p>| count(comm) |<br>+————-+<br>|           4 |<br>+————-+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select sum(comm) from emp where comm is not null; 不需要额外添加这个过滤条件。sum函数自动忽略NULL。</span></code></pre><p>结果：</p><blockquote><pre><code>+-----------+</code></pre><p>| sum(comm) |<br>+———–+<br>|   2200.00 |<br>+———–+</p></blockquote><p>找出工资高于平均工资的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ERROR 1111 (HY000): Invalid use of group function</span></code></pre><p>分析：<br>以上的错误信息：无效地使用了分组函数。<br>原因：SQL语句当中有一个语法规则，==分组函数不可直接使用在where子句当中。<br>why——&gt;因为group by是在where执行之后才会执行的。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>            <span class="token number">5</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">from</span>            <span class="token number">1</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span>            <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span>        <span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>            <span class="token number">4</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>        <span class="token number">6</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>解决：<br>第一步：找出平均工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+————-+<br>| avg(sal)    |<br>+————-+<br>| 2073.214286 |<br>+————-+</p></blockquote><p>第二步：找出高于平均工资的员工</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2073.214286</span><span class="token punctuation">;</span></code></pre><blockquote><p>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>| CLARK | 2450.00 |<br>| SCOTT | 3000.00 |<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>+——-+———+</p></blockquote><p>以上两步合为一步：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-单行处理函数"><a href="#4-单行处理函数" class="headerlink" title="4.单行处理函数"></a>4.单行处理函数</h2><p>什么是单行处理函数？输入一行，输出一行。</p><p>计算每个员工的年薪？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>comm<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>重点</strong>：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。<br>使用<strong>ifnull</strong>函数：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>ifnull() 空处理函数？</p><ul><li>ifnull(可能为NULL的数据,被当做什么处理) </li><li>属于单行处理函数</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> comm <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+———+<br>| ename  | comm    |<br>+——–+———+<br>| SMITH  |    0.00 |<br>| ALLEN  |  300.00 |<br>| WARD   |  500.00 |<br>| JONES  |    0.00 |<br>| MARTIN | 1400.00 |<br>| BLAKE  |    0.00 |<br>| CLARK  |    0.00 |<br>| SCOTT  |    0.00 |<br>| KING   |    0.00 |<br>| TURNER |    0.00 |<br>| ADAMS  |    0.00 |<br>| JAMES  |    0.00 |<br>| FORD   |    0.00 |<br>| MILLER |    0.00 |<br>+——–+———+</p></blockquote><h2 id="5-group-by和having"><a href="#5-group-by和having" class="headerlink" title="5.group by和having"></a>5.group by和having</h2><p>group by ： 按照某个字段或者某些字段进行分组。<br>having : having是对分组之后的数据进行再次过滤。<br>案例：找出每个工作岗位的最高薪资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+———–+<br>| max(sal) | job       |<br>+———-+———–+<br>|  3000.00 | ANALYST   |<br>|  1300.00 | CLERK     |<br>|  2975.00 | MANAGER   |<br>|  5000.00 | PRESIDENT |<br>|  1600.00 | SALESMAN  |<br>+———-+———–+</p></blockquote><p><strong>注意</strong>：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。<br>    并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。<br>    当一条SQL语句没有group by的话，整张表的数据会自成一组。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><p>以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。<br>Oracle的语法规则比MySQL语法规则严谨。<br>记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p><p>每个工作岗位的平均薪资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> job<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><blockquote><p>+———–+————-+<br>| job       | avg(sal)    |<br>+———–+————-+<br>| ANALYST   | 3000.000000 |<br>| CLERK     | 1037.500000 |<br>| MANAGER   | 2758.333333 |<br>| PRESIDENT | 5000.000000 |<br>| SALESMAN  | 1400.000000 |<br>+———–+————-+</p></blockquote><p>多个字段能不能联合起来一块分组？<br>案例：找出每个部门不同工作岗位的最高薪资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     deptno<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token keyword">from</span>    emp<span class="token keyword">group</span> <span class="token keyword">by</span>    deptno<span class="token punctuation">,</span>job<span class="token punctuation">;</span></code></pre><p>找出每个部门的最高薪资，要求显示薪资大于2900的数据。<br>第一步：找出每个部门的最高薪资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+——–+<br>| max(sal) | deptno |<br>+———-+——–+<br>|  5000.00 |     10 |<br>|  3000.00 |     20 |<br>|  2850.00 |     30 |<br>+———-+——–+</p></blockquote><p>第二步：找出薪资大于2900</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2900</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这种方式效率低。</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2900</span> <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 效率较高，建议能够使用where过滤的尽量使用where。</span></code></pre><p>找出每个部门的平均薪资，要求显示薪资大于2000的数据。<br>第一步：找出每个部门的平均薪资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————-+<br>| deptno | avg(sal)    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+</p></blockquote><p>第二步：要求显示薪资大于2000的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">;</span>    </code></pre><p>where后面不能使用分组函数：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span> <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 错误了。</span></code></pre><p>这种情况只能使用having过滤。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>            <span class="token number">5</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>            <span class="token number">1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span>            <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span>        <span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>            <span class="token number">4</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>        <span class="token number">6</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(一)</title>
      <link href="2020/09/13/mysql-yi/"/>
      <url>2020/09/13/mysql-yi/</url>
      
        <content type="html"><![CDATA[<p>笔记来自于B站老杜数据库课程，这里主要是整理。</p><h2 id="1-SQL、DB、DBMS及其中关系？"><a href="#1-SQL、DB、DBMS及其中关系？" class="headerlink" title="1.SQL、DB、DBMS及其中关系？"></a>1.SQL、DB、DBMS及其中关系？</h2><p><strong>DB</strong>：DataBase（数据库，数据库实际上是在硬盘上以<strong>文件</strong>的形式存在的）<br><strong>DBMS</strong>：DataBase Management System（数据库管理系统，常见的有：MySQL、Oracle、DB2、Sybase、SqlSever…）<br><strong>SQL</strong>：结构化查询语言，是一门标准通用的语言。标准的SQL语言适合于所有的数据库产品。<br>SQL属于高级语言。只要能看懂英语单词的，写出来的SQL语句，可以读懂什么意思。<br>SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行SQL。（SQL语句的编译有DBMS完成）</p><p>DBMS负责执行SQL语句，通过执行SQL语句来操作DB当中的数据。<br>DBMS–执行–&gt;SQL–操作–&gt;DB</p><h2 id="2-什么是表"><a href="#2-什么是表" class="headerlink" title="2.什么是表"></a>2.什么是表</h2><p>表：table，是<strong>数据库的基本组成单元</strong>，所有的数据都以表格的形式组织，目的是<strong>可读性强</strong>。<br>一个表包括<strong>行</strong>和<strong>列</strong><br>    行：被称为<strong>数据/记录（data）</strong><br>    列：被称为<strong>字段</strong></p><table><thead><tr><th>学号（int）</th><th>姓名（<strong>varchar</strong>）</th></tr></thead><tbody><tr><td>110</td><td>张三</td></tr></tbody></table><p>每一个字段应该包含：<br>      字段名、数据类型、相关的约数</p><h2 id="3-SQL语句分类"><a href="#3-SQL语句分类" class="headerlink" title="3.SQL语句分类"></a>3.SQL语句分类</h2><p><strong>DQL（数据查询语言）</strong>：查询语句，凡是select语句都是DQL。<br><strong>DML（数据操作语言）</strong>：insert、delete、update，对表当中的数据进行增删改。<br><strong>DDL（数据定义语言）</strong>：create、drop、alter，对表结构进行增删改。<br><strong>TCL（事务控制语言）</strong>：commit提交事务，rollback回滚事务。（TCL中的T是Transaction）<br><strong>DCL（数据控制语言）</strong>：grant授权，revoke撤销权限等。</p><h2 id="4、导入数据"><a href="#4、导入数据" class="headerlink" title="4、导入数据"></a>4、导入数据</h2><p>第一步：登录mysql数据库管理系统<br>        dos命令窗口：</p><pre class=" language-mysql"><code class="language-mysql">mysql -uroot -p333</code></pre><p>第二步：查看有哪些数据库</p><pre class=" language-mysql"><code class="language-mysql">show databases;//这个不是SQL语句，属于MySQL的命令。</code></pre><p>结果：</p><blockquote><p> +——————–+<br> | Database           |<br> +——————–+<br> | information_schema |<br> | mysql              |<br> | performance_schema |<br> | test               |<br> +——————–+</p></blockquote><p>第三步：创建属于我们自己的数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> bjpowernode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个不是SQL语句，属于MySQL的命令。</span></code></pre><p>第四步：使用bjpowernode数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> bjpowernode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个不是SQL语句，属于MySQL的命令。</span></code></pre><p>第五步：查看当前使用的数据库中有哪些表？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(这个不是SQL语句，属于MySQL的命令。)</span></code></pre><p>第六步：初始化数据</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> source D:\course\<span class="token number">05</span><span class="token operator">-</span>MySQL\resources\bjpowernode<span class="token punctuation">.</span>sql</code></pre><p><strong>注意</strong>：数据初始化完成之后，有三张表：</p><blockquote><pre><code>+-----------------------+</code></pre><p>| Tables_in_bjpowernode |<br>+———————–+<br>| dept                  |<br>| emp                   |<br>| salgrade              |<br>+———————–+</p></blockquote><h2 id="5-sql文件"><a href="#5-sql文件" class="headerlink" title="5 .sql文件"></a>5 .sql文件</h2><p>bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“SQL脚本”。什么是SQL脚本呢？<br>当一个文件的扩展名是.sql，并且该文件中编写了大量的SQL语句，我们称这样的文件为SQL脚本。<br><strong>注意</strong>：直接使用source命令可以执行SQL脚本。<br>SQL脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。 </p><h2 id="6-删除数据库"><a href="#6-删除数据库" class="headerlink" title="6.删除数据库"></a>6.删除数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> bjpowernode<span class="token punctuation">;</span></code></pre><h2 id="7-查看表结构"><a href="#7-查看表结构" class="headerlink" title="7.查看表结构"></a>7.查看表结构</h2><blockquote><p>+———————–+<br>| Tables_in_bjpowernode |<br>+———————–+<br>| dept                  |   (部门表)<br>| emp                   |   (员工表)<br>| salgrade              |   (工资等级表)<br>+———————–+</p></blockquote><p>查看各个表的具体结构</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> dept<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————-+——+—–+———+——-+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+——–+————-+——+—–+———+——-+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |        部门编号<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |        部门名称<br>| LOC    | varchar(13) | YES  |     | NULL    |       |        部门位置<br>+——–+————-+——+—–+———+——-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+————-+——+—–+———+——-+<br>| Field    | Type        | Null | Key | Default | Extra |<br>+———-+————-+——+—–+———+——-+<br>| EMPNO    | int(4)      | NO   | PRI | NULL    |       |    员工编号<br>| ENAME    | varchar(10) | YES  |     | NULL    |       |    员工姓名<br>| JOB      | varchar(9)  | YES  |     | NULL    |       |    工作岗位<br>| MGR      | int(4)      | YES  |     | NULL    |       |    上级领导编号<br>| HIREDATE | date        | YES  |     | NULL    |       |    入职日期<br>| SAL      | double(7,2) | YES  |     | NULL    |       |    月薪<br>| COMM     | double(7,2) | YES  |     | NULL    |       |    补助/津贴<br>| DEPTNO   | int(2)      | YES  |     | NULL    |       |    部门编号<br>+———-+————-+——+—–+———+——-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> salgrade<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+———+——+—–+———+——-+<br>| Field | Type    | Null | Key | Default | Extra |<br>+——-+———+——+—–+———+——-+<br>| GRADE | int(11) | YES  |     | NULL    |       |        等级<br>| LOSAL | int(11) | YES  |     | NULL    |       |        最低薪资<br>| HISAL | int(11) | YES  |     | NULL    |       |        最高薪资<br>+——-+———+——+—–+———+——-+</p></blockquote><h2 id="8-表中的数据"><a href="#8-表中的数据" class="headerlink" title="8.表中的数据"></a>8.表中的数据</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+</p></blockquote><h2 id="9-常用命令"><a href="#9-常用命令" class="headerlink" title="9.常用命令"></a>9.常用命令</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看当前使用的是哪个数据库</span></code></pre><blockquote><p>+————-+<br>| database()  |<br>+————-+<br>| bjpowernode |<br>+————-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看mysql的版本号。</span></code></pre><blockquote><p>+———–+<br>| version() |<br>+———–+<br>| 5.5.36    |<br>+———–+</p></blockquote><p>\c   命令，结束一条语句。</p><p>exit 命令，退出mysql。</p><h2 id="10-查看创建表的语句"><a href="#10-查看创建表的语句" class="headerlink" title="10.查看创建表的语句"></a>10.查看创建表的语句</h2><pre class=" language-sql"><code class="language-sql">    <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">;</span></code></pre><h2 id="11-DQL"><a href="#11-DQL" class="headerlink" title="11.DQL"></a>11.DQL</h2><h3 id="11-1-简单的查询语句"><a href="#11-1-简单的查询语句" class="headerlink" title="11-1.简单的查询语句"></a>11-1.简单的查询语句</h3><p><strong>语法格式</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>     表名<span class="token punctuation">;</span></code></pre><p>提示：</p><ol><li>任何一条SQL语句以“;”结尾。</li><li>SQL语句不区分大小写。</li></ol><p>特点：</p><ul><li>查询列表可以是：表中字段，常量值，表达式，函数。</li><li>查询的结果是一个虚拟的表格。</li></ul><p>例：<br>查询员工的年薪？<strong>（字段可以参与数学运算）</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | sal * 12 |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p></blockquote><p>给查询结果的列重命名？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">as</span><span class="token operator">*</span><span class="token operator">*</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//as可省略，空格代替</span></code></pre><p>别名中有中文？</p><pre class=" language-sql"><code class="language-sql">        <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">as</span> 年薪 <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误</span>        <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">as</span> <span class="token string">'年薪'</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | 年薪        |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p></blockquote><p><strong>PS</strong>：标准SQL语句中要求字符串使用单引号括起来。虽然MySQL支持双引号，尽量别用。</p><p>查询所有字段</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实际开发中不建议使用*，效率较低。</span></code></pre><p>去重：<br>distinct关键字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> ename <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>==distinct只能出现在所有字段的最前面。此时后面所有的字段联合起来去重==</p><p>统计岗位的数量？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> job<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>‘+’号作用<br>MySQL中的‘+’号作用，只有一个功能，就是==运算符==</p><ul><li>如果两个操作数都是数值型，则做加法运算；</li><li>如果其中一方为字符型，试图将字符型数值转换成数值型，如果转换成功，则继续做加法运算，如果转换失败，则将字符型数值转换为0；</li><li>只要其中一方为null，结果肯定为null。</li><li>若要连接/拼接两个字符，则要使用<strong>函数concat</strong>，例：concat(‘你好’，‘MySQL’);</li></ul><h3 id="11-2-条件查询"><a href="#11-2-条件查询" class="headerlink" title="11-2.条件查询"></a>11-2.条件查询</h3><p><strong>语法格式</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>    表名<span class="token keyword">where</span>    条件<span class="token punctuation">;</span></code></pre><p>==执行顺序：先from，然后where，最后select.==</p><p>查询工资等于5000的员工姓名？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    sal <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——-+<br>| ename |<br>+——-+<br>| KING  |<br>+——-+</p></blockquote><p>查询SMITH的工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串使用单引号括起来。</span></code></pre><p>结果：</p><blockquote><p>+——–+<br>| sal    |<br>+——–+<br>| 800.00 |<br>+——–+    </p></blockquote><p>找出工资高于3000的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token punctuation">,</span>sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    sal <span class="token operator">></span> <span class="token number">3000</span><span class="token punctuation">;</span></code></pre><p>找出工资不等于3000的？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    ename<span class="token punctuation">,</span>salfom    emp<span class="token keyword">where</span>    sal <span class="token operator">&lt;></span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sal != 3000也可以</span></code></pre><p>找出工资在1100和3000之间的员工，包括1100和3000？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span>  <span class="token number">1100</span> <span class="token operator">and</span> sal <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运用到了and</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">1100</span> <span class="token operator">and</span> <span class="token number">3000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// between...and...是闭区间 [1100 ~ 3000]</span></code></pre><p>between…and…在使用的时候必须左小右大。<br>between…and…除了可以使用在数字方面之外，还可以使用在字符串方面。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">between</span> <span class="token string">'A'</span> <span class="token operator">and</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左闭右开</span></code></pre><p>结果：</p><blockquote><pre><code>+-------+</code></pre><p>| ename |<br>+——-+<br>| ALLEN |<br>| BLAKE |<br>| ADAMS |<br>+——-+</p></blockquote><p>找出哪些人津贴为NULL？</p><ul><li>在数据库当中NULL不是一个值，代表什么也没有，为空。</li><li>空不是一个值，不能用等号衡量。</li><li>必须使用 is null或者is not null</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———+——+<br>| ename  | sal     | comm |<br>+——–+———+——+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+——–+———+——+</p></blockquote><p>若使用‘=’连接判断</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>Empty set (0.00 sec)   //出现错误</p></blockquote><p>找出哪些人津贴不为NULL？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———+———+<br>| ename  | sal     | comm    |<br>+——–+———+———+<br>| ALLEN  | 1600.00 |  300.00 |<br>| WARD   | 1250.00 |  500.00 |<br>| MARTIN | 1250.00 | 1400.00 |<br>| TURNER | 1500.00 |    0.00 |<br>+——–+———+———+</p></blockquote><p>找出哪些人没有津贴？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> comm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运用到了or</span></code></pre><blockquote><p>结果：<br>+——–+———+——+<br>| ename  | sal     | comm |<br>+——–+———+——+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| TURNER | 1500.00 | 0.00 |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+——–+———+——+</p></blockquote><p>in,not in,and和or联合使用</p><p>找出工作岗位是MANAGER和SALESMAN的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span> <span class="token operator">or</span> job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | job      |<br>+——–+———-+<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| JONES  | MANAGER  |<br>| MARTIN | SALESMAN |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| TURNER | SALESMAN |<br>+——–+———-+</p></blockquote><p>in等同于or</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// in后面的值不是区间，是具体的值。</span></code></pre><p>not in: 不在这几个值当中。</p><p>and和or联合起来使用：找出薪资大于1000的并且部门编号是20或30部门的员工。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token punctuation">(</span>deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>PS</strong>：当运算符的优先级不确定的时候加小括号。</p><p>在模糊查询当中，必须掌握两个特殊的符号，一个是 % ，一个是 _ </p><ul><li>% 代表任意多个字符</li><li>_ 代表任意1个字符</li></ul><p>找出名字当中含有O的?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%O%'</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——-+<br>| ename |<br>+——-+<br>| JONES |<br>| SCOTT |<br>| FORD  |<br>+——-+</p></blockquote><p>找出名字中第二个字母是A的？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'_A%'</span><span class="token punctuation">;</span></code></pre><p>找出名字中有下划线的？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> t_user <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%\_%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//'\'代表转义字符</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

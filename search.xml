<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JDBC</title>
      <link href="2021/02/05/jdbc/"/>
      <url>2021/02/05/jdbc/</url>
      
        <content type="html"><![CDATA[<h2 id="方式一（不常用）"><a href="#方式一（不常用）" class="headerlink" title="方式一（不常用）"></a>方式一（不常用）</h2><h3 id="注册驱动"><a href="#注册驱动" class="headerlink" title="注册驱动"></a>注册驱动</h3><pre><code>import java.sql.Driver; import java.sql.DriverManager;import java.sql.SQLException;public class JDBCTest01&#123;    public static void main(String[] args)&#123;        try&#123;            Driver driver = new com.mysql.jdbc.Driver();//多态，父类型指向子类型对象            DriverManager.registerDriver(driver);        &#125;catch(SQLException e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><pre><code>import java.sql.Driver; import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Connection;public class JDBCTest01&#123;    public static void main(String[] args)&#123;        try&#123;            Driver driver = new com.mysql.jdbc.Driver();//多态，父类型指向子类型对象            DriverManager.registerDriver(driver);            //获取连接            String url = &quot;jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC&quot;;            String user = &quot;root&quot;;            String password = &quot;qqqxdd666&quot;;            Connection con = DriverManager.getConnection(url,user,password);            System.out.println(&quot;数据库连接对象：&quot; + conn);        &#125;catch(SQLException e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h3 id="获取数据库操作对象"><a href="#获取数据库操作对象" class="headerlink" title="获取数据库操作对象"></a>获取数据库操作对象</h3><pre><code>import java.sql.Driver; import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Connection;public class JDBCTest01&#123;    public static void main(String[] args)&#123;        try&#123;            Driver driver = new com.mysql.jdbc.Driver();//多态，父类型指向子类型对象            DriverManager.registerDriver(driver);            //获取连接            String url = &quot;jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC&quot;;            String user = &quot;root&quot;;            String password = &quot;qqqxdd666&quot;;            Connection con = DriverManager.getConnection(url,user,password);            System.out.println(&quot;数据库连接对象：&quot; + conn);            //获取数据库操作对象（Statement专门执行sql语句）            Statement stmt = con.createStatement();        &#125;catch(SQLException e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h3 id="执行sql语句"><a href="#执行sql语句" class="headerlink" title="执行sql语句"></a>执行sql语句</h3><pre><code>import java.sql.Driver; import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Connection;public class JDBCTest01&#123;    public static void main(String[] args)&#123;        try&#123;            Driver driver = new com.mysql.jdbc.Driver();//多态，父类型指向子类型对象            DriverManager.registerDriver(driver);            //获取连接            String url = &quot;jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC&quot;;            String user = &quot;root&quot;;            String password = &quot;qqqxdd666&quot;;            Connection con = DriverManager.getConnection(url,user,password);            System.out.println(&quot;数据库连接对象：&quot; + conn);            //获取数据库操作对象（Statement专门执行sql语句）            Statement stmt = con.createStatement();            //执行sql            String sql = &quot;insert into dept(deptno, dname, loc) values(50, &#39;人事部&#39;, &#39;北京&#39;)&quot;;            //专门执行DML语句的（insert,delete,update）            //返回值是“影响数据库中的记录条数”            int count = stmt.executeUpdate(sql);            System.out.println(count == 1 ? &quot;保存成功&quot; : &quot;保存失败&quot;)        &#125;catch(SQLException e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h3 id="处理查询结果集"><a href="#处理查询结果集" class="headerlink" title="处理查询结果集"></a>处理查询结果集</h3><pre><code>import java.sql.*public class JDBCTest03&#123;    public static void main(String[] args)&#123;        Connection con = null;        Statement stmt = null;        ResultSet rs = null;        try&#123;            Class.forname(&quot;com.mysql.jdbs.Driver&quot;);            con = DriverManager.getConnection(url,user,password);            stmt = con.createStatement();            String sql = &quot;select empno,ename,sal from emp&quot;;            rs = stmt.executeQuery(sql);//专门执行select查询语句            while(rs.next())&#123;                int empno = rs.getInt(&quot;empno&quot;);                String ename = rs.getString(&quot;ename&quot;);                double sal = rs.getDouble(&quot;sal&quot;);            &#125;        &#125;catch(Exception e)&#123;            e.printStackTrace();        &#125;finally&#123;            if(rs != null)&#123;                try&#123;                    rs.close();                &#125;catch(Exception e)&#123;                    e.printStackTrace();                &#125;            &#125;            if(stmt != null)&#123;                try&#123;                    stmt.close();                &#125;catch(Exception e)&#123;                    e.printStackTrace();                &#125;            &#125;            if(con != null)&#123;                try&#123;                    con.close();                &#125;catch(Exception e)&#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><ul><li>在finally语句块中关闭资源</li><li>遵循从小到大的顺序，依次关闭</li><li>分别对其 try,…catch…</li></ul><pre><code>import java.sql.Driver; import java.sql.DriverManager;import java.sql.SQLException;import java.sql.Connection;public class JDBCTest01&#123;    public static void main(String[] args)&#123;        Connection con = null;        Statement stmt = null;        try&#123;            Driver driver = new com.mysql.jdbc.Driver();//多态，父类型指向子类型对象            DriverManager.registerDriver(driver);            //获取连接            String url = &quot;jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC&quot;;            String user = &quot;root&quot;;            String password = &quot;qqqxdd666&quot;;            con = DriverManager.getConnection(url,user,password);            System.out.println(&quot;数据库连接对象：&quot; + conn);            //获取数据库操作对象（Statement专门执行sql语句）            stmt = con.createStatement();            //执行sql            String sql = &quot;insert into dept(deptno, dname, loc) values(50, &#39;人事部&#39;, &#39;北京&#39;)&quot;;            //专门执行DML语句的（insert,delete,update）            //返回值是“影响数据库中的记录条数”            int count = stmt.executeUpdate(sql);            System.out.println(count == 1 ? &quot;保存成功&quot; : &quot;保存失败&quot;)        &#125;catch(SQLException e)&#123;            e.printStackTrace();        &#125;finally&#123;            try&#123;                if(stmt != null)&#123;                    stmt.close();                &#125;            &#125;catch(SQLException e)&#123;                e.printStackTrace();            &#125;            try&#123;                if(con != null)&#123;                    con.close();                &#125;            &#125;catch(SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><h2 id="方式二：类加载的方式注册驱动（常用）"><a href="#方式二：类加载的方式注册驱动（常用）" class="headerlink" title="方式二：类加载的方式注册驱动（常用）"></a>方式二：类加载的方式注册驱动（常用）</h2><pre><code>import java.sql.*; public class JDBCTest02&#123;    public static void main(String[] args)&#123;        try&#123;            Class.forName(&quot;com.mysql.jbc.Driver&quot;);            Connection con = DriverManager.getConnection(url, user, password);            System.out.println(con);        &#125;catch(Exception e)&#123;            e.printStackTrace();        &#125;catch(ClassNotFoundException e)&#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><h2 id="将连接数据库的所有信息配置到配置文件中"><a href="#将连接数据库的所有信息配置到配置文件中" class="headerlink" title="将连接数据库的所有信息配置到配置文件中"></a>将连接数据库的所有信息配置到配置文件中</h2><pre><code>import java.sql.*; public class JDBCTest01&#123;    public static void main(String[] args)&#123;        //使用资源绑定器绑定配置文件        ResourceBundle bundle = RescourceBundle.getBundle(&quot;jdbc&quot;);        String driver = bundle.getString(&quot;driver&quot;);        String url = bundle.getString(&quot;url&quot;);        String user = bundle.getString(&quot;user&quot;);        String password = bundle.getString(&quot;password&quot;);        Connection con = null;        Statement stmt = null;        try&#123;            String driver = &quot;com.mysql.jdbc.Driver&quot;;            Class.forName(driver);            //获取连接            String url = &quot;jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC&quot;;            String user = &quot;root&quot;;            String password = &quot;qqqxdd666&quot;;            con = DriverManager.getConnection(url,user,password);            System.out.println(&quot;数据库连接对象：&quot; + conn);            //获取数据库操作对象（Statement专门执行sql语句）            stmt = con.createStatement();            //执行sql            String sql = &quot;insert into dept(deptno, dname, loc) values(50, &#39;人事部&#39;, &#39;北京&#39;)&quot;;            //专门执行DML语句的（insert,delete,update）            //返回值是“影响数据库中的记录条数”            int count = stmt.executeUpdate(sql);            System.out.println(count == 1 ? &quot;保存成功&quot; : &quot;保存失败&quot;)        &#125;catch(Exception e)&#123;            e.printStackTrace();        &#125;finally&#123;            try&#123;                if(stmt != null)&#123;                    stmt.close();                &#125;            &#125;catch(SQLException e)&#123;                e.printStackTrace();            &#125;            try&#123;                if(con != null)&#123;                    con.close();                &#125;            &#125;catch(SQLException e)&#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;</code></pre><p>以下进行配置文件的处理：</p><blockquote><p>jdbc.properties：<br>driver=com.mysql.jdbc.Driver<br>url=jdbc:mysql://localhost:3306/DBNAME?serverTimezone=UTC<br>user=root<br>password=qqqxdd666</p></blockquote><h2 id="解决SQL注入问题"><a href="#解决SQL注入问题" class="headerlink" title="解决SQL注入问题"></a>解决SQL注入问题</h2><p>使用PreparedStatement。</p><ul><li>解决注入问题。</li><li>编译一次，执行n次。效率更高。</li><li>在编译阶段做类型的安全检查。</li></ul><p>PS：在项目需要进行SQL语句拼接时，需要使用支持SQL注入的Statement。</p><pre><code>package com.logicvan.jdbc;/*实现功能：    1、需求：模拟用户登录功能    2、业务描述：        程序运行的时候，提供一个输入入口，可以让用户输入用户名和密码。        输入用户名和密码之后，提交信息，java程序收集信息。        java程序连接数据库验证用户名和密码是否合法。 */import java.sql.*;public class JDBCTest03 &#123;    public static void main(String[] args)&#123;        String name = userInfo.get(&quot;userName&quot;);        String password = userInfo.get(&quot;userPassword&quot;);        Connection conn = null;        PreparedStatement ps = null;        ResultSet rs = null;        try &#123;            Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/bjpowercode?serverTimezone=UTC&quot;,&quot;root&quot;,&quot;qqqxdd666&quot;);            //SQL语句框架，？代表一个占位符，？代表未来一个值            String sql = &quot;select * from t_users where login_name = ? and login_password = ?&quot;;            ps = conn.prepareStatement(sql);           ps.setString(1,name);           ps.setString(2,password);            rs = ps.executeQuery();            if(rs.next())&#123;                flag = true;            &#125;        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125; finally &#123;            if(rs != null)&#123;                try &#123;                    rs.close();                &#125; catch (SQLException throwables) &#123;                    throwables.printStackTrace();                &#125;            &#125;            if(stmt != null)&#123;                try &#123;                    stmt.close();                &#125; catch (SQLException throwables) &#123;                    throwables.printStackTrace();                &#125;            &#125;            if(conn != null)&#123;                try &#123;                    conn.close();                &#125; catch (SQLException throwables) &#123;                    throwables.printStackTrace();                &#125;            &#125;            return flag;        &#125;    &#125;&#125;</code></pre><h2 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h2><p>JDBC的事务是自动提交，执行一条语句，则自动提交一次。</p><pre><code>conn.setAutoCommit(false);conn.commit();conn.rollback();//try...catch...加上</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="2021/01/23/ji-suan-ji-wang-luo/"/>
      <url>2021/01/23/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1-1因特网概述"><a href="#1-1因特网概述" class="headerlink" title="1.1因特网概述"></a>1.1因特网概述</h3><ul><li><strong>网络（Network）</strong>由若干结点（Node）和连接这些结点的链路（Link）组成。</li><li>多个网络还可以由路由器互联起来，这样就构成互联网。互联网又称“网络的网络”。</li><li>因特网（Internet）是世界上最大的互联网络。</li></ul><h4 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h4><ul><li><p>边缘部分</p><p>由所有连接在因特网上的主机组成。这部分是用户直接使用，用来进行<strong>通信</strong>和<strong>资源共享</strong>。</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是为<strong>边缘部分</strong>提供服务的（提供连通性和交换）。</p></li></ul><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E8%BE%B9%E7%BC%98%E9%83%A8%E5%88%86%E5%92%8C%E6%A0%B8%E5%BF%83%E9%83%A8%E5%88%86.png"></p><h3 id="1-2三种交换方式"><a href="#1-2三种交换方式" class="headerlink" title="1.2三种交换方式"></a>1.2三种交换方式</h3><ul><li>电路交换</li><li>分组交换</li><li>报文交换</li></ul><h3 id="1-3计算机网络的定义和分类"><a href="#1-3计算机网络的定义和分类" class="headerlink" title="1.3计算机网络的定义和分类"></a>1.3计算机网络的定义和分类</h3><p><strong>分类</strong>：</p><ul><li>按交换技术</li><li>按使用者</li><li>按传输介质<ul><li>有线网络</li><li>无线网络</li></ul></li><li>按<strong>覆盖范围</strong><ul><li>广域网WAN</li><li>城域网MAN</li><li>局域网LAN</li><li>个域网PAN</li></ul></li><li>按拓扑结构<ul><li>总线型</li><li>星型</li><li>环型</li><li>网状型</li></ul></li></ul><h3 id="1-4计算机的性能指标"><a href="#1-4计算机的性能指标" class="headerlink" title="1.4计算机的性能指标"></a>1.4计算机的性能指标</h3><ul><li><p>速率</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E9%80%9F%E7%8E%87.png"></p></li><li><p>带宽</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%B8%A6%E5%AE%BD.png"></p></li><li><p>吞吐量</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%90%9E%E5%90%90%E9%87%8F.png"></p></li><li><p>时延</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E6%97%B6%E5%BB%B6.png"></p></li><li><p>时延带宽积</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E6%97%B6%E5%BB%B6%E5%B8%A6%E5%AE%BD%E7%A7%AF.png"></p></li><li><p>往返时间</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4.png"></p></li><li><p>利用率</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%88%A9%E7%94%A8%E7%8E%87.png"></p></li><li><p>丢包率</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%B8%A2%E5%8C%85%E7%8E%87.png"></p></li></ul><h3 id="1-5计算机网络的体系结构"><a href="#1-5计算机网络的体系结构" class="headerlink" title="1.5计算机网络的体系结构"></a>1.5计算机网络的体系结构</h3><ul><li><p>OSI体系结构（7层），法律上的国际标准</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/OIS.png"></p></li><li><p><strong>TCP/IP体系结构</strong>（4层），事实上的国际标准</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/TCPIP.png"></p><p>TCP/IP在网络层，使用的是协议是IP协议（中文：网际协议），因此，网络层又称网际层。</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/TCPIP2.png"></p></li><li><p>原理体系结构（5层），适用于教学</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%8E%9F%E7%90%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"></p></li></ul><h4 id="分层举例"><a href="#分层举例" class="headerlink" title="分层举例"></a>分层举例</h4><p>以下是一个简化的例子：</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%BE%8B.png"></p><p>简例分析：</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%BE%8B2.png"></p><p>简例深入分析：</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/HTTP%E6%8A%A5%E6%96%87.png"></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png"></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/IP%E6%95%B0%E6%8D%AE%E6%8A%A5.png"></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%B8%A7.png"></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E6%AF%94%E7%89%B9%E6%B5%81%E5%8F%8A%E8%BF%94%E5%9B%9E.png"></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="2-1物理层的基本概念"><a href="#2-1物理层的基本概念" class="headerlink" title="2.1物理层的基本概念"></a>2.1物理层的基本概念</h3><p>连接各种网络设备的<strong>传输媒体</strong>，大致分为两类：</p><ul><li>导引型<ul><li>双绞线</li><li>同轴电缆</li><li>光纤</li></ul></li><li>非导引型<ul><li>微波通信（2~40GHz）</li></ul></li></ul><p>计算机网络体系结构中的物理层，就是解决在各种传输媒体上传输比特0和1的问题，进而给数据链路层提供“透明”传输比特流的服务。如下图：</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B51.png"></p><p>物理层协议的主要任务：</p><ul><li>机械特性：指明接口所用接线器的<strong>形状</strong>和<strong>尺寸</strong>，<strong>引脚数目</strong>和<strong>排列</strong>，<strong>固定</strong>和<strong>锁定</strong>装置。</li><li>电气特性：指明在接口电缆的各条线上出现的<strong>电压的范围</strong>。</li><li>功能特性：指明某条线上出现的某一电平的<strong>电压表示何种意义</strong>。</li><li>过程特性：指明对于不同功能的各种可能<strong>事件的出现顺序</strong>。</li></ul><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B52.png"></p><h3 id="2-2物理层下的传输媒体"><a href="#2-2物理层下的传输媒体" class="headerlink" title="2.2物理层下的传输媒体"></a>2.2物理层下的传输媒体</h3><p>PS：传输媒体不属于计算机体系结构的任何一层，只能放置于物理层之下。</p><h3 id="2-3传输方式"><a href="#2-3传输方式" class="headerlink" title="2.3传输方式"></a>2.3传输方式</h3><ul><li><p>串行传输</p></li><li><p>并行传输</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%B8%B2%E5%B9%B6%E8%A1%8C.png"></p></li></ul><ul><li><p>同步传输</p><p>数据块以稳定的比特流的形式传输，字节之间没有间隔；而接收端在每个比特信号的中间时刻进行检测，以判别接收到的是比特0还是比特1。</p><p>在传输大量数据的过程中，会产生判别时刻的累计误差，会导致接收端对比特信号的判别错位。</p><p>因此，需要采取方法使收发双方的时钟保持同步。</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%A4%96%E5%90%8C%E6%AD%A5.png"></p></li><li><p>异步传输</p><p>字节之间的时间间隔不是固定的，接收端仅在每个字节的<strong>起始处</strong>对字节内的比特实现同步，为此，通常在每个字节前后分别加上起始位和结束位。</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%BC%82%E6%AD%A5%E4%BC%A0%E8%BE%931.png"></p><p>异步：指字节之间异步，即字节之间的时间间隔不固定。字节中的每个比特仍然要同步，即各比特的持续时间是相同的。</p></li><li><p>单向通信（单工）</p></li><li><p>双向交替通信（半双工）</p></li><li><p>双向同时通信（全双工）</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%85%B6%E4%BB%96%E4%BC%A0%E8%BE%93.png"></p></li></ul><h3 id="2-4编码和调制"><a href="#2-4编码和调制" class="headerlink" title="2.4编码和调制"></a>2.4编码和调制</h3><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E7%BC%96%E7%A0%81%E5%92%8C%E8%B0%83%E5%88%B6.png"></p><p><strong>码元</strong></p><p>在使用时间域的波形表示数字信号时，代表不同离散数值的基本<strong>波形</strong>。</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E7%A0%81%E5%85%83.png"></p><p><strong>信道和传输媒体的关系</strong></p><p>传输媒体不直接等于信道。</p><ul><li>对于单工传输，传输媒体中只包含一个信道（发送信道或接受信道）。</li><li>对于半双工和全双工，传输媒体要包含2个信道，即一个发送，一个接受。</li><li>如果使用信道复用技术，一条传输媒体还可以包含多个信道。</li></ul><p><strong>常用编码</strong></p><p>不归零，就是指在整个码元时间内，电平不会出现零电平。</p><ul><li><p>不归零编码</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%B8%8D%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%8101.png"></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E4%B8%8D%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%8102.png"></p></li><li><p>归零编码</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%BD%92%E9%9B%B6%E7%BC%96%E7%A0%81.png"></p></li><li><p>曼彻斯特编码</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81.png"></p></li><li><p>差分曼彻斯特编码</p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%B7%AE%E5%88%86%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9%E7%BC%96%E7%A0%81.png"></p></li></ul><p><strong>基本调制方法</strong></p><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%9F%BA%E6%9C%AC%E8%B0%83%E5%88%B6%E6%96%B9%E6%B3%95.png"></p><p>使用基本调制方法时，一个码元只能包含一个比特信息。若使一个码元包含多个比特信息，可以采用<strong>混合调制</strong>的方法。</p><p><strong>频率和相位</strong>：频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个。</p><p><strong>相位和振幅</strong>：通常情况下，相位和振幅可以结合一起调制，称为<strong>正交振幅调制QAM</strong>。</p><h3 id="2-5信道的极限容量"><a href="#2-5信道的极限容量" class="headerlink" title="2.5信道的极限容量"></a>2.5信道的极限容量</h3><p><img src="/2021/01/23/ji-suan-ji-wang-luo/%E5%A4%B1%E7%9C%9F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Note</title>
      <link href="2020/10/26/pythonnote/"/>
      <url>2020/10/26/pythonnote/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串索引（下标）"><a href="#字符串索引（下标）" class="headerlink" title="字符串索引（下标）"></a>字符串索引（下标）</h2><p>在Python中，字符串可以像其它语言的数组一样进行索引使用，方法是：<code>字符串变量名[索引]</code>。</p><p><strong>索引是从0开始，最大的索引值是字符串长度-1</strong>，如果使用了超出最大值，将会出现索引错误。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> myStr <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token operator">>></span><span class="token operator">></span> myStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'a'</span><span class="token operator">>></span><span class="token operator">></span> myStr<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token string">'g'</span><span class="token operator">>></span><span class="token operator">></span> myStr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>IndexError<span class="token punctuation">:</span> string index out of range</code></pre><p>正向的索引也就是从字符串开始向尾部的方向，使用的数值逐渐增加。Python还支持负数的索引值，方向是从字符串尾部向字符串开始的方向，同样超出了索引界限，会出现索引错误：5.1-下标.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 下标：给字符串里面每一个字符定义的编号，可以通过下标访问到每一个字符。</span><span class="token comment" spellcheck="true"># 下标从0开始，最大值是字符串总长度-1</span><span class="token comment" spellcheck="true"># 访问方式：[下标]</span>mystr <span class="token operator">=</span> <span class="token string">'abcdefg'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'完整输出：'</span><span class="token punctuation">,</span> mystr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下标可以为负，从字符串最后一个字符到字符串最开头的一个字符</span><span class="token comment" spellcheck="true"># 从-1开始，直到-字符串总长度</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 下标越界访问会产生错误，不论正负</span><span class="token comment" spellcheck="true"># print(mystr[7])</span><span class="token comment" spellcheck="true"># print(mystr[-8])</span></code></pre><p>运行结果如下：</p><pre class=" language-python"><code class="language-python">完整输出： abcdefgafgc</code></pre><p>索引的对应关系见下表：</p><table><thead><tr><th align="center">myStr</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">d</th><th align="center">e</th><th align="center">f</th><th align="center">g</th></tr></thead><tbody><tr><td align="center">正向</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td></tr><tr><td align="center">负向</td><td align="center">-7</td><td align="center">-6</td><td align="center">-5</td><td align="center">-4</td><td align="center">-3</td><td align="center">-2</td><td align="center">-1</td></tr></tbody></table><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><p>Python提供了很多用于字符串处理的函数，可以实现对字符串的各种处理。字符串是不可变数据类型，所以不能对字符串进行任何的修改。</p><p>参见：5.2-字符串操作1.py，5.3-字符串操作2.py</p><h3 id="lt-1-gt-find，rfind"><a href="#lt-1-gt-find，rfind" class="headerlink" title="&lt;1&gt; find，rfind"></a>&lt;1&gt; find，rfind</h3><p>查找字符串，严格区分大小写，返回值为字符串第一次出现所在的索引，后面的不管；未找到字符串，返回-1。</p><p>rfind从右边开始查找。</p><pre class=" language-python"><code class="language-python">mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span>str<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token operator">=</span>len<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>例如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> mystr <span class="token operator">=</span> <span class="token string">'Hello World zhangsan and world'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'012345678901234567890123456789'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 012345678901234567890123456789</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">)</span>Hello World zhangsan <span class="token operator">and</span> world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">25</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Man'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'orld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">7</span></code></pre><h3 id="lt-2-gt-index，rindex"><a href="#lt-2-gt-index，rindex" class="headerlink" title="&lt;2&gt; index，rindex"></a>&lt;2&gt; index，rindex</h3><p>基本等同于find，区别：如果index查找不到，给出异常错误。</p><p>rindex从右边开始查找。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'Man'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>ValueError<span class="token punctuation">:</span> substring <span class="token operator">not</span> found</code></pre><h3 id="lt-3-gt-startswith，endswith"><a href="#lt-3-gt-startswith，endswith" class="headerlink" title="&lt;3&gt; startswith，endswith"></a>&lt;3&gt; startswith，endswith</h3><p>返回是否以字符串开头或结尾。返回值为bool类型。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'He'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'ld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><h3 id="lt-4-gt-isalpha，isdigit，isalnum，isspace"><a href="#lt-4-gt-isalpha，isdigit，isalnum，isspace" class="headerlink" title="&lt;4&gt; isalpha，isdigit，isalnum，isspace"></a>&lt;4&gt; isalpha，isdigit，isalnum，isspace</h3><p>判断字符串是否全是字母，数字，字母或数字，空格。如果是则返回True，否则返回False。注意空字符串在isspace判断的结果是False，因为空格是一个字符，而空字符串没有字符。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abcd1234'</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  '</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>isspace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">False</span></code></pre><h3 id="lt-5-gt-count"><a href="#lt-5-gt-count" class="headerlink" title="&lt;5&gt; count"></a>&lt;5&gt; count</h3><p>统计字符串出现次数。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'orld'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span></code></pre><h3 id="lt-6-gt-replace"><a href="#lt-6-gt-replace" class="headerlink" title="&lt;6&gt; replace"></a>&lt;6&gt; replace</h3><p>替换，第三个参数为替换的最大次数。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'==@=='</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello Worl<span class="token operator">==</span>@<span class="token operator">==</span> zhangsan an<span class="token operator">==</span>@<span class="token operator">==</span> worl<span class="token operator">==</span>@<span class="token operator">==</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'==@=='</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello Worl<span class="token operator">==</span>@<span class="token operator">==</span> zhangsan an<span class="token operator">==</span>@<span class="token operator">==</span> world</code></pre><h3 id="lt-7-gt-capitalize，title，lower，upper"><a href="#lt-7-gt-capitalize，title，lower，upper" class="headerlink" title="&lt;7&gt; capitalize，title，lower，upper"></a>&lt;7&gt; capitalize，title，lower，upper</h3><p>capitalize将字符串中的第一个字符大写；</p><p>title将字符串的每个单词首字母大写；</p><p>lower将全部字符改为小写；</p><p>upper将全部字符改为大写：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abcd efgh'</span><span class="token punctuation">.</span>capitalize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Abcd efgh<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abcd efgh'</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Abcd Efgh<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hello world zhangsan <span class="token operator">and</span> world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>HELLO WORLD ZHANGSAN AND WORLD</code></pre><h3 id="lt-8-gt-join"><a href="#lt-8-gt-join" class="headerlink" title="&lt;8&gt; join"></a>&lt;8&gt; join</h3><p>使用字符串来连接join函数中参数的每一个元素，构造出一个新的字符串：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>mystr<span class="token punctuation">)</span><span class="token punctuation">)</span>H_e_l_l_o_ _W_o_r_l_d_ _z_h_a_n_g_s_a_n_ _a_n_d_ _w_o_r_l_d</code></pre><h3 id="lt-9-gt-split，splitlines"><a href="#lt-9-gt-split，splitlines" class="headerlink" title="&lt;9&gt; split，splitlines"></a>&lt;9&gt; split，splitlines</h3><p>用给定的字符串切分字符串。输出的结果是一个列表。splitlines按照行分隔，返回一个各行的列表。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'o Wor'</span><span class="token punctuation">,</span> <span class="token string">'d zhangsan and wor'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> mystr1 <span class="token operator">=</span> <span class="token string">'hello\nworld\nOK'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">)</span>helloworldOK<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr1<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'OK'</span><span class="token punctuation">]</span></code></pre><h3 id="lt-10-gt-partition，rpartition"><a href="#lt-10-gt-partition，rpartition" class="headerlink" title="&lt;10&gt; partition，rpartition"></a>&lt;10&gt; partition，rpartition</h3><p>将字符串分成三部分，注意如果切分的字符串没有的话，仍然是三部分。</p><p>rpartition 从右边开始分解。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Hello World '</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">' and world'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'IT'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Hello World zhangsan and world'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span></code></pre><h3 id="lt-11-gt-ljust，rjust，center"><a href="#lt-11-gt-ljust，rjust，center" class="headerlink" title="&lt;11&gt; ljust，rjust，center"></a>&lt;11&gt; ljust，rjust，center</h3><p>使字符串在给定的空间里左对齐，右对齐，居中对齐：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Hello World zhangsan <span class="token operator">and</span> world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                              Hello World zhangsan <span class="token operator">and</span> world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>mystr<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               Hello World zhangsan <span class="token operator">and</span> world</code></pre><h3 id="lt-12-gt-lstrip，rstrip，strip"><a href="#lt-12-gt-lstrip，rstrip，strip" class="headerlink" title="&lt;12&gt; lstrip，rstrip，strip"></a>&lt;12&gt; lstrip，rstrip，strip</h3><p>去掉字符串左边，右边和两边的空格或给定的字符串，不会去掉字符串中间的空格或字符串：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str1 <span class="token operator">=</span> <span class="token string">'    hello world   '</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hello world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    hello world<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hello world</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表由一系列按特定顺序排列的元素组成。列表中的元素可以是不同类型的。列表使用<code>[ ]</code>括起所有元素，元素用逗号分隔开。</p><p>例如：</p><pre class=" language-python"><code class="language-python">testList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span></code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><p>对列表或其它复合数据类型中，把所有元素挨个进行操作，称之为遍历。可以使用循环对列表进行遍历：5.4-列表遍历.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 使用循环进行列表的遍历</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 使用for循环实现</span><span class="token keyword">for</span> tempstr <span class="token keyword">in</span> mylist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tempstr<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用while循环实现</span>i <span class="token operator">=</span> <span class="token number">0</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python">abcdzhangsanjiangningabcdzhangsanjiangning</code></pre><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>不论是对列表的插入还是删除操作，或者是单纯的查找，都需要判定某个元素在列表中是否存在，Python使用in和index实现查找。使用count实现计数。例如：5.5-列表查找.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in, not in</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">'zhang'</span> <span class="token keyword">in</span> mylist<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'存在'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不存在'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># count</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python">不存在<span class="token number">0</span><span class="token number">2</span></code></pre><h2 id="添加-插入-修改"><a href="#添加-插入-修改" class="headerlink" title="添加/插入/修改"></a>添加/插入/修改</h2><p>对列表可以添加元素，可以使用append，extend在列表的结尾处添加元素，也可以使用insert在列表中插入元素。例如：5.6-列表插入操作.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 添加操作</span><span class="token comment" spellcheck="true"># append 添加，把添加内容直接作为元素添加</span><span class="token comment" spellcheck="true"># 对列表操作，列表的内容会发生改变</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'defg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># extend 添加，把列表拆成元素添加</span><span class="token comment" spellcheck="true"># append 添加</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span>appendlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span>mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>appendlist<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'append:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># extend</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span>extendlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span>mylist<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>extendlist<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'extend:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># insert 在index位置前插入元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'insert:'</span><span class="token punctuation">)</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'defg'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># insert 对于列表的插入，等同于append做法</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> appendlist<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 对列表元素进行修改，使用索引定位到元素，直接赋值修改</span>mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token string">'defg'</span><span class="token punctuation">]</span>append<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>extend<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span>insert<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'defg'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'aaa'</span><span class="token punctuation">,</span> <span class="token string">'bbb'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">]</span></code></pre><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>列表的删除操作有这几种：删除某一个元素，删除最后一个元素和删除某一个指定值的元素。例如：5.7-列表删除.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 删除：del, pop, remove</span><span class="token comment" spellcheck="true"># del 删除给定下标的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del:'</span><span class="token punctuation">)</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token keyword">del</span><span class="token punctuation">(</span>mylist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pop 删除最后一个或指定索引的元素</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pop:'</span><span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># remove 删除指定值的元素</span><span class="token comment" spellcheck="true"># 一次只删除一个</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'remove:'</span><span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">del</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>pop<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span>remove<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span></code></pre><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>通常情况下，列表中的元素有确定的顺序时，便于各种使用，所以要对列表中的元素进行排序。Python提供排序函数对列表进行排序：5.8-列表排序.py</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># sort, reverse</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 默认为升序排列</span>mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果需要降序排列，需要指定reverse=True</span>mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 字符串排序，根据字符集的值排序，数字&lt;大写字母&lt;小写字母</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'+-*/'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span></code></pre><p>结果为：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'+-*/'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'+-*/'</span><span class="token punctuation">,</span> <span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'jiangning'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">]</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法</title>
      <link href="2020/10/22/shu-ju-jie-gou-he-suan-fa/"/>
      <url>2020/10/22/shu-ju-jie-gou-he-suan-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="算法绪论"><a href="#算法绪论" class="headerlink" title="算法绪论"></a>算法绪论</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>算法是解决特定问题求解步骤的描述，在计算机中为指令的有限序列，并且每一条指令表示一个或多个操作。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><h3 id="设计的要求"><a href="#设计的要求" class="headerlink" title="设计的要求"></a>设计的要求</h3><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>高效率</li><li>低存储量</li></ul><h2 id="算法时间复杂度"><a href="#算法时间复杂度" class="headerlink" title="算法时间复杂度"></a>算法时间复杂度</h2><p>算法时间复杂度一般用<strong>大O记法</strong>表示。一般情况下，随着n的增大，T(n)增长最慢的算法为最优算法。</p><h3 id="推导大O阶"><a href="#推导大O阶" class="headerlink" title="推导大O阶"></a>推导大O阶</h3><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%A4%A7O%E9%98%B6%E6%8E%A8%E5%AF%BC.png" alt="大O阶推导"></p><p>得到的结果就是<strong>大O阶</strong>。</p><h4 id="常数阶"><a href="#常数阶" class="headerlink" title="常数阶"></a>常数阶</h4><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%B8%B8%E6%95%B0%E9%98%B6%E4%BE%8B%E5%AD%9001.png" alt="常数阶例子"></p><p>该算法的时间复杂度为 **O(1)**。</p><p><strong>注意</strong>：</p><ul><li>不管常数（即执行次数）是多少，我们都记做 **O(1)**。</li><li>对于<strong>分支结构</strong>，无论是真，是假，执行的次数都是恒定的。所以，单纯的分支结构（不包含在循环结构），其时间复杂度都是 **O(1)**）</li></ul><h4 id="线性阶"><a href="#线性阶" class="headerlink" title="线性阶"></a>线性阶</h4><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/线性阶例子01.png" alt="线性阶例子01" style="zoom:150%;"><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E7%BA%BF%E6%80%A7%E9%98%B6%E4%BE%8B%E5%AD%9002.png" alt="线性阶例子02"></p><p>该段代码的循环的时间复杂度为 **O(n)**。因为循环体中的代码需要执行n次。</p><h4 id="对数阶"><a href="#对数阶" class="headerlink" title="对数阶"></a>对数阶</h4><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%AF%B9%E6%95%B0%E9%98%B6%E4%BE%8B%E5%AD%9001.png" alt="对数阶例子"></p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%AF%B9%E6%95%B0%E9%98%B6%E4%BE%8B%E5%AD%9002.png" alt="对数阶的大O"></p><h4 id="平方阶"><a href="#平方阶" class="headerlink" title="平方阶"></a>平方阶</h4><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%B9%B3%E6%96%B9%E9%98%B6%E4%BE%8B%E5%AD%9001.png" alt="平方阶例子01"></p><p>以上例子，是一个循环嵌套，时间复杂度为 *<em>O(n^2)**。如果外循环次数改为m次，时间复杂度为 **O(m</em>n)**。</p><p>因此，<strong>总结</strong>出：循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%B9%B3%E6%96%B9%E9%98%B6%E4%BE%8B%E5%AD%9002.png" alt="平方阶例子02"></p><h4 id="方法调用时的时间复杂度"><a href="#方法调用时的时间复杂度" class="headerlink" title="方法调用时的时间复杂度"></a>方法调用时的时间复杂度</h4><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A801.png" alt="方法调用01"></p><p>上面代码调用了函数 function：</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A802.png" alt="方法调用02"></p><p>function 函数的时间复杂度是 O(1)，所以整体的时间复杂度是 O(n)。</p><p>假如 function 变为下面这样的：</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A803.png" alt="方法调用03"></p><p>上述的最终的时间复杂度为 O(n^2)。</p><p>下面的代码稍微复杂一点：</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A804.png" alt="方法调用04"></p><p>对于以上复杂代码，它的分析如下：</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A805.png" alt="方法调用05"></p><h3 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h3><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E8%A1%A8.png" alt="时间复杂度表"></p><p>常用的时间复杂度所耗的时间从小到大依次是：</p><p><img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E9%A1%BA%E5%BA%8F.png" alt="时间复杂度顺序"></p><h2 id="算法空间复杂度"><a href="#算法空间复杂度" class="headerlink" title="算法空间复杂度"></a>算法空间复杂度</h2><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>链表是有序的列表，但是它在内存中是存储如下：</p><p> <img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="单链表示意图"></p><p>小结：</p><ul><li>链表是以节点的方式来存储，<strong>是链式存储</strong></li><li>每个节点包含 data 域， next 域：指向下一个节点</li><li>如图：发现<strong>链表的各个节点不一定是连续存储</strong></li><li>链表分<strong>带头节点的链表</strong>和<strong>没有头节点的链表</strong>，根据实际的需求来确定</li></ul><p>单链表（带头结点）逻辑结构示意图如下：</p><p> <img src="/2020/10/22/shu-ju-jie-gou-he-suan-fa/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E7%9A%84%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="单链表示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE进阶01之面向对象</title>
      <link href="2020/10/18/javase-jin-jie-01-zhi-mian-xiang-dui-xiang/"/>
      <url>2020/10/18/javase-jin-jie-01-zhi-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>基础含义是<strong>不可变</strong>。</p><ul><li>采用 final 修饰的<strong>类不能继承</strong>。</li><li>采用 final 修饰的<strong>方法不能被覆盖</strong></li><li>采用 final 修饰的<strong>变量不能被修改</strong></li><li>final 修饰的变量必须显示<strong>初始化</strong></li><li>如果修饰的引用，那么这个引用只能指向一个对象，也就是说这个引用不能再次赋值，但被指向的对象是可以修改的</li><li>构造方法不能被 final 修饰</li></ul><h3 id="采用final修饰引用"><a href="#采用final修饰引用" class="headerlink" title="采用final修饰引用"></a>采用final修饰引用</h3><p><img src="/2020/10/18/javase-jin-jie-01-zhi-mian-xiang-dui-xiang/final%E4%BF%AE%E9%A5%B0%E7%9A%84%E5%BC%95%E7%94%A8.png" alt="final修饰的引用"></p><p>final 修饰的引用，该引用只能指向一个对象，并且只能永远指向这一个对象，无法再指向其他对象。并且在该方法执行过程当中，该引用指向这对象之后，这对象不会被<strong>垃圾回收器</strong>回收。直到当前方法结束，才会释放空间。</p><h3 id="采用final修饰实例变量"><a href="#采用final修饰实例变量" class="headerlink" title="采用final修饰实例变量"></a>采用final修饰实例变量</h3><pre><code>public class Person&#123;    final int age; //报错    final int age = 10; //可以    final int weight;    public Person()&#123;        weight = 80;    &#125; //可以    /*    final int weight;    public Person(int w)&#123;        weight = w;    &#125; 可以    */&#125;</code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p><strong>final修饰的变量一般用static联合修饰</strong>，简称<strong>常量</strong>。</p><p>常量金额静态变量，都是存储在方法区，在类加载是初始化。</p><pre><code>final static String COUNTRY = &quot;中国&quot;;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitUse</title>
      <link href="2020/10/18/gituse/"/>
      <url>2020/10/18/gituse/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是Git"><a href="#什么是Git" class="headerlink" title="什么是Git"></a>什么是Git</h2><p>Git是一套程序源代码的分布式版本管理系统，最初用于管理Linux核心代码的开发，后来被多个开源工程采用，现在已经成为互联网协作开发的标准的源代码管理软件。（更加管理项目的开发流程）</p><p><a href="https://git-scm.com/">Git官方网站</a></p><h3 id="Git初运行"><a href="#Git初运行" class="headerlink" title="Git初运行"></a>Git初运行</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> version//查看git的版本号</code></pre><p><img src="/2020/10/18/gituse/git-version.png"></p><p><a href="https://try.github.io/">Git在线体验</a></p><h3 id="采用Git的云服务"><a href="#采用Git的云服务" class="headerlink" title="采用Git的云服务"></a>采用Git的云服务</h3><ul><li>GitHub</li><li>gitee(oschina)</li><li>等等</li></ul><h2 id="理解版本管理的流程"><a href="#理解版本管理的流程" class="headerlink" title="理解版本管理的流程"></a>理解版本管理的流程</h2><h3 id="代码开发流程"><a href="#代码开发流程" class="headerlink" title="代码开发流程"></a>代码开发流程</h3><ol><li>系统开发，编写代码</li><li>提交代码给Git本地库</li><li>将代码提交到Git远程库，分享给团队其他人</li><li>从远程库获取最新代码</li><li>继续修改代码</li><li>重复第二步</li></ol><h3 id="Git基础概念（本期重点）"><a href="#Git基础概念（本期重点）" class="headerlink" title="Git基础概念（本期重点）"></a>Git基础概念（本期重点）</h3><ol><li>本地工作文件夹</li><li>Git索引区（Stage）</li><li>Git库（Repository）<ul><li>local：本地库</li><li>remote：远程库（服务器端）</li></ul></li></ol><h2 id="Git初始设定"><a href="#Git初始设定" class="headerlink" title="Git初始设定"></a>Git初始设定</h2><h3 id="建立一个Git库"><a href="#建立一个Git库" class="headerlink" title="建立一个Git库"></a>建立一个Git库</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> init//初始化</code></pre><p><strong>在当前文件下，建/初始一个Git的数据库</strong>。当前文件夹下所有的文件，都可以进行文件管理。</p><h3 id="设置基础信息"><a href="#设置基础信息" class="headerlink" title="设置基础信息"></a>设置基础信息</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> init//建一个库$ <span class="token function">git</span> config -l//查看当前的设置$ <span class="token function">git</span> config --global user.name <span class="token string">"LogicVan"</span>//进行用户名的设置$ <span class="token function">git</span> config --global user.email <span class="token string">"LogicVan@163.com"</span>//Git是Internet分布式开发管理系统，Internet每个用户有邮件地址，进行邮箱的设置$ <span class="token function">git</span> config --global color.ui true//设置编辑器的颜色为true，多在Linux和Mac系统设置，Windows里不多$ <span class="token function">git</span> config -l</code></pre><p>跳转到D盘下文件夹F下的Cloud文件夹</p><p><img src="/2020/10/18/gituse/git01.png"></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> init//建一个库</code></pre><p><img src="/2020/10/18/gituse/git02.png"></p><p>查看新建出来的.git文件下有什么</p><p><img src="/2020/10/18/gituse/git03.png"></p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config -l//查看当前的设置</code></pre><p><img src="/2020/10/18/gituse/git04.png"></p><p>由于我之前已经设置好用户名和邮箱了，就不再演示了。</p><h3 id="方便的命令"><a href="#方便的命令" class="headerlink" title="方便的命令"></a>方便的命令</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> config --help//$ <span class="token function">git</span> <span class="token function">help</span> config也可以</code></pre><p>在Git Bash中敲下代码，再按下回车键，在浏览器中打开帮助文档（Windows下），若是Linux，则在当前命令行中打开。</p><h2 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h2><h3 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h3><ul><li>建立文件（本地工作区）</li><li>追加文件（索引区）</li><li>提交文件（本地库）</li></ul><p>跳转到D盘下文件夹F下的Cloud文件夹</p><p><img src="/2020/10/18/gituse/git01.png"></p><p>初始化Git库</p><p><img src="/2020/10/18/gituse/git02.png"></p><p>在F/Cloud文件下，新建index.html文件，命令如下，也可手动自行创造。</p><p><img src="/2020/10/18/gituse/git05.png"></p><p>使用<strong>git status</strong>命令，看一下当前文件夹的状态。此时index.htm文件未放入到索引区，显示红色。</p><p><img src="/2020/10/18/gituse/git06.png"></p><p>使用<strong>git add index.htm</strong>命令，把当前红色文件放到索引区。</p><p><img src="/2020/10/18/gituse/git07.png"></p><p>再次查看状态，index.htm变为绿色。本地有一个文件，修改完之后，提交到索引区，但是还没有向数据库提交。</p><p><img src="/2020/10/18/gituse/git08.png"></p><p>**git commit -m “…”**提交，需要加一些备注，告诉数据库你改了些什么。</p><p><img src="/2020/10/18/gituse/git09.png"></p><p>再次查看状态。index.htm并未消失，只是在数据库当中寄存了一个版本。</p><p><img src="/2020/10/18/gituse/git10.png"></p><p><strong>git log</strong>查看提交历史。</p><p><img src="/2020/10/18/gituse/git11.png"></p><h2 id="查看提交履历"><a href="#查看提交履历" class="headerlink" title="查看提交履历"></a>查看提交履历</h2><p><strong>知识点：git log</strong>命令的使用</p><h3 id="实战演练-1"><a href="#实战演练-1" class="headerlink" title="实战演练"></a>实战演练</h3><pre class=" language-bash"><code class="language-bash">​~~~bash$ <span class="token function">git</span> log$ <span class="token function">nano</span> index.htm<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.$ <span class="token function">git</span> add index.htm$ <span class="token function">git</span> commit -m <span class="token string">"added code"</span>$ <span class="token function">git</span> log$ <span class="token function">git</span> log -n//n为1,2,3<span class="token punctuation">..</span>.,显示最近n次记录$ <span class="token function">git</span> log --oneline//**将记录归为一行显示$ <span class="token function">git</span> log -p//将记录详细显示$ <span class="token function">git</span> log --stat//对每次提交的信息进行统计$ <span class="token function">git</span> log --help//对于git log 选项的帮助文档</code></pre><h2 id="把握Git状态"><a href="#把握Git状态" class="headerlink" title="把握Git状态"></a>把握Git状态</h2><p><strong>知识点</strong></p><ul><li>git status</li><li>git checkout – [file]</li><li>git restore / git restore –staged</li></ul><p>修改先前的index.htm文件，多加一句“I love git”，检查状态。</p><p><img src="/2020/10/18/gituse/git12.png"></p><ul><li>使用<strong>git checkout – index.htm</strong>，回车，发现刚刚加上的“I love git”撤销了，回复之前的状态。</li><li>观察红字上方，有restore命令，于是<strong>git restore index.htm</strong>，也可以撤销，恢复刚刚状态。</li></ul><p><img src="/2020/10/18/gituse/git13.png"></p><p>如果加入了索引区add（<strong>没有提交commit</strong>），使用<strong>git checkout – [file]**是无效的。此时，</strong>git restore –staged index.htm<strong>即可将文件从索引区（暂存区）撤出，但是</strong>不撤销对 工作区 文件的更改**,即由<strong>git status</strong>命令得出的红字“被修改  且 被加入暂存区 ”被撤销。</p><p>详细内容：</p><p><a href="https://blog.csdn.net/houhj168/article/details/106335131">git restore 和 git restore –staged 的区别（详细）</a></p><p><a href="https://blog.csdn.net/u013493841/article/details/104451987/">git restore 和 git restore –staged 的区别</a></p><h2 id="比较修改内容"><a href="#比较修改内容" class="headerlink" title="比较修改内容"></a>比较修改内容</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git diff</li><li>git diff –cached</li></ul><h3 id="实战演练-2"><a href="#实战演练-2" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们再次对上次的index.htm文件进行操作，增加一行“I love git”，查看状态，显示未添加（红字状态），图略。</p><p>此时，我们使用<strong>git diff</strong>命令，显示出我们修改的内容。</p><p><img src="/2020/10/18/gituse/git-diff01.png"></p><p>我们再将index.htm文件提交到索引区（暂存区）并查看状态，代码略，图略。</p><p>再次使用<strong>git diff</strong>命令，这时，我们发现没有任何反映和显示。</p><p>使用<strong>git diff –cached</strong>命令，则再一次显示出我们修改的内容。</p><p><img src="/2020/10/18/gituse/git-diff02.png"></p><h2 id="Git文件操作"><a href="#Git文件操作" class="headerlink" title="Git文件操作"></a>Git文件操作</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git add [file1 file 2 …]</li><li>git add .  将当前工作文件夹下的所有文件（包括子目录）添加到索引区  </li><li>git rm / git rm –cached 删除</li><li>git mv  文件移动，更多用于文件更名</li></ul><h3 id="实战演练-3"><a href="#实战演练-3" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们再一次修改index.htm文件，并且创建style.css文件，查看状态。</p><p><img src="/2020/10/18/gituse/git-add01.png"></p><p>使用**git add .**，提交所有文件到索引区。</p><p><img src="/2020/10/18/gituse/git-add02.png"></p><p>使用<strong>git mv</strong>，进行文件更名。</p><p><img src="/2020/10/18/gituse/git-mv.png"></p><p>使用<strong>git rm</strong>命令，将刚刚提交到索引区内的文件从中撤了出来。</p><p><img src="/2020/10/18/gituse/git-rm.png"></p><h2 id="Git忽略管理"><a href="#Git忽略管理" class="headerlink" title="Git忽略管理"></a>Git忽略管理</h2><p>设置Git忽略的文件，这些文件不参与Git库的提交和管理。</p><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul><li>. gitignore</li></ul><p>详情查询：</p><p><a href="https://git-scm.com/docs/gitignore">帮助网页</a></p><h3 id="实战演练-4"><a href="#实战演练-4" class="headerlink" title="实战演练"></a>实战演练</h3><p>我们创建temp.txt文件，查看状态，显示红字，但是我们不想这个文件被管理，所以我们有创建了一个<strong>末尾文件名</strong>为“ . gitignore”的文件，查看状态，这两个文件目前都是被管理的（ . gitignore文件肯定是需要管理的）</p><p><img src="/2020/10/18/gituse/git-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86.png"></p><p>我们在 . gitignore文件中写入 “ *.txt “这一行，如图：</p><p><img src="/2020/10/18/gituse/git-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%8602.png"></p><p>再次查看状态，这次只有 . gitignore文件被管理，达到了我们的目的。</p><p><img src="/2020/10/18/gituse/git-gitignore.png"></p><h2 id="更新最后的提交"><a href="#更新最后的提交" class="headerlink" title="更新最后的提交"></a>更新最后的提交</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul><li>git commit -m “…”</li><li>git cmmit –amend</li><li>git commit -am “…” [–amend]</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DatabaseConcept</title>
      <link href="2020/10/18/databaseconcept/"/>
      <url>2020/10/18/databaseconcept/</url>
      
        <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><h3 id="1-1-简述"><a href="#1-1-简述" class="headerlink" title="1-1.简述"></a>1-1.简述</h3><p><strong>数据库管理系统</strong>(DBMS)由一个互相关联的数据的集合和一组用于访问这些数据的程序组成。</p><p>这个数据集合通常称作<strong>数据库</strong>(Database)。DBMS的主要目标是要提供一种可以方便，高效的存储数据库信息的途径。</p><p>设计数据库系统的<strong>目的</strong>是为了管理大量信息。</p><h3 id="1-2-文件处理系统"><a href="#1-2-文件处理系统" class="headerlink" title="1-2.文件处理系统"></a>1-2.文件处理系统</h3><p><strong>文件处理系统</strong>(File-processing System)是传统的操作系统所支持的。永久记录被存储在多个不同的文件中，人们编写不同的应用程序来将记录从有关文件中取出或加入到适当的文件中。</p><p><strong>弊端</strong>：</p><ul><li><strong>数据冗余</strong>和<strong>不一致(data redundancy and inconsistency)</strong></li><li><strong>数据访问困难</strong></li><li><strong>数据孤立(data isolation)</strong></li><li><strong>完整性问题(integrity problem)</strong></li><li><strong>原子性问题(atomacity problem)</strong></li><li><strong>并发访问异常(concurrent-access anomaly)</strong></li><li><strong>安全性问题</strong></li></ul><h2 id="2-数据视图"><a href="#2-数据视图" class="headerlink" title="2.数据视图"></a>2.数据视图</h2><p>数据库系统的一个主要目的是给用户提供数据的<strong>抽象视图</strong>，也就是说，系统隐藏关于数据存储和维护的某些细节。</p><h3 id="2-1-数据抽象"><a href="#2-1-数据抽象" class="headerlink" title="2-1.数据抽象"></a>2-1.数据抽象</h3><p>一个可用的系统必须能够高效的检索数据。</p><ul><li><strong>物理层</strong>。最低层次的抽象，描述数据实际上是怎样存储的。物理层详细描述复杂的底层数据结构。</li><li><strong>逻辑层</strong>。比物理层稍高的抽象，描述数据库中存储什么数据，以及这些数据间存在什么关系。</li><li><strong>视图层</strong>。最高层次的抽象，只描述整个数据库的某个部分。</li></ul><p>这三层抽象的相互关系如下图：</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9313.png"></p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9314.png"></p><h3 id="2-2-实例和模式"><a href="#2-2-实例和模式" class="headerlink" title="2-2.实例和模式"></a>2-2.实例和模式</h3><p><strong>实例</strong>：特定时刻存储在数据库中的信息的集合称作数据库的一个<strong>实例</strong>。</p><p><strong>模式</strong>：数据库事务总体设计称作数据库<strong>模式</strong>。</p><p>根据前面讨论的不同的抽象层次，数据库系统可以分为几种不同的模式：</p><ul><li><strong>物理模式</strong>。隐藏在逻辑模式之下</li><li><strong>逻辑模式</strong>。目前最重要的一种模式</li><li><strong>子模式</strong>。</li></ul><h2 id="3-什么是数据库"><a href="#3-什么是数据库" class="headerlink" title="3.什么是数据库"></a>3.什么是数据库</h2><p>数据库起源于规范化 “ 表(Table) “ 的处理。</p><p>表(Table)：以按行按列形式组织及展现的数据。</p><p>表(Table)中描述了一批相互有关联关系的数据–&gt;关系</p><p>常用术语：</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9301.png"></p><p>数据库(Database)：相互之间有关联关系的若干个Table的集合，如下图。</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9303.png"></p><p>以下的图中，左边称为结构化数据库，右边称为非结构化数据库。</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9302.png"></p><p>左边称为结构化数据库，右边称为非结构化数据库。非结构化数据库除了有关系数据库的特性之外，还有其他的特性。各种各样的数据都可聚集成库，它们的基础都是关系数据库。</p><h2 id="4-什么是数据库系统"><a href="#4-什么是数据库系统" class="headerlink" title="4.什么是数据库系统"></a>4.什么是数据库系统</h2><h3 id="4-1-数据库系统-工作环境"><a href="#4-1-数据库系统-工作环境" class="headerlink" title="4-1.数据库系统(工作环境)"></a>4-1.数据库系统(工作环境)</h3><ul><li>数据库(DB)：Database</li><li>数据库管理系统(DBMS)</li><li>数据库应用(DBAP)</li><li>数据库管理员(DBA)</li><li>计算机基本系统</li></ul><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9304.png"></p><h3 id="4-2-实例层次"><a href="#4-2-实例层次" class="headerlink" title="4-2.实例层次"></a>4-2.实例层次</h3><p>数据库系统(工作环境)：图书管理数据库系统</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9305.png"></p><h3 id="4-3-实例化与抽象化-概念化"><a href="#4-3-实例化与抽象化-概念化" class="headerlink" title="4-3.实例化与抽象化(概念化)"></a>4-3.实例化与抽象化(概念化)</h3><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9306.png"></p><h2 id="5-数据库管理系统-DBMS"><a href="#5-数据库管理系统-DBMS" class="headerlink" title="5.数据库管理系统(DBMS)"></a>5.数据库管理系统(DBMS)</h2><h3 id="5-1-从用户角度"><a href="#5-1-从用户角度" class="headerlink" title="5-1.从用户角度"></a>5-1.从用户角度</h3><h4 id="5-1-1-具有数据库定义的功能"><a href="#5-1-1-具有数据库定义的功能" class="headerlink" title="5-1-1.具有数据库定义的功能"></a>5-1-1.具有数据库定义的功能</h4><p>定义数据库中Table的名称，标题(内含的属性名称及对该属性的值的要求)等。</p><ul><li>DBMS提供一套数据定义语言(DDL：Data Definition Language)给用户</li><li>用户使用DDL描述其所要建立表的格式</li><li>DBMS依照用户的定义，创建数据库及其中的Table</li></ul><h4 id="5-1-2-具有数据库操作的功能"><a href="#5-1-2-具有数据库操作的功能" class="headerlink" title="5-1-2.具有数据库操作的功能"></a>5-1-2.具有数据库操作的功能</h4><p>向数据库当中的Table中<strong>增加，删除，更新</strong>数据及对数据进行查询，检索，统计等。</p><ul><li>DBMS提供一套数据操纵语言(DML：Data Manipulation Language)给用户</li><li>用户使用DML描述其所要进行的增，删，改，查等操作</li><li>DBMS依照用户的操作描述，实际执行这些操作</li></ul><h4 id="5-1-3-具有数据库控制的功能"><a href="#5-1-3-具有数据库控制的功能" class="headerlink" title="5-1-3.具有数据库控制的功能"></a>5-1-3.具有数据库控制的功能</h4><p>控制数据库中的数据使用。</p><ul><li>DBMS提供一套数据控制语言(DCL：Data Control Language)给用户</li><li>用户使用DCL描述其对数据库所要实施的控制</li><li>DBMS依照用户的操作描述，实际执行控制</li></ul><h4 id="5-1-4-具有数据库维护的功能"><a href="#5-1-4-具有数据库维护的功能" class="headerlink" title="5-1-4.具有数据库维护的功能"></a>5-1-4.具有数据库维护的功能</h4><p>转储，恢复，重组，性能检测，分析</p><ul><li>DBMS提供一系列程序(实用程序，例行程序)给用户</li><li>在这些程序中提供了对数据库维护的各种功能</li><li>用户使用这些程序进行各种数据库维护操作</li></ul><p>数据库维护的实用程序，一般都是有数据库管理员(DBA)来使用和掌握的。</p><h3 id="5-2-数据库语言"><a href="#5-2-数据库语言" class="headerlink" title="5-2.数据库语言"></a>5-2.数据库语言</h3><ul><li>数据定义语言(DDL：Data Definition Language)</li><li>数据操纵语言(DML：Data Manipulation Language)</li><li>数据控制语言(DCL：Data Control Language)</li><li>数据库各种操作的执行</li></ul><h3 id="5-3-从系统实现角度"><a href="#5-3-从系统实现角度" class="headerlink" title="5-3.从系统实现角度"></a>5-3.从系统实现角度</h3><p>强调了”形式-&gt;构造-&gt;自动化”</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9307.png"></p><h2 id="6-相关介绍"><a href="#6-相关介绍" class="headerlink" title="6.相关介绍"></a>6.相关介绍</h2><p>岗位介绍</p><ul><li>End Users，普通用户</li><li>Application Programmers，应用程序员</li><li>Database anylyzer and designer</li><li>Database Administrators，DBA</li><li>Database Management System designer and inplementor</li><li>Techniques for Special and New Database Management Syatem</li></ul><h2 id="7-数据库的标准结构"><a href="#7-数据库的标准结构" class="headerlink" title="7.数据库的标准结构"></a>7.数据库的标准结构</h2><h3 id="7-1-分层抽象"><a href="#7-1-分层抽象" class="headerlink" title="7-1.分层抽象"></a>7-1.分层抽象</h3><p>DBMS管理数据的三个层次</p><ul><li>External Level，User Level：某一个用户能够看到的与处理的数据，全局数据中的某一部分</li><li>Conceptual Level，Logic Level：从全局角度理解/管理的数据，含相应的关联约束</li><li>Internal Level，Physical Level：存储在介质上的数据，含存储路径，存储方式，索引方式等</li></ul><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9308.png"></p><h3 id="7-2-数据-视图-与模式"><a href="#7-2-数据-视图-与模式" class="headerlink" title="7-2.数据(视图)与模式"></a>7-2.数据(视图)与模式</h3><p>模式(Schema)：</p><ul><li>对数据库中数据所进行的一种结构性的描述</li><li>所观察到数据的结构信息</li></ul><p>视图(View)/数据(Data)：某一种表现形式下表现出来的数据库中的数据</p><p>三级模式(三级视图)</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9309.png"></p><p>两层映像</p><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9310.png"></p><h2 id="8-数据模型"><a href="#8-数据模型" class="headerlink" title="8.数据模型"></a>8.数据模型</h2><h3 id="8-1-概念"><a href="#8-1-概念" class="headerlink" title="8-1.概念"></a>8-1.概念</h3><p>数据库结构的基础是<strong>数据模型</strong>。数据模型是一个描述数据，数据联系，数据语义以及一致性约束的概念工具的集合。</p><h3 id="8-2-分类"><a href="#8-2-分类" class="headerlink" title="8-2.分类"></a>8-2.分类</h3><ul><li><strong>关系模型</strong>：使用表的集合来表示数据和数据间的联系。使用最广泛。</li><li><strong>实体-联系(E-R)模型</strong></li><li><strong>基于对象的数据模型</strong>(object-based data model)：面向对象的程序设计导致面向对象数据模型的发展。</li><li><strong>半结构化数据结构</strong></li></ul><p>PS：历史上<strong>网状数据模型</strong>和<strong>层次数据模型</strong>已经很少被使用了。</p><h2 id="9-关系模型简述"><a href="#9-关系模型简述" class="headerlink" title="9.关系模型简述"></a>9.关系模型简述</h2><p>标准的数据库语言SQL语言是建立在关系模型基础上的。形象的说，一个关系(relation)模型就是一个表(Table)。</p><p>关系模型就是处理Table的，它由三个部分组成：</p><ul><li>描述DB各种数据的基本结构形式(Table/Relation)</li><li>描述Table与Table之间所可能发生的各种操作(关系运算)</li><li>描述这些操作所应遵循的约束条件(完整性约束)</li></ul><h2 id="10-什么是关系"><a href="#10-什么是关系" class="headerlink" title="10.什么是关系"></a>10.什么是关系</h2><h3 id="10-1-表的基本构成要素"><a href="#10-1-表的基本构成要素" class="headerlink" title="10-1.表的基本构成要素"></a>10-1.表的基本构成要素</h3><p><img src="/2020/10/18/databaseconcept/%E6%95%B0%E6%8D%AE%E5%BA%9311.png"></p><h3 id="10-2-相关概念"><a href="#10-2-相关概念" class="headerlink" title="10-2.相关概念"></a>10-2.相关概念</h3><p>我们必须有一种能够区分给定关系中不同的元组的方法。这用它们的属性来表明。也就是说，一个元组的属性值必须是能够唯一区分的。换句话说，一个关系中没有两个元组在所有属性上的取值都相同。</p><ul><li><p><strong>超码</strong>：是一个或多个属性的集合，这些属性的集合可以我们在一个关系中能够唯一标识一个元组。超码中可能包含无关紧要的属性。</p></li><li><p><strong>候选码/候选键</strong>：最小的超码称之为候选码。关系中的一个属性组，其值能够唯一标识一个元组，若从该属性组中去掉任何一个属性，它就不具有这一性质，这样的属性组称作候选码。</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/%E6%95%B0%E6%8D%AE%E5%BA%9312.png"></p></li><li><p><strong>主码/主键</strong>(Primary Key)：当有多个候选码时，可以选定一个作为主码。DBMS以主码为主要线索管理关系中的各个元组。主码应该选择那些值从不或极少变化的属性。(no part of a primary key may be null)</p></li><li><p><strong>主属性与非主属性</strong>：包含在任何一个候选码中的属性被称作主属性，而其他属性被称作非主属性。</p></li><li><p><strong>外码/外键</strong>(Foreign Key)：关系R中的一个属性组，它不是R的候选码，但它与另外一个关系S的候选码相对应。primary key of one table that has been placed into another table to  create a common attribute </p></li></ul><h2 id="11-关系数据库"><a href="#11-关系数据库" class="headerlink" title="11.关系数据库"></a>11.关系数据库</h2><p>关系数据库是由表(Table)的集合构成，每个表有唯一的名字。</p><p>一般来说，表中一行代表了一组值之间的联系。</p><p>元组，只是一组值的序列(或列表)。在n个值之间的一种联系可以在数学上用关于这些值的一个n元组(n-tuple)来表示，换言之，n元组就是一个有n个值的元组，它对应表中的一行。</p><p>在关系模型的术语中，<strong>关系</strong>用来指代表，二<strong>元组</strong>用来指代行，类似的，<strong>属性</strong>指代表中的列。</p><p>对于关系的每个属性，都存在一个允许取值的集合，成为该属性的**域(domain)**。</p><h2 id="12-实体关系图-ERD"><a href="#12-实体关系图-ERD" class="headerlink" title="12.实体关系图(ERD)"></a>12.实体关系图(ERD)</h2><p>更多相关视频，请点击：</p><p><a href="https://www.bilibili.com/video/BV1HC4y1W7w8?p=1">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(六)</title>
      <link href="2020/10/18/mysql-liu/"/>
      <url>2020/10/18/mysql-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ul><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>变量由系统提供，不是用户自定义，属于<strong>服务器层面</strong>。</p><p>使用语法：</p><ol><li><p>查看所有的系统变量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*全局变量*/</span><span class="token keyword">show</span> <span class="token keyword">session</span> variables<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*会话变量，session可不写*/</span></code></pre></li><li><p>查看满足条件的部分系统变量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables <span class="token operator">like</span> <span class="token string">'%char%'</span><span class="token punctuation">;</span></code></pre></li><li><p>查看指定的某个系统变量的值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@global.</span>系统变量名<span class="token punctuation">;</span></code></pre></li><li><p>为某个系统变量赋值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> 系统变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*方法一*/</span><span class="token keyword">set</span> @<span class="token variable">@global.</span>系统变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*方法二*/</span></code></pre></li></ol><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>作用域：服务器每次启动将为所有的全局变量<strong>附初始值</strong>。针对所有的<strong>会话（连接）</strong>有效，但是不能跨重启。</p><ol><li><p>查看所有的全局变量</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">global</span> variables<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*全局变量*/</span></code></pre></li><li><p>查看部分全局变量</p></li><li><p>查看指定的某个全局变量的值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@global.autocommit</span><span class="token punctuation">;</span><span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span></code></pre></li><li><p>为某个全局变量赋值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> @<span class="token variable">@global.autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*取消自动提交*/</span></code></pre></li></ol><h4 id="会话变量"><a href="#会话变量" class="headerlink" title="会话变量"></a>会话变量</h4><p>作用域：针对当前会话（连接）有效。</p><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>变量是用户自己定义的。</p><p>使用步骤：</p><ol><li>声明</li><li>赋值</li><li>使用（查看，比较，运算等）</li></ol><h4 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h4><p>作用域：针对于当前会话（连接）有效，同于会话变量的作用域。</p><p>应用：任何地方，也就是begin，end里面或外面。</p><ol><li><p>声明并初始化</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">set</span> @用户变量名 : 值<span class="token punctuation">;</span><span class="token keyword">select</span> @用户变量名 : 值<span class="token punctuation">;</span></code></pre></li><li><p>赋值（更新）</p><p>方式一：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">set</span> @用户变量名 : 值<span class="token punctuation">;</span><span class="token keyword">select</span> @用户变量名 : 值<span class="token punctuation">;</span></code></pre><p>方式二：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 字段 <span class="token keyword">into</span> 变量名 <span class="token keyword">from</span> 表<span class="token punctuation">;</span></code></pre></li><li><p>查看某个用户变量的值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @用户变量名<span class="token punctuation">;</span></code></pre></li></ol><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>作用域：仅仅在定义的begin，end中有效。</p><p>应用：begin，end里面<strong>第一句话</strong>。</p><ol><li><p>声明</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> 变量名 类型<span class="token punctuation">;</span><span class="token keyword">declare</span> 变量名 类型 <span class="token keyword">default</span> 值<span class="token punctuation">;</span></code></pre></li><li><p>赋值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">set</span> @局部变量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">set</span> @局部变量名 : 值<span class="token punctuation">;</span><span class="token keyword">select</span> @局部变量名 : 值<span class="token punctuation">;</span><span class="token keyword">select</span> 字段 <span class="token keyword">into</span> 局部变量名 <span class="token keyword">from</span> 表<span class="token punctuation">;</span></code></pre></li><li><p>使用</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> @局部变量名<span class="token punctuation">;</span></code></pre></li></ol><h2 id="存储过程-procedure-和函数"><a href="#存储过程-procedure-和函数" class="headerlink" title="存储过程 procedure 和函数"></a>存储过程 procedure 和函数</h2><p>类似于java中的方法。</p><h3 id="存储过程-procedure"><a href="#存储过程-procedure" class="headerlink" title="存储过程 procedure"></a>存储过程 procedure</h3><p>含义：一组预先编译好的SQL语句的<strong>集合</strong>，理解成批处理语句。</p><p>优点：</p><ul><li>提高代码的重用性</li><li>简化操作</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率。</li></ul><ol><li><p>创建语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token keyword">begin</span>    存储过程体（一组合法的SQL语句）<span class="token keyword">end</span></code></pre><p><strong>注意</strong>：参数列表包括三部分：参数模式，参数名，参数类型。</p><p>例：</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">in</span> stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><p>参数模式：<strong>in</strong> (作为输入，需要调用方法传入值)，<strong>out</strong> (作为输出，作为返回值)，<strong>inout</strong> (作为输入和输出)</p><p>如果存储过程体只有一句话，那么begin，end可省略。</p><p>存储过程的结尾可以使用<strong>delimiter</strong>重新设置。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delimiter</span> $ <span class="token comment" spellcheck="true">/*$ 为结束标记，其他也可*/</span></code></pre></li><li><p>调用语法</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> 存储过程名<span class="token punctuation">(</span>实参列表<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>案例演示一：</p><p><img src="/2020/10/18/mysql-liu/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B01.png" alt="存储过程01"></p><p><img src="/2020/10/18/mysql-liu/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B02.png" alt="存储过程02"></p><p>结果：</p><p><img src="/2020/10/18/mysql-liu/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B03.png" alt="存储过程03"></p><p>案例演示二：创建带in模式的存储过程</p><p>案例1：创建存储过程实现，根据女神名，查询对应的男神信息</p><p>案例2：创建存储过程实现，用户是否登录</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>与存储过程的区别：</p><ul><li>存储过程：可以有0个返回，也可以有多个返回，适合做批量插入，批量更新。</li><li>有且仅有一个返回，适合做处理数据后返回一个结果。</li></ul><ol><li><p>创建语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">returns</span> 返回类型<span class="token keyword">begin</span>    函数体<span class="token keyword">end</span></code></pre><p><strong>注意</strong>：</p><ul><li><p>参数列表包括两部分：参数名，参数类型。</p></li><li><p>函数体：必须有return语句，否则报错。最好return语句放在最后。</p></li><li><p>函数体中只有一句话，可以省略begin，end。</p></li><li><p>使用delimiter语句设置结束标记。</p></li></ul></li><li><p>调用语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span></code></pre></li><li><p>查看函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">;</span></code></pre></li><li><p>删除函数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">;</span></code></pre></li></ol><p>案例演示：</p><ol><li><p>无参有返回</p><p><img src="/2020/10/18/mysql-liu/%E5%87%BD%E6%95%B001.png" alt="函数01"></p></li><li><p>有参有返回</p><p><img src="/2020/10/18/mysql-liu/%E5%87%BD%E6%95%B002.png" alt="函数02"></p></li></ol><h2 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h2><ul><li>顺序结构</li><li>分支结构</li><li>循环结构</li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h4><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式<span class="token number">1</span><span class="token punctuation">,</span> 表达式<span class="token number">2</span><span class="token punctuation">,</span> 表达式<span class="token number">3</span><span class="token punctuation">)</span></code></pre><h4 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h4><ol><li><p>类似于java中的switch结构，一般用于实现的等值判断</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 返回值<span class="token number">1</span><span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 返回值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 要返回的值n<span class="token keyword">end</span><span class="token comment" spellcheck="true">/*单独执行，放在存储过程和函数中*/</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">else</span> 语句n<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span></code></pre></li><li><p>类似java中的多重if语句，一般用于实现区间判断</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">where</span> 要判断的条件 <span class="token keyword">then</span> 返回值<span class="token number">1</span><span class="token keyword">where</span> 要判断的条件 <span class="token keyword">then</span> 返回值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 要返回的值n<span class="token keyword">end</span><span class="token comment" spellcheck="true">/*单独执行，放在存储过程和函数中*/</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">where</span> 要判断的值 <span class="token keyword">then</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">else</span> 语句n<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>                     </code></pre><p>特点：可以作为表达式，嵌套在其他语句当中使用，可以放在任何地方；可以作为独立语句，只能放在begin，end中。</p></li></ol><p>案例：</p><p><img src="/2020/10/18/mysql-liu/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B601.png" alt="流程控制01"></p><h4 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h4><p>应用在begin，end中。</p><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span><span class="token punctuation">;</span>elseif 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span> 语句n<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p><img src="/2020/10/18/mysql-liu/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B602.png" alt="流程控制02"></p><p><img src="/2020/10/18/mysql-liu/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B603.png" alt="流程控制03"></p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>分类：</p><ul><li>while</li><li>loop</li><li>repeat</li></ul><p>循环控制：</p><ul><li>iterate，类似于continue</li><li>leave，类似于break</li></ul><p>语法：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/*标签:*/</span> <span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>    循环体<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token comment" spellcheck="true">/*标签*/</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*标签:*/</span> loop    循环体<span class="token punctuation">;</span><span class="token keyword">end</span> loop <span class="token comment" spellcheck="true">/*标签*/</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*模拟简单的死循环*/</span> <span class="token comment" spellcheck="true">/*标签:*/</span> repeat    循环体<span class="token punctuation">;</span>until 结束循环的条件<span class="token keyword">end</span> repeat <span class="token comment" spellcheck="true">/*标签*/</span><span class="token punctuation">;</span> </code></pre><p>案例：</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(五)</title>
      <link href="2020/10/18/mysql-wu/"/>
      <url>2020/10/18/mysql-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h2><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><p>索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。</p><p>在数据库方面，查询一张表的时候有两种检索方式：</p><ul><li>全表扫描</li><li>根据索引检索，效率很高(最根本的原理是缩小了扫描的范围)</li></ul><p>索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。</p><p>比如，表中的数据经常被修改，这样就不适合添加索引，因为数据一旦修改，索引需要<strong>重新排序(主要）</strong>，进行维护。</p><p>例如：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span></code></pre><p>当ename字段上没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。</p><p>当ename字段上添加索引的时候，以上sql语句会根据索引扫描，快速定位。</p><h3 id="何时添加索引-条件"><a href="#何时添加索引-条件" class="headerlink" title="何时添加索引(条件)"></a>何时添加索引(条件)</h3><ul><li>数据量庞大（根据客户的需求，根据线上的环境）</li><li>该字段很少的DML操作（因为字段进行修改操作，索引也需要维护）</li><li>该字段经常出现在where子句中（经常根据哪个字段查询）</li></ul><p><strong>注意</strong>：<strong>主键</strong>和<strong>具有unique约束</strong>的字段自动会添加索引。因此，根据主键查询效率较高，尽量根据主键检索。</p><h3 id="SQL语句的执行计划"><a href="#SQL语句的执行计划" class="headerlink" title="SQL语句的执行计划"></a>SQL语句的执行计划</h3><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span></code></pre><blockquote><p>+—-+———–+——-+——+————-+——+———+——+——+———–+<br>|id |select_type |table |<strong>type</strong>| possible_keys |key  |key_len |ref  |<strong>rows</strong>|Extra |<br>+—-+———–+——-+——+————-+——+———+——+——+———–+<br>|1 | SIMPLE | emp  |<strong>ALL</strong>| NULL| NULL | NULL| NULL |<strong>14</strong>| Using where |<br>+—-+———–+——-+——+————-+——+———+——+——+———–+</p></blockquote><p>给薪资sal字段添加索引：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> emp_sal_index <span class="token keyword">on</span> emp<span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>+—-+———–+——-+——+————-+————-+———+——-+——+———–+<br>|id |select_type|table|<strong>type</strong>| possible_keys| key| key_len| ref |<strong>rows</strong>| Extra|<br>+—-+———–+——-+——+————-+————-+———+——-+——+———–+<br>|1 |SIMPLE |emp |<strong>ref</strong>|emp_sal_index |emp_sal_index | 9| const |<strong>1</strong>|Using where|<br>+—-+———–+——-+——+————-+————-+———+——-+——+———–+</p></blockquote><h3 id="索引底层原理"><a href="#索引底层原理" class="headerlink" title="索引底层原理"></a>索引底层原理</h3><p><strong>索引底层采用的数据结构是：B + Tree</strong></p><p><img src="/2020/10/18/mysql-wu/%E7%B4%A2%E5%BC%9501.png"></p><p>通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的。</p><blockquote><p>select ename from emp where ename = ‘SMITH’;<br>通过索引转换为：<br>select ename from emp where 物理地址 = 0x3;</p></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><ul><li>单一索引：给单个字段添加索引</li><li>复合索引: 给多个字段联合起来添加1个索引</li><li>主键索引：主键上会自动添加索引</li><li>唯一索引：有unique约束的字段上会自动添加索引</li><li>……</li></ul><h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%A%'</span><span class="token punctuation">;</span></code></pre><p>模糊查询的时候，第一个通配符使用的是%，这个时候索引是失效的。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p>索引详解，请参考：<a href="https://www.cnblogs.com/pcyy/p/9592721.html">最全面的MySQL索引详解</a></p><h2 id="视图-view"><a href="#视图-view" class="headerlink" title="视图(view)"></a>视图(view)</h2><h3 id="什么是视图"><a href="#什么是视图" class="headerlink" title="什么是视图"></a>什么是视图</h3><p>虚拟的表，和普通表一样使用，只是站在不同的角度去看到数据。（同一张表的数据，通过不同的角度去看待）</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>多个地方用到同样地查询结果</li><li>该查询结果使用的SQL语句较复杂</li></ul><h3 id="怎么创建-删除视图"><a href="#怎么创建-删除视图" class="headerlink" title="怎么创建 / 删除视图"></a>怎么创建 / 删除视图</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> myview <span class="token keyword">as</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> myview<span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：只有DQL语句才能以视图对象的方式创建出来。</p><h3 id="面向视图操作"><a href="#面向视图操作" class="headerlink" title="面向视图操作"></a>面向视图操作</h3><p>对视图进行增删改查，会<strong>影响</strong>到原表数据。（通过视图影响原表数据的，不是直接操作的原表），可以对视图进行CRUD操作。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> myview<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7369 | SMITH  |<br>|  7499 | ALLEN  |<br>|  7521 | WARD   |<br>|  7566 | JONES  |<br>|  7654 | MARTIN |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7844 | TURNER |<br>|  7876 | ADAMS  |<br>|  7900 | JAMES  |<br>|  7902 | FORD   |<br>|  7934 | MILLER |<br>+——-+——–+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp_bak <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">view</span> myview1 <span class="token keyword">as</span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp_bak<span class="token punctuation">;</span><span class="token keyword">update</span> myview1 <span class="token keyword">set</span> ename<span class="token operator">=</span><span class="token string">'hehe'</span><span class="token punctuation">,</span>sal<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*通过视图修改原表数据*/</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> myview1 <span class="token keyword">where</span> empno <span class="token operator">=</span> <span class="token number">7369</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*通过视图删除原表数据*/</span>  </code></pre><h3 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h3><p>视图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对视图对象进行CRUD。</p><h2 id="数据库三范式-重点，面试常问"><a href="#数据库三范式-重点，面试常问" class="headerlink" title="数据库三范式(重点，面试常问)"></a>数据库三范式(重点，面试常问)</h2><h3 id="什么是设计范式"><a href="#什么是设计范式" class="headerlink" title="什么是设计范式"></a>什么是设计范式</h3><p>设计表的依据。按照这个三范式设计的表不会出现数据冗余。</p><blockquote><p> <strong>规范化</strong></p><p> 一个低一级的关系模式通过模式分解可以转化为若干个高一级范式的关系模式的集合，这个过程叫做规范化。</p></blockquote><h3 id="三范式有哪些"><a href="#三范式有哪些" class="headerlink" title="三范式有哪些"></a>三范式有哪些</h3><ul><li>第一范式( 最低要求 )</li><li>第二范式</li><li>第三范式</li></ul><h3 id="第一范式-1NF"><a href="#第一范式-1NF" class="headerlink" title="第一范式(1NF)"></a>第一范式(1NF)</h3><p>任何一张表都应该有<strong>主键</strong>，并且每一个字段<strong>原子性</strong>不可再分。</p><blockquote><p><strong>上述句子，强调的是列的原子性</strong>，即列不能够在分成其它几列。</p><p>说明：在任何一个关系数据库中，第一范式（1NF）是对关系模式的设计基本要求，一般设计中都必须满足第一范式（1NF）。不过有些关系模型中突破了1NF的限制，这种称为非1NF的关系模型。换句话说，是否必须满足1NF的最低要求，主要依赖于所使用的关系模型。</p></blockquote><p>示例1：(以下不符合第一范式)</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系方式</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td><a href="mailto:&#122;&#x73;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#122;&#x73;&#64;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a>，1371234567</td></tr><tr><td>1002</td><td>李四</td><td><a href="mailto:&#x6c;&#115;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x6c;&#115;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>，1381234567</td></tr><tr><td>1003</td><td>王五</td><td><a href="mailto:&#x77;&#119;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;">&#x77;&#119;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;</a>，1391234567</td></tr></tbody></table><p>出现的问题：</p><ul><li>没有主键</li><li>联系方式还可以拆成两个字段</li></ul><p>修改后：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>email</th><th>phone</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td><a href="mailto:&#x7a;&#x73;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#x7a;&#x73;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a></td><td>1371234567</td></tr><tr><td>1002</td><td>李四</td><td><a href="mailto:&#x6c;&#x73;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#x73;&#x40;&#x71;&#113;&#46;&#99;&#x6f;&#x6d;</a></td><td>1381234567</td></tr><tr><td>1003</td><td>王五</td><td><a href="mailto:&#x77;&#119;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#x77;&#119;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a></td><td>1391234567</td></tr></tbody></table><blockquote><p><strong>关于第一范式，每一行必须是唯一的，也就是每个表必须有主键，这是我们数据库设计的最基本的要求</strong>，主要通常采用<strong>数值型或定长字符串</strong>表示。关于<strong>列不可再分</strong>，应该根据具体的情况来决定，如联系方式，为了开发上的便利，行可能就采用一个字段。</p></blockquote><h3 id="第二范式-2NF"><a href="#第二范式-2NF" class="headerlink" title="第二范式(2NF)"></a>第二范式(2NF)</h3><blockquote><p><strong>定义</strong>： 若某关系R属于第一范式，且每一个非主属性<strong>完全函数依赖于</strong>任何一个候选码，则关系R属于第二范式。 </p></blockquote><p><strong>首先</strong>是1NF，即建立在第一范式的基础之上，<strong>其次</strong>，表必须有一个主键，<strong>最后</strong>，所有<strong>非主键字段</strong>必须完全依赖主键，不能产生<strong>部分依赖</strong>(即不能只依赖于主键的一部分)。</p><blockquote><p><strong>候选码</strong><br>若关系中的某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为候选码。若一个关系中有多个候选码，则选定其中一个为主码。</p><p><strong>主属性</strong><br>所有候选码的属性称为主属性。不包含在任何候选码中的属性称为非主属性或非码属性。 </p><p><strong>函数依赖</strong><br>设R(U)是属性集U上的关系模式，X、Y是U的子集。若对于R(U)的任意一个可能的关系r，r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不等，则称Y函数依赖于X或X函数确定Y。 </p><p><strong>完全函数依赖</strong><br>设R(U)是属性集U上的关系模式，X、Y是U的子集。如果Y函数依赖于X，且对于X的任何一个真子集X’，都有Y不函数依赖于X’，则称Y对X完全函数依赖。记作：如果Y函数依赖于X，但Y不完全函数依赖于X，则称Y对X部分函数依赖。 </p></blockquote><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F03.png"></p><blockquote><p><strong>理解</strong>： 第二范式是指每个表必须有一个（有且仅有一个）数据项作为关键字或主键（primary key），其他数据项与关键字或者主键一一对应，即其他数据项完全依赖于关键字或主键。由此可知单主属性的关系均属于第二范式。 </p><p><strong>判断一个关系是否属于第二范式</strong>： </p><ul><li>找出数据表中的所有码 </li><li>找出所有主属性和非主属性 </li><li>判断所有的非主属性对码的部分函数依赖 </li></ul></blockquote><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F04.png"></p><p>示例2：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>教师编号</th><th>教师姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>001</td><td>王老师</td></tr><tr><td>1002</td><td>李四</td><td>002</td><td>赵老师</td></tr><tr><td>1003</td><td>王五</td><td>001</td><td>王老师</td></tr><tr><td>1001</td><td>张三</td><td>002</td><td>赵老师</td></tr></tbody></table><p>出现的问题：</p><ul><li>没有主键，不符合第一范式</li></ul><p>示例3：</p><table><thead><tr><th>学生编号(PK)</th><th>学生姓名</th><th>教师编号(PK)</th><th>教师姓名</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>001</td><td>王老师</td></tr><tr><td>1002</td><td>李四</td><td>002</td><td>赵老师</td></tr><tr><td>1003</td><td>王五</td><td>001</td><td>王老师</td></tr><tr><td>1001</td><td>张三</td><td>002</td><td>赵老师</td></tr></tbody></table><p>出现的问题：</p><ul><li>示例3虽确定了主键，但此表会表现出大量的冗余，主要涉及到的冗余字段为“学生姓名”和“教师姓名”，出现冗余的原因在于，学生姓名<strong>部分依赖于</strong>主键的一个字段：学生编号，而没有依赖教师编号，而教师姓名<strong>部分依赖</strong>主键的一个字段：教师编号，这就是第二范式所说的部分依赖。</li></ul><p><strong>解决办法</strong>：</p><p><strong>多对多，三张表，关系表两个外键</strong>。</p><p>示例4：</p><p>t_stu 学生表：</p><table><thead><tr><th>stu_no</th><th>stu_name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr></tbody></table><p>t_tea 教师表：</p><table><thead><tr><th>tea_no</th><th>tea_name</th></tr></thead><tbody><tr><td>1</td><td>王老师</td></tr><tr><td>2</td><td>张老师</td></tr><tr><td>3</td><td>李老师</td></tr></tbody></table><p>t_stu_tea 学生教师关系表：</p><table><thead><tr><th>id(PK)</th><th>stu_no(FK)</th><th>tea_no(FK)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>3</td><td>2</td><td>2</td></tr><tr><td>4</td><td>2</td><td>3</td></tr><tr><td>5</td><td>3</td><td>1</td></tr><tr><td>6</td><td>3</td><td>3</td></tr></tbody></table><p>示例5(示例3修改)：</p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%E7%A4%BA%E4%BE%8B01.png"></p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%E7%A4%BA%E4%BE%8B02.png"></p><blockquote><p>说明： 第二范式（2NF）要求实体的属性完全依赖于主键。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主键的这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的唯一标识。简而言之，第二范式就是在第一范式的基础上属性完全依赖于主键。 </p></blockquote><h3 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h3><p>建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生<strong>传递依赖</strong>。</p><p><strong>传递函数依赖</strong></p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F04.png"></p><blockquote><p>第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。 </p><p>首先是 2NF，另外非主键列必须<strong>直接依赖</strong>于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。  </p></blockquote><p>示例6：</p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F01.png"></p><p>从上表可以看出，班级名称字段存在冗余，因为班级名称字段没有直接依赖于主键，班级名称字段依赖于班级编号，班级编号依赖于学生编号，那么这就是传递依赖。</p><p>示例7(示例6修改)： 将冗余字段单独拿出来建立表  </p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F02.png"></p><p><img src="/2020/10/18/mysql-wu/%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F03.png"></p><p><strong>以上设计是一种典型的一对多的设计，一存储在一张表中，多存储在一张表中，在多的那张表中添加外键指向一的一方的主键</strong></p><p><strong>一对多，两张表，多的表加外键</strong>。</p><p>示例8：</p><p>t_class 班级表：</p><table><thead><tr><th>cla_no(PK)</th><th>cla_name</th></tr></thead><tbody><tr><td>1</td><td>班级1</td></tr><tr><td>2</td><td>班级2</td></tr></tbody></table><p>t_stu 学生表：</p><table><thead><tr><th>stu_no(PK)</th><th>stu_name</th><th>cla_no(FK)</th></tr></thead><tbody><tr><td>101</td><td>张1</td><td>1</td></tr><tr><td>102</td><td>张2</td><td>1</td></tr><tr><td>103</td><td>张3</td><td>2</td></tr><tr><td>104</td><td>张4</td><td>2</td></tr><tr><td>105</td><td>张5</td><td>2</td></tr></tbody></table><h3 id="三范式总结"><a href="#三范式总结" class="headerlink" title="三范式总结"></a>三范式总结</h3><ul><li>第一范式：有主键，具有原子性，字段不可分割</li><li>第二范式：完全依赖，没有部分依赖</li><li>第三范式：没有传递依赖</li></ul><p>数据库设计尽量遵循三范式，但是还是根据实际情况进行取舍，有时可能会拿冗余换速度，最终用目的要满足客户需求。</p><p>三范式更多详情，请点击：<a href="https://blog.csdn.net/Dream_angel_Z/article/details/45175621">数据库(第一范式，第二范式，第三范式)</a></p><h3 id="其他范式"><a href="#其他范式" class="headerlink" title="其他范式"></a>其他范式</h3><p>目前，关系数据库有六种范式，除了上述的三种范式，还有： 巴斯-科德范式(BCNF) 、  第四范式(4NF)和第五范式(5NF，又称完美范式)。</p><p><img src="/2020/10/18/mysql-wu/%E5%85%B6%E4%BB%96%E8%8C%83%E5%BC%8F01.png"></p><h4 id="BC范式-BCFN"><a href="#BC范式-BCFN" class="headerlink" title="BC范式 BCFN"></a>BC范式 BCFN</h4><p><strong>定义</strong>： 关系模式R&lt;U,F&gt;中，若每一个决定因素都包含码，则R&lt;U,F&gt;属于BCFN。 </p><p><strong>理解</strong>： 根据定义我们可以得到结论，一个满足BC范式的关系模式有： </p><ul><li>所有非主属性对每一个码都是完全函数依赖 </li><li>所有主属性对每一个不包含它的码也是完全函数依赖 </li><li>没有任何属性完全函数依赖于非码的任何一组属性 </li></ul><p>例如有关系模式C(Cno, Cname, Pcno)，Cno, Cname, Pcno依次表示课程号、课程名、先修课。可知关系C只有一个码Cno，且没有任何属性对Cno部分函数依赖或传递函数依赖，所以关系C属于第三范式，同时Cno是C中的唯一决定因素，所以C也属于BC范式。 </p><h4 id="第四范式-4NF"><a href="#第四范式-4NF" class="headerlink" title="第四范式(4NF)"></a>第四范式(4NF)</h4><p> <strong>定义：</strong> 限制关系模式的属性之间不允许有非平凡且非函数依赖的多值依赖。 </p><p> <strong>理解：</strong> 显然一个关系模式是4NF，则必为BCNF。也就是说，当一个表中的非主属性互相独立时（3NF），这些非主属性不应该有多值，若有多值就违反了4NF。 </p><h4 id="第五范式-5NF"><a href="#第五范式-5NF" class="headerlink" title="第五范式(5NF)"></a>第五范式(5NF)</h4><p> 第五范式有以下要求： </p><ul><li>必须满足第四范式 </li><li>表必须可以分解为较小的表，除非那些表在逻辑上拥有与原始表相同的主键 </li></ul><p>第五范式是在第四范式的基础上做的进一步规范化。第四范式处理的是相互独立的多值情况，而第五范式则处理相互依赖的多值情况 。</p><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><p>更多参考文章，请点击：<a href="https://blog.csdn.net/weixin_43433032/article/details/89293663">数据库之六大范式详解1</a></p><p><a href="https://blog.csdn.net/m0_46493091/article/details/105559782">数据库之六大范式详解2</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(四)</title>
      <link href="2020/10/18/mysql-si/"/>
      <url>2020/10/18/mysql-si/</url>
      
        <content type="html"><![CDATA[<h2 id="1-约束-Constraint"><a href="#1-约束-Constraint" class="headerlink" title="1.约束(Constraint)"></a>1.约束(Constraint)</h2><p>参考文章：<a href="https://blog.csdn.net/w_linux/article/details/79655073">MySQL——约束(constraint)详解</a></p><h3 id="1-1-定义及分类"><a href="#1-1-定义及分类" class="headerlink" title="1-1.定义及分类"></a>1-1.定义及分类</h3><p>在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>常见的约束：</p><ul><li>非空约束(not null)：约束的字段不能为NULL</li><li>唯一约束(unique)：约束的字段不能重复</li><li>主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）</li><li>外键约束(foreign key)：…（简称FK）</li><li>检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</li><li>default：默认值。</li></ul><p>添加约束的时机：</p><ul><li>创建表时</li><li>修改表时</li></ul><p>约束的添加分类：</p><ul><li><p>列级约束</p><p>六大约束语法上都支持，但是，外键约束没有效果</p></li><li><p>表级约束</p><p>除了非空，默认，其他的都支持</p></li></ul><h3 id="1-2-非空约束-not-null"><a href="#1-2-非空约束-not-null" class="headerlink" title="1-2.非空约束 not null"></a>1-2.非空约束 not null</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    password <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1364 (HY000): Field ‘username’ doesn’t have a default value</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-3-唯一性约束-unique"><a href="#1-3-唯一性约束-unique" class="headerlink" title="1-3.唯一性约束 unique"></a>1-3.唯一性约束 unique</h3><p>唯一性约束修饰的字段具有唯一性，不能重复，但是，可以为NULL。</p><p>案例：给某一列添加unique。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">unique</span>  <span class="token comment" spellcheck="true">/*列级约束*/</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1062 (23000): Duplicate entry ‘zhangsan’ for key ‘username’</p></blockquote><p>案例：给两个列或者多个列添加unique</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>     usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span><span class="token punctuation">(</span>usercode<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/*多个字段联合起来添加1个约束unique，即表级约束*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'222'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'111'</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1062 (23000): Duplicate entry ‘111-zs’ for key ‘usercode’</p></blockquote><p><strong>注意</strong>：not null约束只有列级约束。没有表级约束。</p><p><strong>表级约束</strong>：</p><p><img src="/2020/10/18/mysql-si/%E7%BA%A6%E6%9D%9F01.png" alt="约束01"></p><h3 id="1-4-主键约束"><a href="#1-4-主键约束" class="headerlink" title="1-4.主键约束"></a>1-4.主键约束</h3><h4 id="1-4-1-添加主键约束"><a href="#1-4-1-添加主键约束" class="headerlink" title="1-4-1.添加主键约束"></a>1-4-1.添加主键约束</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/*列级约束*/</span>     username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    email <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">/*constraint [键名] primary key(email) 这是完整写法*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token string">'zs@123.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token string">'ls@123.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'ww'</span><span class="token punctuation">,</span><span class="token string">'ww@123.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span></code></pre><blockquote><p>+—-+———-+————+<br>| id | username | email         |<br>+—-+———-+————+<br>|  1 | zs       | <a href="mailto:&#122;&#x73;&#x40;&#49;&#x32;&#x33;&#x2e;&#x63;&#111;&#109;">&#122;&#x73;&#x40;&#49;&#x32;&#x33;&#x2e;&#x63;&#111;&#109;</a>   |<br>|  2 | ls        | <a href="mailto:&#x6c;&#115;&#64;&#49;&#50;&#x33;&#46;&#x63;&#111;&#109;">&#x6c;&#115;&#64;&#49;&#50;&#x33;&#46;&#x63;&#111;&#109;</a>    |<br>|  3 | ww      | <a href="mailto:&#x77;&#119;&#x40;&#49;&#x32;&#x33;&#46;&#x63;&#x6f;&#109;">&#x77;&#119;&#x40;&#49;&#x32;&#x33;&#46;&#x63;&#x6f;&#109;</a> |<br>+—-+———-+————+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'jack@123.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1062 (23000): Duplicate entry ‘1’ for key ‘PRIMARY’</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span>email<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'jack@123.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1364 (HY000): Field ‘id’ doesn’t have a default value</p></blockquote><p>根据以上的测试得出：id是主键，因为添加了主键约束，主键字段中的数据不能为NULL，也不能重复。</p><p>主键的特点：不能为NULL，也不能重复。</p><h4 id="1-4-2-主键相关的术语"><a href="#1-4-2-主键相关的术语" class="headerlink" title="1-4-2.主键相关的术语"></a>1-4-2.主键相关的术语</h4><ul><li>主键约束 : primary key</li><li>主键字段 : id字段添加primary key之后，id叫做主键字段</li><li>主键值 : id字段中的每一个值都是主键值</li></ul><h4 id="1-4-3-主键作用"><a href="#1-4-3-主键作用" class="headerlink" title="1-4-3.主键作用"></a>1-4-3.主键作用</h4><ul><li>表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键</li><li>主键的作用：主键值是这行记录在这张表当中的唯一标识（就像一个人的身份证号码一样）</li></ul><h4 id="1-4-4-主键的分类"><a href="#1-4-4-主键的分类" class="headerlink" title="1-4-4.主键的分类"></a>1-4-4.主键的分类</h4><ul><li><p>根据主键字段的字段数量</p><ul><li>单一主键（推荐的，常用的）</li><li>复合主键(多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式）</li></ul></li><li><p>根据主键性质</p><ul><li><p>自然主键：主键值最好就是一个和业务没有任何关系的自然数（这种方式是推荐的）</p></li><li><p>业务主键：主键值和系统的业务挂钩。例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键（不推荐用）</p><p>最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要 随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。</p></li></ul></li></ul><p><strong>注意</strong>：一张表的主键约束只能有1个</p><h4 id="1-4-5-定义主键-使用表级约束方式"><a href="#1-4-5-定义主键-使用表级约束方式" class="headerlink" title="1-4-5.定义主键(使用表级约束方式)"></a>1-4-5.定义主键(使用表级约束方式)</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'cs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>id<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'cx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>ERROR 1062 (23000): Duplicate entry ‘4’ for key ‘PRIMARY’</p></blockquote><p>MySQL提供<strong>主键值自增</strong>(非常重要)</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">/*id字段自动维护一个自增的数字，从1开始，以1递增*/</span>     username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>提示</strong>：Oracle当中也提供了一个自增机制，叫做：序列（sequence）对象。</p><h3 id="1-5-外键约束"><a href="#1-5-外键约束" class="headerlink" title="1-5.外键约束"></a>1-5.外键约束</h3><p>外键约束支持列级约束，但是没有效果。</p><h4 id="1-5-1-相关术语"><a href="#1-5-1-相关术语" class="headerlink" title="1-5-1.相关术语"></a>1-5-1.相关术语</h4><ul><li>外键约束：foreign key</li><li>外键字段：添加有外键约束的字段</li><li>外键字段：添加有外键约束的字段</li></ul><p>要求在从表设置外键关系，从表的外键列的类型和主表的关联列的类型要求是<strong>一致</strong>或<strong>兼容</strong>的，主表的关联列必须是一个key（一般是主键或唯一）。</p><h4 id="1-5-2-业务背景"><a href="#1-5-2-业务背景" class="headerlink" title="1-5-2.业务背景"></a>1-5-2.业务背景</h4><p>案例：请设计数据库表，用来维护学生和班级的信息</p><p>方案一：一张表存储所有数据</p><table><thead><tr><th>no(pk)</th><th>name</th><th>classno</th><th>classname</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>12</td><td>二中高三1班</td></tr><tr><td>2</td><td>ls</td><td>12</td><td>二中高三1班</td></tr><tr><td>3</td><td>ww</td><td>13</td><td>二中高三2班</td></tr><tr><td>4</td><td>ll</td><td>13</td><td>二中高三2班</td></tr></tbody></table><p><strong>缺点</strong>：数据冗余</p><p>方案二：两张表（班级表和学生表）</p><p>t_class 班级表</p><table><thead><tr><th>cno(pk)</th><th>cname</th></tr></thead><tbody><tr><td>12</td><td>二中高三1班</td></tr><tr><td>13</td><td>二中高三2班</td></tr></tbody></table><p>t_student 学生表</p><table><thead><tr><th>sno(pk)</th><th>sname</th><th>classno(该字段添加外键约束fk)</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>12</td></tr><tr><td>2</td><td>ls</td><td>12</td></tr><tr><td>3</td><td>ww</td><td>13</td></tr><tr><td>4</td><td>ll</td><td>13</td></tr></tbody></table><p>将方案二的语句写出来：</p><p>t_student中的classno字段引用t_class表中的cno字段，此时t_student表叫做子表。t_class表叫做父表。</p><p>顺序要求：</p><ul><li>删除数据的时候，先删除子表，再删除父表</li><li>添加数据的时候，先添加父表，在添加子表</li><li>创建表的时候，先创建父表，再创建子表</li><li>删除表的时候，先删除子表，在删除父表</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_student<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_class<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_class<span class="token punctuation">(</span>    cno <span class="token keyword">int</span><span class="token punctuation">,</span>    cname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_student<span class="token punctuation">(</span>    sno <span class="token keyword">int</span><span class="token punctuation">,</span>    sname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    classno <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>sno<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classno<span class="token punctuation">)</span> <span class="token keyword">references</span> t_class<span class="token punctuation">(</span>cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_class <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'二中高三1班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_class <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'二中高三2班'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zs'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'ls'</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>外键值可以为NULL。</p><p><strong>问题</strong>：外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？</p><p><strong>答</strong>：被引用的字段不一定是主键，但至少具有unique约束。</p><h3 id="check约束"><a href="#check约束" class="headerlink" title="check约束"></a>check约束</h3><pre class=" language-sql"><code class="language-sql">gender char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">check</span><span class="token punctuation">(</span>gender <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span></code></pre><p>查看 [表名] 里所有的索引，包括<strong>主键</strong>，<strong>外键</strong>，<strong>唯一</strong>。</p><h3 id="修改表时添加约束"><a href="#修改表时添加约束" class="headerlink" title="修改表时添加约束"></a>修改表时添加约束</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 列级约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">modify</span> <span class="token keyword">column</span> <span class="token punctuation">[</span>列名<span class="token punctuation">]</span> 数据类型 <span class="token keyword">default</span> 值<span class="token operator">/</span><span class="token operator">not</span> <span class="token boolean">null</span><span class="token operator">/</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token comment" spellcheck="true">-- 表级约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">add</span> 约束类型<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span></code></pre><h2 id="2-事务-Transaction"><a href="#2-事务-Transaction" class="headerlink" title="2.事务(Transaction)"></a>2.事务(Transaction)</h2><h3 id="2-1-什么是事务"><a href="#2-1-什么是事务" class="headerlink" title="2-1.什么是事务"></a>2-1.什么是事务</h3><p>一个事务是一个<strong>完整</strong>的<strong>业务逻辑单元</strong>，不可再分。</p><blockquote><p>比如：银行账户转账，从A账户向B账户转账10000.需要执行两条update语句：<br>update t_act set balance = balance - 10000 where actno = ‘act-001’;<br>update t_act set balance = balance + 10000 where actno = ‘act-002’;</p></blockquote><p>以上两条DML语句必须<strong>同时成功</strong>，或者<strong>同时失败</strong>，不允许出现一条成功，一条失败。</p><p>要想保证以上的两条DML语句同时成功或者同时失败，那么就需要使用数据库的“事务机制”。</p><p><strong>注意</strong>：和事务相关的语句只有DML语句(insert delete update)，因为它们这三个语句都是和数据库表当中的“数据”相关的。而事务的存在是为了保证<strong>数据</strong>的完整性，安全性。</p><p><strong>问题</strong>：假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？</p><p><strong>答</strong>：不需要事务。但实际情况不是这样的，通常一个“事儿（事务【业务】）”需要多条DML语句共同联合完成。</p><p><img src="/2020/10/18/mysql-si/%E4%BA%8B%E5%8A%A101.png" alt="事务01"></p><p>提交事务：commit；回滚事务：rollback。</p><blockquote><p>事务中，还有 save point 语句，即保存点，相当于游戏里的存档，当执行rollback时，不再重头开始，而是从保存点开始回滚事务。</p></blockquote><h3 id="2-2-事务四大特性ACID"><a href="#2-2-事务四大特性ACID" class="headerlink" title="2-2.事务四大特性ACID"></a>2-2.事务四大特性ACID</h3><ul><li>A：原子性，即事务是最小的工作单元，不可再分。</li><li>C: 一致性，即事务必须保证多条DML语句同时成功或者同时失败。</li><li>I：隔离性，即事务A与事务B之间具有隔离。</li><li>D：持久性，即最终数据必须持久化到硬盘文件中，事务才算成功的结束。</li></ul><h3 id="2-3-事务之间的隔离性"><a href="#2-3-事务之间的隔离性" class="headerlink" title="2-3.事务之间的隔离性"></a>2-3.事务之间的隔离性</h3><p>事务隔离性存在隔离级别，<strong>理论上</strong>隔离级别包括4个：</p><ul><li><p>第一级别：<strong>读未提交</strong>(read uncommitted) </p><p>对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。读未提交存在脏读(Dirty Read)现象，表示读到了脏的数据。</p></li><li><p>第二级别：<strong>读已提交</strong>(read committed)</p><p>对方事务提交之后的数据我方可以读取到。这种隔离级别<strong>解决了脏读现象</strong>。读已提交存在的问题是：不可重复读。</p></li><li><p>第三级别：<strong>可重复读</strong>(repeatable read)</p><p>这种隔离级别<strong>解决了不可重复读问题</strong>。这种隔离级别存在的问题是：读取到的数据是幻象。</p></li><li><p>第四级别：<strong>序列化读/串行化读</strong>(serializable)</p><p>解决了所有问题。但是，效率低，需要事务排队。</p></li></ul><blockquote><p>oracle数据库默认的隔离级别是：读已提交。<br>mysql数据库默认的隔离级别是：可重复读。</p></blockquote><h3 id="2-4-演示事务"><a href="#2-4-演示事务" class="headerlink" title="2-4.演示事务"></a>2-4.演示事务</h3><p>MySQL事务默认情况下是自动提交的。</p><blockquote><p>什么是自动提交？只要执行任意一条DML语句则提交一次。</p></blockquote><p>怎么关闭自动提交？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span></code></pre><h4 id="2-4-1-准备表"><a href="#2-4-1-准备表" class="headerlink" title="2-4-1.准备表"></a>2-4-1.准备表</h4><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_user<span class="token punctuation">;</span>creat <span class="token keyword">table</span> t_use<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="2-4-2-演示一"><a href="#2-4-2-演示一" class="headerlink" title="2-4-2.演示一"></a>2-4-2.演示一</h4><p>MySQL中的事务是支持<strong>自动提交</strong>的，只要执行一条DML，则提交一次。</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>Query OK, 1 row affected (0.03 sec)</p></blockquote><pre class=" language-SQL"><code class="language-SQL">mysql> select * from t_user;</code></pre><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p></blockquote><pre class=" language-SQL"><code class="language-SQL">mysql> rollback; /*回滚事务*/</code></pre><blockquote><p>Query OK, 0 rows affected (0.00 sec)</p></blockquote><pre class=" language-SQL"><code class="language-SQL">mysql> select * from t_user;</code></pre><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p></blockquote><p>上述演示一中，MySQL没有关闭自动提交机制，所以即使使用rollback，进行回滚事务，也是没用的</p><h4 id="2-4-3-演示二"><a href="#2-4-3-演示二" class="headerlink" title="2-4-3.演示二"></a>2-4-3.演示二</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*使用start transaction;关闭自动提交机制，标志一个事务开启了*/</span></code></pre><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'lisi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span></code></pre><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  2 | lisi     |<br>|  3 | wangwu   |<br>+—-+———-+<br>3 rows in set (0.00 sec)</p></blockquote><pre class=" language-SQL"><code class="language-SQL">mysql> rollback; /*回滚事务*/mysql> select * from t_user;</code></pre><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>+—-+———-+<br>1 row in set (0.00 sec)</p></blockquote><p>此时数据回滚了，只显示了一条记录。</p><h4 id="2-4-4-演示三"><a href="#2-4-4-演示三" class="headerlink" title="2-4-4.演示三"></a>2-4-4.演示三</h4><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*演示二中的rollback事务已经结束，还得重新写这一行*/</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'rose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*1*/</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span>mysql<span class="token operator">></span> <span class="token keyword">commit</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*提交，已经将数据持续化到硬盘里了*/</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*2*/</span><span class="token comment" spellcheck="true">---------------------------------------------------------------------------------</span>mysql<span class="token operator">></span> <span class="token keyword">rollback</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*回滚到上一次的提交点，相当于没用*/</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*3*/</span></code></pre><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec) —1</p></blockquote><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec) —2</p></blockquote><blockquote><p>+—-+———-+<br>| id | username |<br>+—-+———-+<br>|  1 | zs       |<br>|  4 | wangwu   |<br>|  5 | rose     |<br>|  6 | jack     |<br>+—-+———-+<br>4 rows in set (0.00 sec) —3</p></blockquote><p>id属性使用 auto-incremant机制，自增的2,3在之前用过了。</p><h2 id="3-存储引擎（了解）"><a href="#3-存储引擎（了解）" class="headerlink" title="3.存储引擎（了解）"></a>3.存储引擎（了解）</h2><h3 id="3-1-完整的建表语句"><a href="#3-1-完整的建表语句" class="headerlink" title="3-1.完整的建表语句"></a>3-1.完整的建表语句</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_x<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>    </code></pre><p><strong>注意</strong>：在MySQL当中，凡是标识符是可以使用飘号括起来的。最好别用，不通用。</p><p>从上述的完整的建表语句，可以看出，建表的时候可以指定存储引擎，也可以指定字符集。</p><p>MySQL默认使用的存储引擎是InnoDB方式，默认采用的字符集是UTF8。</p><h3 id="3-2-什么是存储引擎"><a href="#3-2-什么是存储引擎" class="headerlink" title="3-2.什么是存储引擎"></a>3-2.什么是存储引擎</h3><p>存储引擎这个名字只有在MySQL中存在。（Oracle中有对应的机制，但是不叫做存储引擎。Oracle中没有特殊的名字，就是“表的存储方式”）</p><p>mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。</p><h3 id="3-3-查看当前MySQL支持的存储引擎"><a href="#3-3-查看当前MySQL支持的存储引擎" class="headerlink" title="3-3.查看当前MySQL支持的存储引擎"></a>3-3.查看当前MySQL支持的存储引擎</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> engines \G</code></pre><h3 id="3-4-常见的存储引擎"><a href="#3-4-常见的存储引擎" class="headerlink" title="3-4.常见的存储引擎"></a>3-4.常见的存储引擎</h3><blockquote><p>Engine: <strong>MyISAM</strong><br>Support: YES<br>Comment: MyISAM storage engine<br>Transactions: NO<br>XA: NO<br>Savepoints: NO</p></blockquote><ul><li>MyISAM这种存储引擎不支持事务</li><li>MySQL最常用的存储引擎，但是这种引擎不是默认的</li><li>MyISAM采用三个文件组织一张表：<ul><li>xxx.frm（存储格式的文件）</li><li>xxx.MYD（存储表中数据的文件）</li><li>xxx.MYI（存储表中索引的文件）</li></ul></li><li>优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率</li><li>缺点：不支持事务</li></ul><blockquote><p>Engine: <strong>InnoDB</strong><br>Support: DEFAULT<br>Comment: Supports transactions, row-level locking, and foreign keys<br>Transactions: YES<br>XA: YES<br>Savepoints: YES</p></blockquote><ul><li>优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障</li><li>表的结构存储在xxx.frm文件中</li><li>数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读</li><li>这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制</li><li>InnoDB支持级联删除和级联更新</li></ul><blockquote><p>Engine: <strong>MEMORY</strong><br>Support: YES<br>Comment: Hash based, stored in memory, useful for temporary tables<br>Transactions: NO<br>XA: NO<br>Savepoints: NO</p></blockquote><ul><li>缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的</li><li>优点：查询速度最快</li><li>以前叫做HEPA引擎</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三)</title>
      <link href="2020/10/18/mysql-san/"/>
      <url>2020/10/18/mysql-san/</url>
      
        <content type="html"><![CDATA[<h2 id="1-连接查询"><a href="#1-连接查询" class="headerlink" title="1.连接查询"></a>1.连接查询</h2><ul><li>在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</li><li>在实际开发中，一般一个业务都会对应多张表，比如：学生和班级，起码两张表。</li></ul><table><thead><tr><th>stuno</th><th>stuname</th><th>classno</th><th>classname</th></tr></thead><tbody><tr><td>1</td><td>zs</td><td>1</td><td>第二中学高三1班</td></tr><tr><td>2</td><td>ls</td><td>1</td><td>第二中学高三1班</td></tr></tbody></table><p>因此，学生和班级信息存储到一张表中，结果就像上面一样，数据会存在大量的重复，导致<strong>数据的冗余</strong>。</p><h2 id="2-连接查询分类"><a href="#2-连接查询分类" class="headerlink" title="2.连接查询分类"></a>2.连接查询分类</h2><ul><li>根据语法出现的年代<ul><li>SQL92（一些老的DBA可能还在使用这种语法。DBA：DataBase Administrator，数据库管理员）</li><li>SQL99（比较新的语法）</li></ul></li><li>根据表的连接方式<ul><li>内连接(inner)<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接(outter)<ul><li>左外连接（左连接）</li><li>右外连接（右连接）</li></ul></li><li>全连接（这个不讲，很少用）</li></ul></li></ul><h2 id="3-笛卡尔积现象"><a href="#3-笛卡尔积现象" class="headerlink" title="3.笛卡尔积现象"></a>3.笛卡尔积现象</h2><p>在表的连接查询方面有一种现象被称为：笛卡尔积现象（笛卡尔乘积现象）</p><p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><p>EMP表：</p><table><thead><tr><th>ename</th><th>deptno</th></tr></thead><tbody><tr><td>SMITH</td><td>20</td></tr><tr><td>ALLEN</td><td>30</td></tr><tr><td>WARD</td><td>30</td></tr><tr><td>JONES</td><td>20</td></tr><tr><td>MARTIN</td><td>30</td></tr><tr><td>BLAKE</td><td>30</td></tr><tr><td>CLARK</td><td>10</td></tr><tr><td>SCOTT</td><td>20</td></tr><tr><td>KING</td><td>10</td></tr><tr><td>TURNER</td><td>30</td></tr><tr><td>ADAMS</td><td>20</td></tr><tr><td>JAMES</td><td>30</td></tr><tr><td>FORD</td><td>20</td></tr><tr><td>MILLER</td><td>10</td></tr></tbody></table><p>DEPT表：</p><table><thead><tr><th>DEPTNO</th><th>DNAME</th><th>LOC</th></tr></thead><tbody><tr><td>10</td><td>ACCOUNTING</td><td>NEW YORK</td></tr><tr><td>20</td><td>RESEARCH</td><td>DALLAS</td></tr><tr><td>30</td><td>SALES</td><td>CHICAGO</td></tr><tr><td>40</td><td>OPERATIONS</td><td>BOSTON</td></tr></tbody></table><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span><span class="token punctuation">;</span></code></pre><p>此处，我们为EMP表起了别名e，DEPT表别名d，这样的好处：</p><ul><li>执行效率高</li><li>可读性好</li></ul><p>显示结果：</p><blockquote><p>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| SMITH  | SALES      |<br>| SMITH  | OPERATIONS |<br>| ALLEN  | ACCOUNTING |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| ALLEN  | OPERATIONS |<br>…………</p></blockquote><p>最后一行显示：</p><blockquote><p>56 rows in set (0.00 sec)  //总共56次，显示56行</p></blockquote><p>这就是笛卡尔积现象：</p><p>当两张表进行连接查询的时候，没有任何条件进行限制，最终的查询结果条数是两张表记录条数的乘积。</p><p>如何避免该现象</p><p>想要避免，很显然，就是<strong>加入过滤条件</strong>。</p><p><strong>思考</strong>：当我们加入条件进行过滤后，避免了笛卡尔积现象，会减少记录的匹配次数吗？</p><p><strong>答</strong>：不会，次数还是56次，只是显示的是有效记录。</p><p>案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token punctuation">,</span>dept <span class="token number">d</span> <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno</code></pre><p>这个语句可以帮我们避免笛卡尔积现象，但是，这是SQL92的写法，现在不用了。（表格连接条件与之前的条件查询都放在了where里面，不好）</p><h2 id="4-内连接-inner-：等值连接"><a href="#4-内连接-inner-：等值连接" class="headerlink" title="4.内连接(inner)：等值连接"></a>4.内连接(inner)：等值连接</h2><p>特点：条件是<strong>等量</strong>关系</p><p>还是上面的案例：找出每一个员工的部门名称，要求显示员工名和部门名。</p><p>（SQL92的写法就在上面，就不再写了，而且现在也不用了）下面是SQL99的写法，被普遍采用。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    dept<span class="token number">.d</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- where</span><span class="token comment" spellcheck="true">-- ...</span></code></pre><p>因为此处是等值连接，正如小标题所述一样，等值连接属于内连接（inner)，所以inner被省略了，但是，带着inner目的是可读性更好一些。</p><p>SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了。同样达到避免笛卡尔积现象的目的。</p><h2 id="5-内连接-inner-：非等值查询"><a href="#5-内连接-inner-：非等值查询" class="headerlink" title="5.内连接(inner)：非等值查询"></a>5.内连接(inner)：非等值查询</h2><p>特点：连接条件中的关系是非等量关系。</p><p>案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将此表取别名：e</span></code></pre><blockquote><p>+——–+———+<br>| ename  | sal     |<br>+——–+———+<br>| SMITH  |  800.00 |<br>| ALLEN  | 1600.00 |<br>| WARD   | 1250.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 1250.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+——–+———+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将此表区别名：s</span></code></pre><blockquote><p>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+</p></blockquote><p>工资等级是按照工资在LOSAL和HISAL里哪个区间进行等级评判的，这就是连接条件。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>     emp <span class="token number">e</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span></code></pre><p>显示结果：</p><blockquote><p>+——–+———+——-+<br>| ename  | sal     | grade |<br>+——–+———+——-+<br>| SMITH  |  800.00 |     1 |<br>| ALLEN  | 1600.00 |     3 |<br>| WARD   | 1250.00 |     2 |<br>| JONES  | 2975.00 |     4 |<br>| MARTIN | 1250.00 |     2 |<br>| BLAKE  | 2850.00 |     4 |<br>| CLARK  | 2450.00 |     4 |<br>| SCOTT  | 3000.00 |     4 |<br>| KING   | 5000.00 |     5 |<br>| TURNER | 1500.00 |     3 |<br>| ADAMS  | 1100.00 |     1 |<br>| JAMES  |  950.00 |     1 |<br>| FORD   | 3000.00 |     4 |<br>| MILLER | 1300.00 |     2 |<br>+——–+———+——-+</p></blockquote><h2 id="6-自连接"><a href="#6-自连接" class="headerlink" title="6.自连接"></a>6.自连接</h2><p>特点：一张表看做两张表。自己连接自己。</p><p>案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>mgr <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>EMP a 员工表</p><blockquote><p>+——-+——–+——+<br>| empno | ename  | mgr  |<br>+——-+——–+——+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+——-+——–+——+</p></blockquote><p>EMP b 领导表</p><blockquote><p>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7566 | JONES  |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7902 | FORD   |<br>+——-+——–+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'员工'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'领导'</span><span class="token keyword">from</span>     emp <span class="token number">a</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 员工的领导编号 = 领导的员工编号</span></code></pre><h2 id="7-外连接"><a href="#7-外连接" class="headerlink" title="7.外连接"></a>7.外连接</h2><h3 id="7-1-与内连接区别"><a href="#7-1-与内连接区别" class="headerlink" title="7-1.与内连接区别"></a>7-1.与内连接区别</h3><ul><li>内连接<ul><li>假设A和B表使用内(inner)连接的话，凡是A表和B表能够匹配上的记录查询出来，这就是内连接。AB两张表没有主副之分，两张表是平等的。</li></ul></li><li>外连接<ul><li>假设A和B表使用外(outer)连接的话，AB两张表中有一张表是<strong>主表</strong>，一张表是<strong>副表</strong>，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</li></ul></li></ul><h3 id="7-2-外连接分类"><a href="#7-2-外连接分类" class="headerlink" title="7-2.外连接分类"></a>7-2.外连接分类</h3><ul><li>左外连接（左连接）：表示左边的这张表是主表。</li><li>右外连接（右连接）：表示右边的这张表是主表。</li></ul><p>左连接有右连接的写法，右连接也会有对应的左连接的写法。</p><p>案例：找出每个员工的上级领导？（所有员工必须全部查询出来。）</p><p>EMP a 员工表</p><blockquote><p>+——-+——–+——+<br>| empno | ename  | mgr  |<br>+——-+——–+——+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+——-+——–+——+</p></blockquote><p>EMP b 领导表</p><blockquote><p>+——-+——–+<br>| empno | ename  |<br>+——-+——–+<br>|  7566 | JONES  |<br>|  7698 | BLAKE  |<br>|  7782 | CLARK  |<br>|  7788 | SCOTT  |<br>|  7839 | KING   |<br>|  7902 | FORD   |<br>+——-+——–+</p></blockquote><p>内连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'员工'</span><span class="token punctuation">,</span><span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'领导'</span><span class="token keyword">from</span>     emp <span class="token number">a</span><span class="token comment" spellcheck="true">/*inner*/</span><span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>左外连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token string">'领导'</span><span class="token keyword">from</span>    emp <span class="token number">a</span><span class="token keyword">left</span> <span class="token comment" spellcheck="true">/*outer*/</span> <span class="token keyword">join</span>    emp <span class="token number">b</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>右外连接：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">a</span><span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span> <span class="token number">b</span><span class="token punctuation">.</span>ename <span class="token string">'领导'</span><span class="token keyword">from</span>    emp <span class="token number">b</span><span class="token keyword">right</span> <span class="token comment" spellcheck="true">/*outer*/</span> <span class="token keyword">join</span>    emp <span class="token number">a</span><span class="token keyword">on</span>    <span class="token number">a</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>外连接最重要的特点：主表的数据无条件的全部查询出来。</p><p>案例：找出哪个部门没有员工？</p><p>EMP表：</p><blockquote><p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p></blockquote><p>DEPT表：</p><blockquote><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span>     emp <span class="token number">e</span> <span class="token keyword">right</span> <span class="token keyword">join</span>     dept <span class="token number">d</span> <span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno <span class="token keyword">where</span>     <span class="token number">e</span><span class="token punctuation">.</span>empno <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><h2 id="8-三张表的连接查询"><a href="#8-三张表的连接查询" class="headerlink" title="8.三张表的连接查询"></a>8.三张表的连接查询</h2><p>EMP e：</p><blockquote><p>+——-+——–+———+——–+<br>| empno | ename  | sal     | deptno |<br>+——-+——–+———+——–+<br>|  7369 | SMITH  |  800.00 |     20 |<br>|  7499 | ALLEN  | 1600.00 |     30 |<br>|  7521 | WARD   | 1250.00 |     30 |<br>|  7566 | JONES  | 2975.00 |     20 |<br>|  7654 | MARTIN | 1250.00 |     30 |<br>|  7698 | BLAKE  | 2850.00 |     30 |<br>|  7782 | CLARK  | 2450.00 |     10 |<br>|  7788 | SCOTT  | 3000.00 |     20 |<br>|  7839 | KING   | 5000.00 |     10 |<br>|  7844 | TURNER | 1500.00 |     30 |<br>|  7876 | ADAMS  | 1100.00 |     20 |<br>|  7900 | JAMES  |  950.00 |     30 |<br>|  7902 | FORD   | 3000.00 |     20 |<br>|  7934 | MILLER | 1300.00 |     10 |<br>+——-+——–+———+——–+</p></blockquote><p>DEPT d：</p><blockquote><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><p>SALGRADE s：</p><blockquote><p>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+</p></blockquote><p>案例：找出每一个员工的部门名称以及工资等级。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token keyword">join</span>    dept <span class="token number">d</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span></code></pre><p>表示：emp表和dept表先进行表连接，连接之后emp表继续和salgrade表进行连接。</p><p>案例：找出每一个员工的部门名称，工资等级，以及上级领导。</p><p>PS：这个时候必须使用<strong>外连接</strong>，KING是员工，有部门名称，工资等级，但是KING没有上司，所以KING 必须查出，若是使用内连接，则会导致KING丢失。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">,</span><span class="token number">e1</span><span class="token punctuation">.</span>ename <span class="token string">'领导'</span><span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token keyword">join</span>    dept <span class="token number">d</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token keyword">left</span> <span class="token keyword">join</span>    emp <span class="token number">e1</span><span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>mgr <span class="token operator">=</span> <span class="token number">e1</span><span class="token punctuation">.</span>empno<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+————+——-+——-+<br>    | 员工      | dname      | grade | 领导    |<br>    +——–+————+——-+——-+<br>    | SMITH  | RESEARCH   |     1 | FORD  |<br>    | ALLEN  | SALES      |     3 | BLAKE |<br>    | WARD   | SALES      |     2 | BLAKE |<br>    | JONES  | RESEARCH   |     4 | KING  |<br>    | MARTIN | SALES      |     2 | BLAKE |<br>    | BLAKE  | SALES      |     4 | KING  |<br>    | CLARK  | ACCOUNTING |     4 | KING  |<br>    | SCOTT  | RESEARCH   |     4 | JONES |<br>    | KING   | ACCOUNTING |     5 | NULL  |<br>    | TURNER | SALES      |     3 | BLAKE |<br>    | ADAMS  | RESEARCH   |     1 | SCOTT |<br>    | JAMES  | SALES      |     1 | BLAKE |<br>    | FORD   | RESEARCH   |     4 | JONES |<br>    | MILLER | ACCOUNTING |     2 | CLARK |<br>    +——–+————+——-+——-+</p></blockquote><h2 id="9-子查询"><a href="#9-子查询" class="headerlink" title="9.子查询"></a>9.子查询</h2><h3 id="9-1-什么是子查询"><a href="#9-1-什么是子查询" class="headerlink" title="9-1.什么是子查询"></a>9-1.什么是子查询</h3><p>出现在其他语句当中的select语句，成为子查询或内查询。外部的查询语句，成为主查询或外查询。</p><p>select语句当中<strong>嵌套</strong>select语句，被嵌套的select语句是子查询。</p><p>子查询可以出现在以下位置：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">from</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">where</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span><span class="token punctuation">.</span></code></pre><p>子查询按结果集的行列数的不同：</p><ul><li>标量子查询（单行子查询）：结果集只有一行一列</li><li>列子查询（多行子查询）：结果集只有一列多行</li><li>行子查询：结果集有一行多列</li><li>表子查询：结果集一般多行多列</li></ul><p>按子查询出现的位置：</p><ul><li><p>select后面</p><p>仅仅支持标量子查询</p></li><li><p>from后面</p><p>支持表子查询</p></li><li><p>where或having后面</p><p>标量子查询（单行子查询）</p><p>列子查询（多行子查询）</p><p>行子查询（较少）</p></li><li><p>exists后面（相关子查询）</p><p>表子查询</p></li></ul><p><strong>特点</strong>：</p><ol><li>子查询放在小括号里</li><li>子查询一般放在条件的右侧</li><li>标量子查询，一般搭配着单行操作符使用，“&gt;，&lt;，&gt;=，&lt;=，=，&lt;&gt;”</li><li>列子查询一般搭配着多行操作符使用，“in，any / some，all”</li></ol><h3 id="9-2-where子句中使用子查询"><a href="#9-2-where子句中使用子查询" class="headerlink" title="9-2.where子句中使用子查询"></a>9-2.where子句中使用子查询</h3><p>案例：找出高于平均薪资的员工信息。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre><p><strong>注意</strong>：错误的写法，where后面不能直接使用分组函数。</p><p>分为两步：</p><ol><li><p>找出平均薪资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre></li><li><p>where过滤</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2073</span><span class="token punctuation">;</span></code></pre></li></ol><p>将以上两步合为一步：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="标量子查询-单行子查询（尚硅谷）"><a href="#标量子查询-单行子查询（尚硅谷）" class="headerlink" title="标量子查询 / 单行子查询（尚硅谷）"></a>标量子查询 / 单行子查询（尚硅谷）</h4><p>案例1：谁的工资比 Abel 高?</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询Abel的工资</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询员工的信息，满足 salary>①结果</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> salary    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">'Abel'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询141号员工的job_id</span><span class="token keyword">SELECT</span> job_id<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询143号员工的salary</span><span class="token keyword">SELECT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">143</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ③查询员工的姓名，job_id 和工资，要求job_id=①并且salary>②</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> job_id    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span><span class="token punctuation">)</span> <span class="token operator">AND</span> salary<span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> salary    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">143</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例3：返回公司工资最少的员工的last_name,job_id和salary？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询公司的 最低工资</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询last_name,job_id和salary，要求salary=①</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询50号部门的最低工资</span><span class="token keyword">SELECT</span>  <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询每个部门的最低工资</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 在②基础上筛选，满足min(salary)>①</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span>department_id<span class="token keyword">FROM</span> employees<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id<span class="token keyword">HAVING</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span>  <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="列子查询-多行子查询（尚硅谷）"><a href="#列子查询-多行子查询（尚硅谷）" class="headerlink" title="列子查询 / 多行子查询（尚硅谷）"></a>列子查询 / 多行子查询（尚硅谷）</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>in，not in</td><td>等于列表中的任意值</td></tr><tr><td>any，some</td><td>和子查询返回的某一个值比较</td></tr><tr><td>all</td><td>和子查询返回的所有值比较</td></tr></tbody></table><p>案例1：返回location_id是1400或1700的部门中的所有员工姓名？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询location_id是1400或1700的部门编号</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id<span class="token keyword">FROM</span> departments<span class="token keyword">WHERE</span> location_id <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">1400</span><span class="token punctuation">,</span><span class="token number">1700</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询员工姓名，要求部门号是①列表中的某一个</span><span class="token keyword">SELECT</span> last_name<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> department_id  <span class="token operator">&lt;></span><span class="token keyword">ALL</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> department_id    <span class="token keyword">FROM</span> departments    <span class="token keyword">WHERE</span> location_id <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">1400</span><span class="token punctuation">,</span><span class="token number">1700</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询job_id为‘IT_PROG’部门任一工资</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询员工号、姓名、job_id 以及salary，salary&lt;(①)的任意一个</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>employee_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">&lt;</span> <span class="token keyword">ANY</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> salary    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> job_id<span class="token operator">&lt;></span><span class="token string">'IT_PROG'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或</span><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>employee_id<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary<span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> salary <span class="token operator">&lt;</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees    <span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">'IT_PROG'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> job_id<span class="token operator">&lt;></span><span class="token string">'IT_PROG'</span><span class="token punctuation">;</span></code></pre><h4 id="行子查询-（结果集一行多列或多行多列）"><a href="#行子查询-（结果集一行多列或多行多列）" class="headerlink" title="行子查询 （结果集一行多列或多行多列）"></a>行子查询 （结果集一行多列或多行多列）</h4><p>案例：查询员工编号最小并且工资最高的员工信息？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- ①查询最小的员工编号</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ②查询最高工资</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token keyword">FROM</span> employees<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- ③查询员工信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> employees<span class="token keyword">WHERE</span> employee_id<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span><span class="token operator">AND</span> salary<span class="token operator">=</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="9-3-from后面嵌套子查询"><a href="#9-3-from后面嵌套子查询" class="headerlink" title="9-3.from后面嵌套子查询"></a>9-3.from后面嵌套子查询</h3><p>案例：找出每个部门平均薪水的等级。</p><p>第一步：找出每个部门平均薪水（按照部门编号分组，求sal的平均值）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+————-+<br>| deptno | avgsal      |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+</p></blockquote><p>第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：t.avgsal between s.losal and s.hisal</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>    <span class="token punctuation">(</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> t<span class="token keyword">join</span>    salgrade s<span class="token keyword">on</span>    t<span class="token punctuation">.</span>avgsal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal</code></pre><p>结果：</p><blockquote><p>+——–+————-+——-+<br>| deptno | avgsal      | grade |<br>+——–+————-+——-+<br>|     30 | 1566.666667 |     3 |<br>|     10 | 2916.666667 |     4 |<br>|     20 | 2175.000000 |     4 |<br>+——–+————-+——-+</p></blockquote><p>案例：找出每个部门平均的薪水等级。</p><p>第一步：找出每个员工的薪水等级。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token keyword">join</span>     salgrade s<span class="token keyword">on</span>    <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> hisal<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———+——–+——-+<br>| ename  | sal     | deptno | grade |<br>+——–+———+——–+——-+<br>| SMITH  |  800.00 |     20 |     1 |<br>| ALLEN  | 1600.00 |     30 |     3 |<br>| WARD   | 1250.00 |     30 |     2 |<br>| JONES  | 2975.00 |     20 |     4 |<br>| MARTIN | 1250.00 |     30 |     2 |<br>| BLAKE  | 2850.00 |     30 |     4 |<br>| CLARK  | 2450.00 |     10 |     4 |<br>| SCOTT  | 3000.00 |     20 |     4 |<br>| KING   | 5000.00 |     10 |     5 |<br>| TURNER | 1500.00 |     30 |     3 |<br>| ADAMS  | 1100.00 |     20 |     1 |<br>| JAMES  |  950.00 |     30 |     1 |<br>| FORD   | 3000.00 |     20 |     4 |<br>| MILLER | 1300.00 |     10 |     2 |<br>+——–+———+——–+——-+</p></blockquote><p>第二步：基于以上结果，继续按照deptno分组，求grade平均值。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token keyword">from</span>     emp <span class="token number">e</span> <span class="token keyword">join</span>     salgrade s <span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token keyword">group</span> <span class="token keyword">by</span>    <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+————–+<br>| deptno | avg(s.grade) |<br>+——–+————–+<br>|     10 |       3.6667 |<br>|     20 |       2.8000 |<br>|     30 |       2.5000 |<br>+——–+————–+</p></blockquote><h3 id="9-4-select后面嵌套子查询"><a href="#9-4-select后面嵌套子查询" class="headerlink" title="9-4.select后面嵌套子查询"></a>9-4.select后面嵌套子查询</h3><p>案例：找出每个员工所在的部门名称，要求显示员工名和部门名。</p><p>原始版本：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">d</span><span class="token punctuation">.</span>dname<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token keyword">join</span>     dept <span class="token number">d</span><span class="token keyword">on</span>     <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span></code></pre><p>select嵌套子查询版本：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">e</span><span class="token punctuation">.</span>ename    <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token number">d</span><span class="token punctuation">.</span>dname <span class="token keyword">from</span> dept <span class="token keyword">where</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span>deptno<span class="token punctuation">)</span> <span class="token keyword">as</span> dname<span class="token keyword">from</span>    emp <span class="token number">e</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+————+<br>| ename  | dname      |<br>+——–+————+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>+——–+————+</p></blockquote><h4 id="仅仅支持标量子查询（尚硅谷）"><a href="#仅仅支持标量子查询（尚硅谷）" class="headerlink" title="仅仅支持标量子查询（尚硅谷）"></a>仅仅支持标量子查询（尚硅谷）</h4><p>案例1：查询每个部门的员工个数？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> employees <span class="token number">e</span>    <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>department_id <span class="token operator">=</span> <span class="token number">d</span><span class="token punctuation">.</span><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span> <span class="token punctuation">)</span> 个数 <span class="token keyword">FROM</span> departments <span class="token number">d</span><span class="token punctuation">;</span></code></pre><p>案例2：查询员工号=102的部门名？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> department_name<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>department_id    <span class="token keyword">FROM</span> departments <span class="token number">d</span>    <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> employees <span class="token number">e</span>    <span class="token keyword">ON</span> <span class="token number">d</span><span class="token punctuation">.</span>department_id<span class="token operator">=</span><span class="token number">e</span><span class="token punctuation">.</span>department_id    <span class="token keyword">WHERE</span> <span class="token number">e</span><span class="token punctuation">.</span>employee_id<span class="token operator">=</span><span class="token number">102</span><span class="token punctuation">)</span> 部门名<span class="token punctuation">;</span></code></pre><h2 id="10-union的使用"><a href="#10-union的使用" class="headerlink" title="10.union的使用"></a>10.union的使用</h2><p>union可以将查询结果集相加</p><p>案例：找出工作岗位是SALESMAN和MANAGER的员工？</p><p>第一种(or)：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span> <span class="token operator">or</span> job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">;</span></code></pre><p>第二种(in)：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'MANAGER'</span><span class="token punctuation">,</span><span class="token string">'SALESMAN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第三种(union)：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span><span class="token keyword">union</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">;</span></code></pre><p>union 可以用于两张不相干的表中的数据拼接在一起显示：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp<span class="token keyword">union</span><span class="token keyword">select</span> dname <span class="token keyword">from</span> dept<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+————+<br>| ename      |<br>+————+<br>| SMITH      |<br>| ALLEN      |<br>| WARD       |<br>| JONES      |<br>| MARTIN     |<br>| BLAKE      |<br>| CLARK      |<br>| SCOTT      |<br>| KING       |<br>| TURNER     |<br>| ADAMS      |<br>| JAMES      |<br>| FORD       |<br>| MILLER     |<br>| ACCOUNTING |<br>| RESEARCH   |<br>| SALES      |<br>| OPERATIONS |<br>+————+</p></blockquote><p><strong>注意</strong>：使用union时，前后查询的字段的数量必须一样。</p><h2 id="11-limit的使用-重中之重"><a href="#11-limit的使用-重中之重" class="headerlink" title="11.limit的使用(重中之重)"></a>11.limit的使用(重中之重)</h2><p>limit用于以后的<strong>分页查询</strong>。</p><p>limit是mysql特有的，其他数据库中没有，不通用。（Oracle中有一个相同的机制，叫做rownum）</p><p><strong>作用</strong>：取结果集中的部分数据</p><p><strong>语法</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">limit</span> startindex<span class="token punctuation">,</span>length</code></pre><p>startIndex表示起始位置，从0开始，0表示第一条数据.</p><p>length表示取几个</p><p>案例：取出工资前5名的员工（思路：降序取前5个）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span></code></pre><p><strong>执行顺序</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>            <span class="token number">5</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>            <span class="token number">1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">where</span>            <span class="token number">2</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">group</span> <span class="token keyword">by</span>        <span class="token number">3</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>            <span class="token number">4</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>        <span class="token number">6</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span>            <span class="token number">7</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span></code></pre><p>通用的标准分页sql</p><p>比如：</p><blockquote><p>每页显示3条记录：<br>第1页：0, 3<br>第2页：3, 3<br>第3页：6, 3<br>第4页：9, 3<br>第5页：12, 3</p></blockquote><p>每页显示pageSize条记录：<br>第pageNo页：(pageNo - 1) * pageSize, pageSize</p><p>java代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> pageNo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 页码是2</span><span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 每页显示10条</span><span class="token function">limit</span> <span class="token punctuation">(</span>pageNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageSize<span class="token punctuation">,</span> pageSize</code></pre><h2 id="12-表的创建"><a href="#12-表的创建" class="headerlink" title="12.表的创建"></a>12.表的创建</h2><h3 id="12-1-语法格式"><a href="#12-1-语法格式" class="headerlink" title="12-1.语法格式"></a>12-1.语法格式</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>    字段名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>    字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="12-2-MySQL中字段的数据类型-常见的"><a href="#12-2-MySQL中字段的数据类型-常见的" class="headerlink" title="12-2.MySQL中字段的数据类型(常见的)"></a>12-2.MySQL中字段的数据类型(常见的)</h3><ul><li>int——整数型(java中的int)</li><li>bigint——长整型(java中的long)</li><li>float——浮点型(java中的float double)</li><li>char——定长字符串(String)</li><li>varchar——可变长字符串(StringBuffer/StringBuilder)</li><li>date——日期类型 （对应Java中的java.sql.Date类型）</li><li>BLOB——二进制大对象（存储图片、视频等流媒体信息），Binary Large OBject ，（对应java中的Object）</li><li>CLOB——字符大对象（存储较大文本，比如，可以存储4G的字符），Character Large OBject，（对应java中的Object）</li></ul><p><strong>注意</strong>：</p><ol><li><p>char和varchar怎么选择？</p><p>答：在实际的开发中，当某个字段中的数据长度不发生改变的时候，是定长的，例如：性别、生日等都是采用char；当一个字段的数据长度不确定，例如：简介、姓名等都是采用varchar。</p></li><li><p>BLOB和CLOB类型的使用？</p><p>假设有一个电影表: t_movie</p><table><thead><tr><th align="center">id(int)</th><th align="center">name(varchar)</th><th align="center">playtime(date/char)</th><th align="center">haibao(BLOB)</th><th align="center">history(CLOB)</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">蜘蛛侠</td><td align="center">2020-10-10</td><td align="center">图片型海报</td><td align="center">电影简介</td></tr><tr><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>海报用insert语句插不进去，必须使用java中的IO流，才能将图片放到表当中。<strong>但是</strong>，用的不多，数据库太珍贵了，一般将图片，声音放到硬盘上，再将硬盘上的地址存入数据库中。<strong>但是</strong>，图片只有1k，或更小，比如qq头像。</p></li><li><p>表名在数据库当中一般建议以：t_或者tbl_开始。</p></li><li><p>char类型的效率高于varchar，char类型不需要做运算，不需要判断传过来多少长度的字符串。底层不会做if语句判断，而varchar这种智能型字符串在底层会做if语句判断。</p></li></ol><h3 id="12-3-创建一个学生表"><a href="#12-3-创建一个学生表" class="headerlink" title="12-3.创建一个学生表"></a>12-3.创建一个学生表</h3><blockquote><p>学生信息包括：<br>    学号、姓名、性别、班级编号、生日<br>    学号：bigint<br>    姓名：varchar<br>    性别：char<br>    班级编号：int<br>    生日：char</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_student<span class="token punctuation">(</span>    <span class="token keyword">no</span> <span class="token keyword">bigint</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    classno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birth char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </code></pre><h2 id="13-insert语句插入数据"><a href="#13-insert语句插入数据" class="headerlink" title="13.insert语句插入数据"></a>13.insert语句插入数据</h2><h3 id="13-1-语法格式"><a href="#13-1-语法格式" class="headerlink" title="13-1.语法格式"></a>13-1.语法格式</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre><p>要求：字段的数量和值的数量相同，并且数据类型要对应相同。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>classno<span class="token punctuation">,</span>birth<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'gaosan1ban'</span><span class="token punctuation">,</span><span class="token string">'1950-10-12'</span><span class="token punctuation">)</span></code></pre><blockquote><p>mysql&gt; select * from t_student;<br>+——+———-+——+————+————+<br>| no   | name     | sex  | classno    | birth      |<br>+——+———-+——+————+————+<br>|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>+——+———-+——+————+————+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'wangwu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*除name字段之外，剩下的所有字段自动插入NULL。*/</span></code></pre><blockquote><p>mysql&gt; select * from t_student;<br>+——+———-+——+————+————+<br>| no   | name     | sex  | classno    | birth      |<br>+——+———-+——+————+————+<br>|    1 | zhangsan | 1    | gaosan1ban | 1950-10-12 |<br>|    2 | lisi     | 1    | gaosan1ban | 1950-10-12 |<br>| NULL | wangwu   | NULL | NULL       | NULL       |<br>+——+———-+——+————+————+</p></blockquote><p><strong>注意</strong>：</p><p>当一条insert语句执行成功之后，表格当中必然会多一行记录。即使多的这一行记录当中某些字段是NULL，后期也没有办法在执行insert语句插入数据了，只能使用update进行更新。</p><h3 id="13-2-删表"><a href="#13-2-删表" class="headerlink" title="13-2.删表"></a>13-2.删表</h3><blockquote><p>drop table if exists t_student; /<em>当这个表存在的话删除</em>/</p></blockquote><h3 id="13-3-默认值default"><a href="#13-3-默认值default" class="headerlink" title="13-3.默认值default"></a>13-3.默认值default</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_student<span class="token punctuation">(</span>    <span class="token keyword">no</span> <span class="token keyword">bigint</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    sex char<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">/*给性别默认值'1'*/</span>    classno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    birth char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>mysql&gt; select * from t_student;<br>+——+———-+——+———+——-+<br>| no   | name     | sex  | classno | birth |<br>+——+———-+——+———+——-+<br>| NULL | zhangsan | 1    | NULL    | NULL  |<br>+——+———-+——+———+——-+</p></blockquote><h3 id="13-4-省略"><a href="#13-4-省略" class="headerlink" title="13-4.省略"></a>13-4.省略</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'gaosan2ban'</span><span class="token punctuation">,</span><span class="token string">'1986-10-23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*字段可以省略不写，但是后面的value对数量和顺序都有要求*/</span></code></pre><h3 id="13-5-一次插入多行数据"><a href="#13-5-一次插入多行数据" class="headerlink" title="13-5.一次插入多行数据"></a>13-5.一次插入多行数据</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span>     t_student<span class="token punctuation">(</span><span class="token keyword">no</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>classno<span class="token punctuation">,</span>birth<span class="token punctuation">)</span> <span class="token keyword">values</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'rose'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'gaosi2ban'</span><span class="token punctuation">,</span><span class="token string">'1952-12-14'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'laotie'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'gaosi2ban'</span><span class="token punctuation">,</span><span class="token string">'1955-12-14'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>mysql&gt; select * from t_student;<br>+——+———-+——+————+————+<br>| no   | name     | sex  | classno    | birth      |<br>+——+———-+——+————+————+<br>| NULL | zhangsan | 1    | NULL       | NULL       |<br>|    1 | jack     | 0    | gaosan2ban | 1986-10-23 |<br>|    3 | rose     | 1    | gaosi2ban  | 1952-12-14 |<br>|    4 | laotie   | 1    | gaosi2ban  | 1955-12-14 |<br>+——+———-+——+————+————+</p></blockquote><h2 id="14-表的复制"><a href="#14-表的复制" class="headerlink" title="14.表的复制"></a>14.表的复制</h2><p>语法格式：</p><blockquote><p>create table 表名 as select语句;<br>将查询结果当做表创建出来。<br>比如：<br>create table emp1 as select * from emp;<br>将后面的查询结果当做一张新表emp1，创建出来。</p></blockquote><h2 id="15-将查询结果插入表中"><a href="#15-将查询结果插入表中" class="headerlink" title="15.将查询结果插入表中"></a>15.将查询结果插入表中</h2><blockquote><p>mysql&gt; insert into dept1 select * from dept;<br>mysql&gt; select * from dept1;<br>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><h2 id="16-修改数据update"><a href="#16-修改数据update" class="headerlink" title="16.修改数据update"></a>16.修改数据update</h2><h3 id="16-1-语法格式："><a href="#16-1-语法格式：" class="headerlink" title="16-1.语法格式："></a>16-1.语法格式：</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件<span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：没有where条件，整张表数据全部更新；字段与字段之间用 ‘ , ‘ 连接，不用 ‘ and ‘ 。</p><p>案例：将部门10的LOC修改为SHANGHAI，将部门名称修改为RENSHIBU</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> dept1 <span class="token keyword">set</span> loc <span class="token operator">=</span> <span class="token string">'SHANGHAI'</span><span class="token punctuation">,</span> dname <span class="token operator">=</span> <span class="token string">'RENSHIBU'</span> <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><blockquote><p>mysql&gt; select * from dept1;<br>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | RENSHIBU   | SHANGHAI |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>|     10 | RENSHIBU   | SHANGHAI |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><h3 id="16-2-更新所有记录"><a href="#16-2-更新所有记录" class="headerlink" title="16-2.更新所有记录"></a>16-2.更新所有记录</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> dept1 <span class="token keyword">set</span> loc <span class="token operator">=</span> <span class="token string">'x'</span><span class="token punctuation">,</span> dname <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span></code></pre><blockquote><p>mysql&gt; select * from dept1;<br>+——–+——-+——+<br>| DEPTNO | DNAME | LOC  |<br>+——–+——-+——+<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>|     10 | y     | x    |<br>|     20 | y     | x    |<br>|     30 | y     | x    |<br>|     40 | y     | x    |<br>+——–+——-+——+</p></blockquote><h2 id="17-删除数据"><a href="#17-删除数据" class="headerlink" title="17.删除数据"></a>17.删除数据</h2><p>语法格式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span></code></pre><p><strong>注意</strong>：没有where条件，则全部删除</p><p>删除10部门数据？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> dept1 <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></code></pre><p>删除大表中的数据（<strong>重点</strong>）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*表被截断，不可回滚。永久丢失。*/</span> </code></pre><p>删除表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*这个通用。*/</span> <span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> 表名<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*oracle不支持这种写法。*/</span>  </code></pre><h2 id="18-表的修改"><a href="#18-表的修改" class="headerlink" title="18.表的修改"></a>18.表的修改</h2><h3 id="18-1-修改列名"><a href="#18-1-修改列名" class="headerlink" title="18-1.修改列名"></a>18-1.修改列名</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- column可省略</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> change <span class="token keyword">column</span> <span class="token punctuation">[</span>旧列名<span class="token punctuation">]</span> <span class="token punctuation">[</span>新列名<span class="token punctuation">]</span>  数据类型<span class="token punctuation">;</span></code></pre><h3 id="18-2-修改列的类型或约束"><a href="#18-2-修改列的类型或约束" class="headerlink" title="18-2.修改列的类型或约束"></a>18-2.修改列的类型或约束</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- column可省略</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">modify</span> <span class="token keyword">column</span> <span class="token punctuation">[</span>列名<span class="token punctuation">]</span> <span class="token punctuation">[</span>新数据类型<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="18-3-添加新列"><a href="#18-3-添加新列" class="headerlink" title="18-3.添加新列"></a>18-3.添加新列</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>列名<span class="token punctuation">]</span> 数据类型<span class="token punctuation">;</span></code></pre><h3 id="18-4-删除列"><a href="#18-4-删除列" class="headerlink" title="18-4.删除列"></a>18-4.删除列</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> <span class="token keyword">drop</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>列名<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="18-5-修改表名"><a href="#18-5-修改表名" class="headerlink" title="18-5.修改表名"></a>18-5.修改表名</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>旧表名<span class="token punctuation">]</span> <span class="token keyword">rename</span> <span class="token keyword">to</span> <span class="token punctuation">[</span>新表名<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="19-表的删除"><a href="#19-表的删除" class="headerlink" title="19.表的删除"></a>19.表的删除</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h2 id="20-总结"><a href="#20-总结" class="headerlink" title="20.总结"></a>20.总结</h2><p>对于表结构的修改，这里不讲了，大家使用工具完成即可，因为在实际开发中表一旦设计好之后，对表结构的修改是很少的，修改表结构就是对之前的设计进行了否定，即使需要修改表结构，我们也可以直接使用工具操作。修改表结构的语句不会出现在Java代码当中。出现在java代码当中的sql包括：insert delete update select（这些都是表中的数据操作。）</p><p>增删改查有一个术语CRUD操作：Create(增)，Retrieve(检索)，Update(修改)，Delete(删除)</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(二)</title>
      <link href="2020/10/18/mysql-er/"/>
      <url>2020/10/18/mysql-er/</url>
      
        <content type="html"><![CDATA[<h2 id="1-函数"><a href="#1-函数" class="headerlink" title="1.函数"></a>1.函数</h2><h3 id="1-1-字符函数"><a href="#1-1-字符函数" class="headerlink" title="1-1.字符函数"></a>1-1.字符函数</h3><p><strong>length函数</strong>用于获取参数值的字节个数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> length<span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>4</p></blockquote><p><strong>concat函数</strong>拼接字符串</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> concat<span class="token punctuation">(</span>l_name<span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span>f_name<span class="token punctuation">)</span> 姓名 <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>upper、lower函数</strong>改变大小写<br><strong>substr、substring函数</strong>截取，索引从1开始</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 截取从指定索引处后面的所有字符</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'李莫愁爱上了陆展元'</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 截取从指定索引处指定字符长度的字符</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span><span class="token string">'李莫愁爱上了陆展元'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>陆展元<br>李莫愁</p></blockquote><p><strong>instr函数</strong>返回字符串第一次出现的索引，若找不到，则返回0</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> instr<span class="token punctuation">(</span><span class="token string">'杨不悔爱上了殷六侠'</span><span class="token punctuation">,</span><span class="token string">'殷六侠‘'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>7</p></blockquote><p><strong>trim函数</strong>去前后空格</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'张翠山'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> trim<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token keyword">from</span> <span class="token string">'aaa张aaaa翠山aaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 去掉a</span></code></pre><p>结果：</p><blockquote><p>张翠山<br>张翠山</p></blockquote><p><strong>lpad函数</strong>用指定字符实现左填充指定长度</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> lpad<span class="token punctuation">(</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>**aaa</p></blockquote><p><strong>rpad函数</strong>同上<br><strong>replace函数</strong>替换</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> replace<span class="token punctuation">(</span><span class="token string">'aaabbbddd'</span><span class="token punctuation">,</span><span class="token string">'ddd'</span><span class="token punctuation">,</span><span class="token string">'ccc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>aaabbbccc</p></blockquote><h3 id="1-2-数学函数"><a href="#1-2-数学函数" class="headerlink" title="1-2.数学函数"></a>1-2.数学函数</h3><p><strong>round()函数</strong>四舍五入<br><strong>ceil函数</strong>向上取整<br><strong>floor函数</strong>向下取整<br><strong>truncate函数</strong>截断<br><strong>mod函数</strong>取余</p><h3 id="1-3-日期函数"><a href="#1-3-日期函数" class="headerlink" title="1-3.日期函数"></a>1-3.日期函数</h3><p><strong>now函数</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>curdate函数</strong>返回当前日期，不包含时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>curtime函数</strong>返回当前时间，不包含日期<br><strong>获取指定部分，年，月，日</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> year<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">'年'</span><span class="token punctuation">;</span></code></pre><p><strong>str_to_date函数</strong></p><pre class=" language-sql"><code class="language-sql">str_to_date<span class="token punctuation">(</span><span class="token string">'9-13-1999'</span><span class="token punctuation">,</span><span class="token string">'%m-%d-%Y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>date_format函数</strong></p><pre class=" language-sql"><code class="language-sql">date_format<span class="token punctuation">(</span><span class="token string">'2018/6/6'</span><span class="token punctuation">,</span><span class="token string">'%Y年%m月%d日'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-4-其他函数"><a href="#1-4-其他函数" class="headerlink" title="1-4.其他函数"></a>1-4.其他函数</h3><p><strong>version()</strong><br><strong>database()</strong><br><strong>user()</strong></p><h2 id="2-排序（升序，降序）"><a href="#2-排序（升序，降序）" class="headerlink" title="2.排序（升序，降序）"></a>2.排序（升序，降序）</h2><p>按照工资升序，找出员工名和薪资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token punctuation">,</span>sal<span class="token keyword">from</span>     emp<span class="token keyword">order</span> <span class="token keyword">by</span>    sal<span class="token punctuation">;</span></code></pre><p><strong>PS</strong>:默认是升序。怎么指定升序或者降序呢？<strong>asc表示升序，desc表示降序</strong>。</p><p>order by子句应该在from子句后面，若是使用limit时，limit应该位于order by之后。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 升序</span><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 升序</span><span class="token keyword">select</span> ename <span class="token punctuation">,</span> sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 降序</span></code></pre><p>按照工资的降序排列，当工资相同的时候再按照名字的升序排列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token punctuation">,</span> ename <span class="token keyword">asc</span><span class="token punctuation">;</span></code></pre><p><strong>PS</strong>:越靠前的字段越能起到主导作用。只有当前面的字段无法完成排序的时候，才会启用后面的字段。</p><p>找出工作岗位是SALESMAN的员工，并且要求按照薪资的降序排列。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token keyword">order</span> <span class="token keyword">by</span>    sal <span class="token keyword">desc</span><span class="token punctuation">;</span></code></pre><p><strong>总结</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段                        <span class="token number">3</span><span class="token keyword">from</span>    表名                        <span class="token number">1</span><span class="token keyword">where</span>    条件                        <span class="token number">2</span><span class="token keyword">order</span> <span class="token keyword">by</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                        <span class="token number">4</span><span class="token comment" spellcheck="true">-- order by是最后执行的。</span></code></pre><h2 id="3-分组函数"><a href="#3-分组函数" class="headerlink" title="3.分组函数"></a>3.分组函数</h2><ul><li><strong>count</strong> 计数</li><li><strong>sum</strong> 求和</li><li><strong>avg</strong> 平均值</li><li><strong>max</strong> 最大值</li><li><strong>min</strong> 最小值</li></ul><p>记住：所有的分组函数都是对“某一组”数据进行操作的。</p><p>找出工资总和？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>找出最高工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>找出总人数？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>ename<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>count(*)和count(具体的某个字段)，他们有什么区别？</p><ul><li>count(*):不是统计某个字段中数据的个数，而是统计总记录条数。（和某个字段无关）</li><li>count(comm): 表示统计comm字段中不为NULL的数据总数量。</li></ul><p>分组函数一共5个。<br>分组函数还有另一个名字：多行处理函数。<br>多行处理函数的特点：<strong>输入多行，最终输出的结果是1行。</strong></p><p>分组函数也能组合起来用：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+———-+———-+————-+———-+———-+<br>| count(*) | sum(sal) | avg(sal)    | max(sal) | min(sal) |<br>+———-+———-+————-+———-+———-+<br>|       14 | 29025.00 | 2073.214286 |  5000.00 |   800.00 |<br>+———-+———-+————-+———-+———-+</p></blockquote><p><strong>分组函数自动忽略NULL。</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+————-+<br>| count(comm) |<br>+————-+<br>|           4 |<br>+————-+</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//select sum(comm) from emp where comm is not null; 不需要额外添加这个过滤条件。sum函数自动忽略NULL。</span></code></pre><p>结果：</p><blockquote><p>+———–+<br>| sum(comm) |<br>+———–+<br>|   2200.00 |<br>+———–+</p></blockquote><p>找出工资高于平均工资的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ERROR 1111 (HY000): Invalid use of group function</span></code></pre><p>分析：<br>以上的错误信息：无效地使用了分组函数。<br>原因：SQL语句当中有一个语法规则，==分组函数不可直接使用在where子句当中。<br>why——&gt;因为group by是在where执行之后才会执行的。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>            <span class="token number">5</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">from</span>            <span class="token number">1</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span>            <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span>        <span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>            <span class="token number">4</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>        <span class="token number">6</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>解决：<br>第一步：找出平均工资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+————-+<br>| avg(sal)    |<br>+————-+<br>| 2073.214286 |<br>+————-+</p></blockquote><p>第二步：找出高于平均工资的员工</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2073.214286</span><span class="token punctuation">;</span></code></pre><blockquote><p>+——-+———+<br>| ename | sal     |<br>+——-+———+<br>| JONES | 2975.00 |<br>| BLAKE | 2850.00 |<br>| CLARK | 2450.00 |<br>| SCOTT | 3000.00 |<br>| KING  | 5000.00 |<br>| FORD  | 3000.00 |<br>+——-+———+</p></blockquote><p>以上两步合为一步：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-单行处理函数"><a href="#4-单行处理函数" class="headerlink" title="4.单行处理函数"></a>4.单行处理函数</h2><p>什么是单行处理函数？输入一行，输出一行。</p><p>计算每个员工的年薪？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>comm<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p><strong>重点</strong>：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。<br>使用<strong>ifnull</strong>函数：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>ifnull() 空处理函数？</p><ul><li>ifnull(可能为NULL的数据,被当做什么处理) </li><li>属于单行处理函数</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> comm <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+———+<br>| ename  | comm    |<br>+——–+———+<br>| SMITH  |    0.00 |<br>| ALLEN  |  300.00 |<br>| WARD   |  500.00 |<br>| JONES  |    0.00 |<br>| MARTIN | 1400.00 |<br>| BLAKE  |    0.00 |<br>| CLARK  |    0.00 |<br>| SCOTT  |    0.00 |<br>| KING   |    0.00 |<br>| TURNER |    0.00 |<br>| ADAMS  |    0.00 |<br>| JAMES  |    0.00 |<br>| FORD   |    0.00 |<br>| MILLER |    0.00 |<br>+——–+———+</p></blockquote><h2 id="5-group-by和having"><a href="#5-group-by和having" class="headerlink" title="5.group by和having"></a>5.group by和having</h2><p>group by ： 按照某个字段或者某些字段进行分组。<br>having : having是对分组之后的数据进行再次过滤。<br>案例：找出每个工作岗位的最高薪资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+———–+<br>| max(sal) | job       |<br>+———-+———–+<br>|  3000.00 | ANALYST   |<br>|  1300.00 | CLERK     |<br>|  2975.00 | MANAGER   |<br>|  5000.00 | PRESIDENT |<br>|  1600.00 | SALESMAN  |<br>+———-+———–+</p></blockquote><p><strong>注意</strong>：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。</p><p>并且任何一个分组函数（count sum avg max min）都是在group by语句执行结束之后才会执行的。</p><p>当一条SQL语句没有group by的话，整张表的数据会自成一组。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><p>以上在mysql当中，查询结果是有的，但是结果没有意义，在Oracle数据库当中会报错。语法错误。<br>Oracle的语法规则比MySQL语法规则严谨。<br>记住一个规则：当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</p><p>每个工作岗位的平均薪资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> job<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job<span class="token punctuation">;</span></code></pre><blockquote><p>+———–+————-+<br>| job       | avg(sal)    |<br>+———–+————-+<br>| ANALYST   | 3000.000000 |<br>| CLERK     | 1037.500000 |<br>| MANAGER   | 2758.333333 |<br>| PRESIDENT | 5000.000000 |<br>| SALESMAN  | 1400.000000 |<br>+———–+————-+</p></blockquote><p>多个字段能不能联合起来一块分组？<br>案例：找出每个部门不同工作岗位的最高薪资。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     deptno<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token keyword">from</span>    emp<span class="token keyword">group</span> <span class="token keyword">by</span>    deptno<span class="token punctuation">,</span>job<span class="token punctuation">;</span></code></pre><p>找出每个部门的最高薪资，要求显示薪资大于2900的数据。<br>第一步：找出每个部门的最高薪资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+——–+<br>| max(sal) | deptno |<br>+———-+——–+<br>|  5000.00 |     10 |<br>|  3000.00 |     20 |<br>|  2850.00 |     30 |<br>+———-+——–+</p></blockquote><p>第二步：找出薪资大于2900</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2900</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 这种方式效率低。</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">2900</span> <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 效率较高，建议能够使用where过滤的尽量使用where。</span></code></pre><p>找出每个部门的平均薪资，要求显示薪资大于2000的数据。<br>第一步：找出每个部门的平均薪资</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————-+<br>| deptno | avg(sal)    |<br>+——–+————-+<br>|     10 | 2916.666667 |<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>+——–+————-+</p></blockquote><p>第二步：要求显示薪资大于2000的数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">;</span>    </code></pre><p>where后面不能使用分组函数：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2000</span> <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">-- 错误了。</span></code></pre><p>这种情况只能使用having过滤。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>            <span class="token number">5</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>            <span class="token number">1</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span>            <span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">group</span> <span class="token keyword">by</span>        <span class="token number">3</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>            <span class="token number">4</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>        <span class="token number">6</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(一）</title>
      <link href="2020/10/18/mysql-yi/"/>
      <url>2020/10/18/mysql-yi/</url>
      
        <content type="html"><![CDATA[<p>笔记来自于B站老杜数据库课程，这里主要是整理。</p><h2 id="1-SQL、DB、DBMS及其中关系？"><a href="#1-SQL、DB、DBMS及其中关系？" class="headerlink" title="1.SQL、DB、DBMS及其中关系？"></a>1.SQL、DB、DBMS及其中关系？</h2><p><strong>DB</strong>：DataBase（数据库，数据库实际上是在硬盘上以<strong>文件</strong>的形式存在的）<br><strong>DBMS</strong>：DataBase Management System（数据库管理系统，常见的有：MySQL、Oracle、DB2、Sybase、SqlSever…）<br><strong>SQL</strong>：结构化查询语言，是一门标准通用的语言。标准的SQL语言适合于所有的数据库产品。<br>SQL属于高级语言。只要能看懂英语单词的，写出来的SQL语句，可以读懂什么意思。<br>SQL语句在执行的时候，实际上内部也会先进行编译，然后再执行SQL。（SQL语句的编译有DBMS完成）</p><p>DBMS负责执行SQL语句，通过执行SQL语句来操作DB当中的数据。<br>DBMS–执行–&gt;SQL–操作–&gt;DB</p><h2 id="2-什么是表"><a href="#2-什么是表" class="headerlink" title="2.什么是表"></a>2.什么是表</h2><p>表：table，是<strong>数据库的基本组成单元</strong>，所有的数据都以表格的形式组织，目的是<strong>可读性强</strong>。<br>一个表包括<strong>行</strong>和<strong>列</strong><br>    行：被称为<strong>数据/记录（data）</strong><br>    列：被称为<strong>字段</strong></p><table><thead><tr><th>学号（int）</th><th>姓名（<strong>varchar</strong>）</th></tr></thead><tbody><tr><td>110</td><td>张三</td></tr></tbody></table><p>每一个字段应该包含：<br>      字段名、数据类型、相关的约数</p><h2 id="3-SQL语句分类"><a href="#3-SQL语句分类" class="headerlink" title="3.SQL语句分类"></a>3.SQL语句分类</h2><p><strong>DQL（数据查询语言）</strong>：查询语句，凡是select语句都是DQL。<br><strong>DML（数据操作语言）</strong>：insert、delete、update，对表当中的数据进行增删改。<br><strong>DDL（数据定义语言）</strong>：create、drop、alter，对表结构进行增删改。<br><strong>TCL（事务控制语言）</strong>：commit提交事务，rollback回滚事务。（TCL中的T是Transaction）<br><strong>DCL（数据控制语言）</strong>：grant授权，revoke撤销权限等。</p><h2 id="4、导入数据"><a href="#4、导入数据" class="headerlink" title="4、导入数据"></a>4、导入数据</h2><p>第一步：登录mysql数据库管理系统<br>        dos命令窗口：</p><pre class=" language-mysql"><code class="language-mysql">mysql -uroot -p333</code></pre><p>第二步：查看有哪些数据库</p><pre class=" language-mysql"><code class="language-mysql">show databases;//这个不是SQL语句，属于MySQL的命令。</code></pre><p>结果：</p><blockquote><p> +——————————+<br> |           Database           |<br> +——————————+<br> | information_schema    |<br> | mysql                           |<br> | performance_schema |<br> | test                              |<br> +——————————+</p></blockquote><p>第三步：创建属于我们自己的数据库</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> bjpowernode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个不是SQL语句，属于MySQL的命令。</span></code></pre><p>第四步：使用bjpowernode数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">use</span> bjpowernode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这个不是SQL语句，属于MySQL的命令。</span></code></pre><p>第五步：查看当前使用的数据库中有哪些表？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//(这个不是SQL语句，属于MySQL的命令。)</span></code></pre><p>第六步：初始化数据</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> source D:\course\<span class="token number">05</span><span class="token operator">-</span>MySQL\resources\bjpowernode<span class="token punctuation">.</span>sql</code></pre><p><strong>注意</strong>：数据初始化完成之后，有三张表：</p><blockquote><pre><code>+-----------------------+| Tables_in_bjpowernode |+-----------------------+| dept                  || emp                   || salgrade              |+-----------------------+</code></pre></blockquote><h2 id="5-sql文件"><a href="#5-sql文件" class="headerlink" title="5 .sql文件"></a>5 .sql文件</h2><p>bjpowernode.sql，这个文件以sql结尾，这样的文件被称为“SQL脚本”。什么是SQL脚本呢？<br>当一个文件的扩展名是.sql，并且该文件中编写了大量的SQL语句，我们称这样的文件为SQL脚本。<br><strong>注意</strong>：直接使用source命令可以执行SQL脚本。<br>SQL脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。 </p><h2 id="6-删除数据库"><a href="#6-删除数据库" class="headerlink" title="6.删除数据库"></a>6.删除数据库</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">database</span> bjpowernode<span class="token punctuation">;</span></code></pre><h2 id="7-查看表结构"><a href="#7-查看表结构" class="headerlink" title="7.查看表结构"></a>7.查看表结构</h2><blockquote><p>+———————–+<br>| Tables_in_bjpowernode |<br>+———————–+<br>| dept                  |   (部门表)<br>| emp                   |   (员工表)<br>| salgrade              |   (工资等级表)<br>+———————–+</p></blockquote><p>查看各个表的具体结构</p><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> dept<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————-+——+—–+———+——-+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+——–+————-+——+—–+———+——-+<br>| DEPTNO | int(2)      | NO   | PRI | NULL    |       |        部门编号<br>| DNAME  | varchar(14) | YES  |     | NULL    |       |        部门名称<br>| LOC    | varchar(13) | YES  |     | NULL    |       |        部门位置<br>+——–+————-+——+—–+———+——-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+———-+————-+——+—–+———+——-+<br>| Field    | Type        | Null | Key | Default | Extra |<br>+———-+————-+——+—–+———+——-+<br>| EMPNO    | int(4)      | NO   | PRI | NULL    |       |    员工编号<br>| ENAME    | varchar(10) | YES  |     | NULL    |       |    员工姓名<br>| JOB      | varchar(9)  | YES  |     | NULL    |       |    工作岗位<br>| MGR      | int(4)      | YES  |     | NULL    |       |    上级领导编号<br>| HIREDATE | date        | YES  |     | NULL    |       |    入职日期<br>| SAL      | double(7,2) | YES  |     | NULL    |       |    月薪<br>| COMM     | double(7,2) | YES  |     | NULL    |       |    补助/津贴<br>| DEPTNO   | int(2)      | YES  |     | NULL    |       |    部门编号<br>+———-+————-+——+—–+———+——-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> salgrade<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+———+——+—–+———+——-+<br>| Field | Type    | Null | Key | Default | Extra |<br>+——-+———+——+—–+———+——-+<br>| GRADE | int(11) | YES  |     | NULL    |       |        等级<br>| LOSAL | int(11) | YES  |     | NULL    |       |        最低薪资<br>| HISAL | int(11) | YES  |     | NULL    |       |        最高薪资<br>+——-+———+——+—–+———+——-+</p></blockquote><h2 id="8-表中的数据"><a href="#8-表中的数据" class="headerlink" title="8.表中的数据"></a>8.表中的数据</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+——–+———–+——+————+———+———+——–+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+——-+——–+———–+——+————+———+———+——–+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+——-+——–+———–+——+————+———+———+——–+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————+———-+<br>| DEPTNO | DNAME      | LOC      |<br>+——–+————+———-+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+——–+————+———-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span></code></pre><blockquote><p>+——-+——-+——-+<br>| GRADE | LOSAL | HISAL |<br>+——-+——-+——-+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+——-+——-+——-+</p></blockquote><h2 id="9-常用命令"><a href="#9-常用命令" class="headerlink" title="9.常用命令"></a>9.常用命令</h2><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看当前使用的是哪个数据库</span></code></pre><blockquote><p>+————-+<br>| database()  |<br>+————-+<br>| bjpowernode |<br>+————-+</p></blockquote><pre class=" language-sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查看mysql的版本号。</span></code></pre><blockquote><p>+———–+<br>| version() |<br>+———–+<br>| 5.5.36    |<br>+———–+</p></blockquote><p>\c   命令，结束一条语句。</p><p>exit 命令，退出mysql。</p><h2 id="10-查看创建表的语句"><a href="#10-查看创建表的语句" class="headerlink" title="10.查看创建表的语句"></a>10.查看创建表的语句</h2><pre class=" language-sql"><code class="language-sql">    <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">;</span></code></pre><h2 id="11-DQL"><a href="#11-DQL" class="headerlink" title="11.DQL"></a>11.DQL</h2><h3 id="11-1-简单的查询语句"><a href="#11-1-简单的查询语句" class="headerlink" title="11-1.简单的查询语句"></a>11-1.简单的查询语句</h3><p><strong>语法格式</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>     表名<span class="token punctuation">;</span></code></pre><p>提示：</p><ol><li>任何一条SQL语句以“;”结尾。</li><li>SQL语句不区分大小写。</li></ol><p>特点：</p><ul><li>查询列表可以是：表中字段，常量值，表达式，函数。</li><li>查询的结果是一个虚拟的表格。</li></ul><p>例：<br>查询员工的年薪？<strong>（字段可以参与数学运算）</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | sal * 12 |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p></blockquote><p>给查询结果的列重命名？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">as</span><span class="token operator">*</span><span class="token operator">*</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- as可省略，空格代替</span></code></pre><p>别名中有中文？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">as</span> 年薪 <span class="token keyword">from</span> emp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token operator">*</span> <span class="token number">12</span> <span class="token keyword">as</span> <span class="token string">'年薪'</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | 年薪        |<br>+——–+———-+<br>| SMITH  |  9600.00 |<br>| ALLEN  | 19200.00 |<br>| WARD   | 15000.00 |<br>| JONES  | 35700.00 |<br>| MARTIN | 15000.00 |<br>| BLAKE  | 34200.00 |<br>| CLARK  | 29400.00 |<br>| SCOTT  | 36000.00 |<br>| KING   | 60000.00 |<br>| TURNER | 18000.00 |<br>| ADAMS  | 13200.00 |<br>| JAMES  | 11400.00 |<br>| FORD   | 36000.00 |<br>| MILLER | 15600.00 |<br>+——–+———-+</p></blockquote><p><strong>PS</strong>：标准SQL语句中要求字符串使用单引号括起来。虽然MySQL支持双引号，尽量别用。</p><p>查询所有字段</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 实际开发中不建议使用*，效率较低。</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  </code></pre><p>去重：<br>distinct关键字</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> ename <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>==distinct只能出现在所有字段的最前面。此时后面所有的字段联合起来去重==</p><p>统计岗位的数量？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> job<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span></code></pre><p>‘+’号作用<br>MySQL中的‘+’号作用，只有一个功能，就是==运算符==</p><ul><li>如果两个操作数都是数值型，则做加法运算；</li><li>如果其中一方为字符型，试图将字符型数值转换成数值型，如果转换成功，则继续做加法运算，如果转换失败，则将字符型数值转换为0；</li><li>只要其中一方为null，结果肯定为null。</li><li>若要连接/拼接两个字符，则要使用<strong>函数concat</strong>，例：concat(‘你好’，‘MySQL’);</li></ul><h3 id="11-2-条件查询"><a href="#11-2-条件查询" class="headerlink" title="11-2.条件查询"></a>11-2.条件查询</h3><p><strong>语法格式</strong>：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     字段<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>    表名<span class="token keyword">where</span>    条件<span class="token punctuation">;</span></code></pre><p>==执行顺序：先from，然后where，最后select.==</p><p>查询工资等于5000的员工姓名？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    sal <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——-+<br>| ename |<br>+——-+<br>| KING  |<br>+——-+</p></blockquote><p>查询SMITH的工资？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    ename <span class="token operator">=</span> <span class="token string">'SMITH'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字符串使用单引号括起来。</span></code></pre><p>结果：</p><blockquote><p>+——–+<br>| sal    |<br>+——–+<br>| 800.00 |<br>+——–+    </p></blockquote><p>找出工资高于3000的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>     ename<span class="token punctuation">,</span>sal<span class="token keyword">from</span>    emp<span class="token keyword">where</span>    sal <span class="token operator">></span> <span class="token number">3000</span><span class="token punctuation">;</span></code></pre><p>找出工资不等于3000的？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span>    ename<span class="token punctuation">,</span>salfom    emp<span class="token keyword">where</span>    sal <span class="token operator">&lt;></span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//sal != 3000也可以</span></code></pre><p>找出工资在1100和3000之间的员工，包括1100和3000？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span>  <span class="token number">1100</span> <span class="token operator">and</span> sal <span class="token operator">&lt;</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运用到了and</span><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">1100</span> <span class="token operator">and</span> <span class="token number">3000</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// between...and...是闭区间 [1100 ~ 3000]</span></code></pre><p>between…and…在使用的时候必须左小右大。<br>between…and…除了可以使用在数字方面之外，还可以使用在字符串方面。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">between</span> <span class="token string">'A'</span> <span class="token operator">and</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 左闭右开</span></code></pre><p>结果：</p><blockquote><p>+——-+<br>| ename |<br>+——-+<br>| ALLEN |<br>| BLAKE |<br>| ADAMS |<br>+——-+</p></blockquote><p>找出哪些人津贴为NULL？</p><ul><li>在数据库当中NULL不是一个值，代表什么也没有，为空。</li><li>空不是一个值，不能用等号衡量。</li><li>必须使用 is null或者is not null</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———+——+<br>| ename  | sal     | comm |<br>+——–+———+——+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+——–+———+——+</p></blockquote><p>若使用‘=’连接判断</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">=</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>Empty set (0.00 sec)   //出现错误</p></blockquote><p>找出哪些人津贴不为NULL？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———+———+<br>| ename  | sal     | comm    |<br>+——–+———+———+<br>| ALLEN  | 1600.00 |  300.00 |<br>| WARD   | 1250.00 |  500.00 |<br>| MARTIN | 1250.00 | 1400.00 |<br>| TURNER | 1500.00 |    0.00 |<br>+——–+———+———+</p></blockquote><p>找出哪些人没有津贴？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> comm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运用到了or</span></code></pre><blockquote><p>+——–+———+——+<br>| ename  | sal     | comm |<br>+——–+———+——+<br>| SMITH  |  800.00 | NULL |<br>| JONES  | 2975.00 | NULL |<br>| BLAKE  | 2850.00 | NULL |<br>| CLARK  | 2450.00 | NULL |<br>| SCOTT  | 3000.00 | NULL |<br>| KING   | 5000.00 | NULL |<br>| TURNER | 1500.00 | 0.00 |<br>| ADAMS  | 1100.00 | NULL |<br>| JAMES  |  950.00 | NULL |<br>| FORD   | 3000.00 | NULL |<br>| MILLER | 1300.00 | NULL |<br>+——–+———+——+</p></blockquote><p>in,not in,and和or联合使用</p><p>找出工作岗位是MANAGER和SALESMAN的员工？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">=</span> <span class="token string">'MANAGER'</span> <span class="token operator">or</span> job <span class="token operator">=</span> <span class="token string">'SALESMAN'</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——–+———-+<br>| ename  | job      |<br>+——–+———-+<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| JONES  | MANAGER  |<br>| MARTIN | SALESMAN |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| TURNER | SALESMAN |<br>+——–+———-+</p></blockquote><p>in等同于or</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job <span class="token operator">in</span><span class="token punctuation">(</span><span class="token string">'SALESMAN'</span><span class="token punctuation">,</span> <span class="token string">'MANAGER'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// in后面的值不是区间，是具体的值。</span></code></pre><p>not in: 不在这几个值当中。</p><p>and和or联合起来使用：找出薪资大于1000的并且部门编号是20或30部门的员工。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token number">1000</span> <span class="token operator">and</span> <span class="token punctuation">(</span>deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>PS</strong>：当运算符的优先级不确定的时候加小括号。</p><p>在模糊查询当中，必须掌握两个特殊的符号，一个是 % ，一个是 _ </p><ul><li>% 代表任意多个字符</li><li>_ 代表任意1个字符</li></ul><p>找出名字当中含有O的?</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%O%'</span><span class="token punctuation">;</span></code></pre><p>结果：</p><blockquote><p>+——-+<br>| ename |<br>+——-+<br>| JONES |<br>| SCOTT |<br>| FORD  |<br>+——-+</p></blockquote><p>找出名字中第二个字母是A的？</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'_A%'</span><span class="token punctuation">;</span></code></pre><p>找出名字中有下划线的？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- '\'代表转义字符</span><span class="token keyword">select</span> name <span class="token keyword">from</span> t_user <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%\_%'</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础</title>
      <link href="2020/10/17/javase-ji-chu/"/>
      <url>2020/10/17/javase-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="JDK、JRE、JVM"><a href="#JDK、JRE、JVM" class="headerlink" title="JDK、JRE、JVM"></a>JDK、JRE、JVM</h2><ul><li>JDK：Java开发工具箱</li><li>JRE：java运行环境</li><li>JVM：java虚拟机</li></ul><p>JDK包括JRE，JRE包括JVM。</p><p>JVM是不能独立安装的，JRE和JDK都是可以独立安装的。有单独的JDK安装包，也有单独的JRE安装包，没有单独的JVM安装包。</p><p>安装JDK的时候，JRE就自动安装了，同时JRE内部的JVM也就自动安装了。安装JRE的时候，JVM也就自动安装了。</p><p><strong>问题1</strong>：假设你在软件公司开发了一个新的软件，现在要去客户那边给客户把项目部署一下，把项目跑起来，你需要安装JDK吗？</p><p><strong>答</strong>：只需要安装JRE就行了。JRE体积很小，安装非常便捷快速。</p><p><strong>问题2</strong>：为什么安装JDK的时候会自带一个JRE？</p><p><strong>答</strong>：因为java程序员开发完程序之后，要测试这个程序，让这个程序运行起来，需要JRE。所以JDK安装的时候内部自带一个JRE。</p><h2 id="Java的加载与执行（理论比较重要）"><a href="#Java的加载与执行（理论比较重要）" class="headerlink" title="Java的加载与执行（理论比较重要）"></a>Java的加载与执行（理论比较重要）</h2><p>java程序非常重要的两个阶段：</p><ul><li>编译阶段</li><li>运行阶段</li></ul><p><strong>注意</strong>：java程序员直接编写的java代码（普通文本）是无法执行被JVM识别的。java程序员编写的java代码这种普通文本必须经过一个编译，将这个“普通文本代码”变成“字节码”，JVM能够识别“字节码”。java代码这种普通文本变成字节码的过程，被称为：编译。</p><p><strong>问题1</strong>：编译阶段和运行阶段可以在不同的操作系统上完成吗？</p><p><strong>答</strong>：在windows上编译，编译之后生成了“字节码”，把“字节码”放到linux上运行，完全可以。因为Java是跨平台的，可以做到一次编写到处运行。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="关于计算机存储单位"><a href="#关于计算机存储单位" class="headerlink" title="关于计算机存储单位"></a>关于计算机存储单位</h3><p>计算机只能识别二进制。（1001101100…）</p><p>1字节 = 8bit（8比特）即 1byte = 8bit，1bit就是一个1或0。</p><blockquote><p>1KB = 1024byte<br>1MB = 1024KB<br>1GB = 1024MB<br>1TB = 1024GB</p></blockquote><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>“面向对象”(Object Oriented)是一种以对象为中心的编程思想，简称 OO。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><p>面向对象具有三大特征：</p><ul><li>① 封装（Encapsulation） </li><li>② 继承（Inheritance） </li><li>③ 多态（Polymorphism）</li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><pre><code>[修饰符] class 类名 &#123;    类体 = 属性 + 方法&#125;</code></pre><p> 比如：定义一个学生类</p><pre><code>public class Student&#123;    int no;    String name;    int age;    boolean sex;&#125;</code></pre><p>以上程序当中 no、name、age、sex 都是属性，它们都是成员变量中的实例变量，所谓实例变量就是对象级别的变量，这些属性要想访问，必须先创建对象才能访问，不能直接通过类去访问，因为每一个学生的学号都是不一样的。没有学生对象，谈何学号！ </p><h2 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h2><h3 id="知识框架"><a href="#知识框架" class="headerlink" title="知识框架"></a>知识框架</h3><p><img src="/2020/10/17/javase-ji-chu/1.png" alt="对象的创建和使用知识框架"></p><h3 id="对象的创建和使用-1"><a href="#对象的创建和使用-1" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>一个类是可以创建多个对象的，语法格式：new 类名()。</p><p>比如：</p><pre><code>public class StudentTest &#123;    public static void main(String[] args) &#123;        //创建一个学生对象        Student s1 = new Student();        //再创建一个学生对象        Student s2 = new Student();        //以上代码其实和这行代码差不多        int i = 10;    &#125;&#125;</code></pre><p>对于 Student s1 = new Student() 来说，其中 Student 是一种<strong>引用数据类型</strong>，s1 是变量名，new Student() 执行之后是一个 Student 类型的<strong>对象</strong>。 （s1与new Student() 的概念要分清），具体见下图：</p><p><img src="/2020/10/17/javase-ji-chu/2.png" alt="引用与对象"></p><h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><pre><code>public class StudentTest &#123;    public static void main(String[] args) &#123;        //创建一个学生对象        Student s1 = new Student();        //以上代码其实和这行代码差不多        int i = 10;        int no1 = s1.no;        System.out.println(&quot;学号：&quot; + no1);        String name1 = s1.name;        System.out.println(&quot;姓名：&quot; + name1);        int age1 = s1.age;        System.out.println(&quot;年龄：&quot; + age1);        boolean sex1 = s1.sex;        System.out.println(&quot;性别：&quot;+ sex1);    &#125;&#125;</code></pre><p>以上程序中并没有给学号赋值，在 java 语言当中，当实例变量没有手动赋值，在创建对象的时候，也就是说在 new 的时候，系统会对实例变量默认赋值，它们的默认值请参考下表： </p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>char</td><td>\u0000</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><h3 id="深层理解"><a href="#深层理解" class="headerlink" title="深层理解"></a>深层理解</h3><h4 id="java虚拟机（JVM）内存管理"><a href="#java虚拟机（JVM）内存管理" class="headerlink" title="java虚拟机（JVM）内存管理"></a>java虚拟机（JVM）内存管理</h4><p><img src="/2020/10/17/javase-ji-chu/3.png" alt="JVM内存管理图"></p><p>① 程序计数器： </p><ul><li>概念：可以看做当前线程所执行的字节码的行号指示器</li><li>特点：线程私有的内存 </li></ul><p>② java 虚拟机栈（重点）： </p><ul><li>概念：描述的是 java 方法执行的内存模型。（每个方法在执行的时候会创建一个<strong>栈帧</strong>，用于存储<strong>局部变量</strong>表，操作数栈，动态链接，方法出口等信息。每个方法从调用直至完成的过程，就对应一个栈帧从入栈到出栈的过程。） </li><li>特点 ：线程私有，生命周期和线程相同 。这个区域会出现两种异常：StackOverflowError 异常： 若线程请求的深度大于虚拟机所允许的深度。OutOfMemoryError 异常：若虚拟机可以动态扩展，如果扩展是无法申请到足够的内存。 </li></ul><p>③ 本地方法栈： </p><ul><li>概念：它与虚拟机栈所发挥的作用是相似的，区别是 java 虚拟机栈为执行 java 方法服务，而本地方法栈是为本地方法服务。 </li><li>特点：线程私有，也会抛出两类异常：StackOverflowError 和OutOfMemoryError。</li></ul><p>④ java 堆（重点）： </p><ul><li>概念：是被所有线程共享的一块区域，在虚拟机启动时创建。</li><li>特点：线程共享，存放的是<strong>对象实例</strong>（所有的对象实例和数组），GC 管理的主要区域。可以处于物理上不连续的内存空间。 </li></ul><p>⑤ 方法区（重点）： </p><ul><li>概念：存储已被虚拟机加载的<strong>类信息、常量、静态变量</strong>，即时编译器编译后的代码等数据。</li><li>特点：线程共享的区域，抛出异常 OutOfMemory 异常：当方法区无法满足内存分配需求的时候。</li></ul><p>目前，java虚拟机有三块主要的内存空间，分别是“虚拟机栈（后面简栈）”、“方法区”、“堆区”。</p><ul><li>方法区：存储类的信息</li><li>栈：存储方法执行时的栈帧以及<strong>局部变量</strong></li><li>堆：主要存储 new 出来的对象，以及对象内部的<strong>实例变量</strong></li></ul><p><img src="/2020/10/17/javase-ji-chu/4.png" alt="JVM内存管理简图"></p><p><strong>对象和引用的区别</strong>：</p><ol><li>对象是通过 new 出来的，在<strong>堆</strong>内存中存储</li><li>引用是：但凡是变量，并且该变量中保存了<strong>内存地址</strong>指向<strong>堆</strong>内存当中的对象的。</li></ol><h3 id="构造方法Constructor"><a href="#构造方法Constructor" class="headerlink" title="构造方法Constructor"></a>构造方法Constructor</h3><p>构造方法是类中特殊的方法，通过调用构造方法来完成对象的创建，以及对象属性的初始化操作。 </p><pre><code>[修饰符列表] 构造方法名(形式参数列表)&#123;    构造方法体;&#125;</code></pre><p><strong>注意</strong>：</p><ul><li>① <strong>构造方法名和类名一致</strong></li><li>② 构造方法用来创建对象，以及完成属性初始化操作</li><li>③ 构造方法返回值类型不需要写，写上就报错，包括 void 也不能写</li><li>④ 构造方法的返回值类型实际上是当前类的类型</li><li>⑤ 一个类中可以定义多个构造方法，这些构造方法构成方法重载</li></ul><p>当一个类没有显示的定义任何构造方法的时候，系统默认提供无参数构造方法，当显示的定义构造方法之后，系统则不再提供无参数构造方法。建议程序员<strong>手动</strong>的将<strong>无参数构造方法写上</strong>，因为不写无参数构造方法的时候，这个默认的构造方法很有可能就不存在了。</p><p>构造方法虽然在返回值类型方面不写任何类型，但它执行结束之后实际上会<strong>返回该对象在堆内存当中的内存地址</strong>，这个时候可以定义变量接收对象的内存地址，这个变量就是之前所学的“引用”。</p><p><strong>构造方法的作用是专门用来创建对象同时给属性赋值的</strong>。</p><h3 id="空指针异常"><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h3><p>java.lang.NullPointerException 被称为空指针异常。</p><p><img src="/2020/10/17/javase-ji-chu/5.png" alt="Balloon ball = new Balloon;"></p><p><img src="/2020/10/17/javase-ji-chu/6.png" alt="ball = null;"></p><p>总之，当一个“空的引用”去访问“对象相关/实例相关”数据的时候，此时一定会发生空指针异常。</p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="知识框架-1"><a href="#知识框架-1" class="headerlink" title="知识框架"></a>知识框架</h3><p><img src="/2020/10/17/javase-ji-chu/7.png" alt="封装的知识框架"></p><h3 id="封装的理解"><a href="#封装的理解" class="headerlink" title="封装的理解"></a>封装的理解</h3><blockquote><p>封装之后就形成了独立实体，独立实体可以在不同的环境中重复使用，显然封装可以降低程序的耦合度，提高程序的扩展性，以及重用性或复用性。另外封装可以隐藏内部实现细节，站在对象外部是看不到内部复杂结构的，对外只提供了简单的安全的操作入口，所以封装之后，实体更安全了。</p></blockquote><h3 id="如何封装"><a href="#如何封装" class="headerlink" title="如何封装"></a>如何封装</h3><ol><li><p>使用java中的修饰符：</p><ul><li><p>private，私有，私有数据只能在<strong>本类</strong>中访问</p></li><li></li></ul><pre><code>public class MobilePhone &#123;    //电压：手机正常电压在 3~5V    private double voltage;&#125;    </code></pre></li><li><p>对外提供公开的访问入口，让外部程序统一通过这个入口去访问数据。这两个方法通常被称为 <strong>set 方法</strong>和<strong>get 方法</strong>。</p></li><li><pre><code>public class MobilePhone &#123;    //电压：手机正常电压在 3~5V    private double voltage;    public MobilePhone()&#123;&#125;    public void setVoltage(double _voltage)&#123;        if(_voltage &lt; 3 || _voltage &gt; 5)&#123;        //当电压低于 3V或者高于 5V时抛出异常，程序则终止        throw new RuntimeException(&quot;电压非法，请爱护手机！&quot;);        &#125;        //程序如果能执行到此处说明以上并没有发生异常，电压值合法        voltage = _voltage;    &#125;    public double getVoltage()&#123;        return voltage;    &#125;&#125;</code></pre></li></ol><h2 id="this和static"><a href="#this和static" class="headerlink" title="this和static"></a>this和static</h2><h3 id="知识框架-2"><a href="#知识框架-2" class="headerlink" title="知识框架"></a>知识框架</h3><p><img src="/2020/10/17/javase-ji-chu/8.png" alt="this和static知识框架"></p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><p>对于static，看看这篇文章：<a href="https://blog.csdn.net/qq_44543508/article/details/102736466">深入理解static关键字</a></p><p>static 是 java 语言中的关键字,可以用来修饰变量、方法、代码块等</p><ol><li>翻译为 “ 静态的 ” 。</li><li>所有static关键字修饰的都是<strong>类相关</strong>的，<strong>类级别</strong>的。</li><li>所有static修饰的，都是采用<strong>“ 类名. ”</strong>的方式访问，不需要创建对象。</li><li>static修饰的变量：静态变量。</li><li>static修饰的方法：静态方法。</li></ol><h4 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h4><ol><li><p>变量根据声明的位置进行划分：</p><ul><li>局部变量：方法体中声明，方法体中访问，方法结束之后局部变量内存就释放了，内存方面局部变量存储在<strong>栈</strong>当中。</li><li>成员变量：类体中定义。</li></ul></li><li><p>成员变量又可以分为：实例变量，静态变量</p><ul><li>静态变量：使用了 static 关键字，存储在<strong>方法区</strong>当中，在<strong>类加载</strong>时初始化</li><li>实例变量：未使用 static 关键字，属于<strong>对象</strong>级别，存储在<strong>堆内存</strong>当中，在<strong>构造方法执行过程</strong>中初始化</li></ul><p><img src="/2020/10/17/javase-ji-chu/9.png" alt="Static1"></p><p><strong>注意</strong>：实例相关的，必须先创建<strong>对象</strong>，通过<strong>引用</strong>，才能访问，否则可能会出现空指针异常；静态的，不需要对象的参与，直接通过<strong>“ 类名 ”</strong>即可访问，没有空指针异常的发生。</p></li><li><p>何时使用？</p><p>观看以下Chinese类案例：</p><p><img src="/2020/10/17/javase-ji-chu/12.png" alt="Chinese类"></p><p><strong>PS</strong>：只要是方法，不管是静态方法、实例方法，还是构造方法，它们在运行的时候都需要压栈。</p><p>以下是未使用静态变量时的内存图：</p><p><img src="/2020/10/17/javase-ji-chu/10.png" alt="Static2"></p><p><strong>分析</strong>：“中国人类”创建的所有“中国人对象”，“国籍”都是“中国”，不随对象的改变而改变，如果定义为实例变量的话，就会浪费大量堆内存空间。</p><p>静态变量在类加载时初始化，不需要new对象，静态变量的空间就开出来了。静态变量存储在方法区：</p><pre><code>static String country = “中国”；</code></pre><p>以下则是使用了静态变量时的内存图：</p><p><img src="/2020/10/17/javase-ji-chu/11.png" alt="Static3"></p><p><strong>分析</strong>：建议将“国籍”属性定义为<strong>类级别</strong>的属性，声明为<strong>静态变量</strong>，上升为“整个族”的数据，这样的变量不需要创建对象直接使用“类名”即可访问。</p></li></ol><p><strong>注意</strong>：静态的（static）也可以使用<strong>引用</strong>访问，但是建议使用<strong>类名</strong>访问。引用如果出现<strong>空指针</strong>，仍然可以访问静态的，不会出现<strong>空指针异常</strong>。<strong>空指针异常</strong>只有出现在<strong>空引用</strong>访问<strong>实例</strong>相关的，才会出现。</p><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>对于静态代码块，详情点击：<a href="https://blog.csdn.net/qq_44543508/article/details/102593419">Static静态代码块以及各代码块之间的执行顺序</a></p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>语法格式：</p><pre><code>类&#123;    //静态代码块    static&#123;        java 语句;    &#125;&#125;</code></pre><p>静态代码块在<strong>类加载</strong>时执行，并且<strong>只执行一次</strong>。静态代码块实际上是 java 语言为程序员准备的一个特殊的时刻，这个时刻就是<strong>类加载时刻</strong>。</p><p>比如：</p><pre><code>public class StaticTest01 &#123;    //静态代码块    static&#123;        System.out.println(2);    &#125;    //静态代码块    static&#123;        System.out.println(1);    &#125;    //main 方法    public static void main(String[] args) &#123;        System.out.println(&quot;main execute!&quot;);    &#125;    //静态代码块    static&#123;        System.out.println(0);    &#125;&#125;</code></pre><p>运行结果：</p><blockquote><p>2<br>1<br>0<br>main execute！</p></blockquote><p>静态代码块遵循自上而下的顺序依次执行。另外静态代码块当中的代码在 main 方法执行之<strong>前</strong>执行。</p><p>实例：</p><pre><code>public class StaticTest02 &#123;    int i = 100;    static&#123;        System.out.println(i);    &#125;&#125;        </code></pre><p>运行结果：</p><blockquote><p>错误：无法从静态上下文中引用非静态变量 i<br>​    System.out.println(i);</p></blockquote><p>运行结果报错，原因：i 变量是实例变量，实例变量必须先创建对象才能访问，静态代码块在类加载时执行，这个时候对象还没有创建呢，所以 i 变量在这里是不能这样访问的。 可以考虑将实例变量 i 变为静态变量。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><pre><code>public class Customer &#123;    private String name;    public Customer()&#123;    &#125;    public Customer(String _name)&#123;        name = _name;    &#125;    public void setName(String _name)&#123;        name = _name;    &#125;    public String getName()&#123;        return name;    &#125;&#125;public class CustomerTest &#123;    public static void main(String[] args) &#123;        Customer c1 = new Customer(&quot;张三&quot;);        Customer c2 = new Customer(&quot;李四&quot;);    &#125;&#125;</code></pre><p><img src="/2020/10/17/javase-ji-chu/this%E5%85%B3%E9%94%AE%E5%AD%97.png" alt="this关键字"></p><p>this 可以看做一个变量，它是一个引用，存储在 Java 虚拟机<strong>堆内存</strong>的对象内部，this 这引用保存了当前对象的内存地址指向自身。</p><h4 id="this使用在实例方法"><a href="#this使用在实例方法" class="headerlink" title="this使用在实例方法"></a>this使用在实例方法</h4><blockquote><p>this 无法在静态 static 的方法中，static 方法在调用的时候<strong>不需要</strong>创建对象，直接采用 “ 类名. ” 的方式调用，也就是说，是不需要 “ 当前对象 ” 参与。而 this代表的就是 “ 当前对象 ” 。</p></blockquote><p>this 使用在实例方法当中，代表 “ 当前对象 ” 。</p><h4 id="this使用在构造方法"><a href="#this使用在构造方法" class="headerlink" title="this使用在构造方法"></a>this使用在构造方法</h4><p>this 使用在构造方法<strong>第一行</strong>，通过当前构造方法调用本类当中其他的构造方法，其目的是代码复用。</p><p>语法：</p><pre><code>this(实际参数列表);</code></pre><p>实例：</p><pre><code>public class Date &#123;    private int year;    private int month;    private int day;    //业务要求，默认创建的日期为 1970 年 1 月 1 日    public Date()&#123;        this(1970 , 1, 1);    &#125;    public Date(int year,int month,int day)&#123;        this.year = year;        this.month = month;        this.day = day;    &#125;    //set和get方法略...&#125;</code></pre><h2 id="继承（Inheritance）"><a href="#继承（Inheritance）" class="headerlink" title="继承（Inheritance）"></a>继承（Inheritance）</h2><p>继承看一看这篇文章：<a href="https://blog.csdn.net/qq_44543508/article/details/102375196">java继承从“我爸是李刚”讲起</a></p><h3 id="知识框架-3"><a href="#知识框架-3" class="headerlink" title="知识框架"></a>知识框架</h3><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>继承时子类继承父类的特征和行为，使得子类对象（实例）具有父类的属性，或子类从父类继承方法，使得子类具有与父类相同的行为。所以继承符合的<strong>关系</strong>：<strong>is-a</strong>。</p><h3 id="如何继承"><a href="#如何继承" class="headerlink" title="如何继承"></a>如何继承</h3><p>语法格式：</p><pre><code>class 类名 extends 父类名&#123;    类体;&#125;</code></pre><p>实例：银行账户和信用账户（信用账户具有银行账户的性质）</p><pre><code>public class Account &#123; //银行账户类    //账号    private String actno;    //余额    private double balance;    //账号和余额的 set 和 get 方法    public String getActno() &#123;        return actno;        &#125;    public void setActno(String actno) &#123;        this.actno = actno;    &#125;    public double getBalance() &#123;        return balance;    &#125;    public void setBalance(double balance) &#123;        this.balance = balance;    &#125;&#125;    public class CreditAccount extends Account&#123; //信用账户类    //信誉度（特有属性）    private double credit;    //信誉度的 set 和 get 方法    public double getCredit() &#123;        return credit;    &#125;    public void setCredit(double credit) &#123;        this.credit = credit;    &#125;&#125;public class AccountTest &#123;    public static void main(String[] args) &#123;        CreditAccount act = new CreditAccount();        act.setActno(&quot;111111111&quot;);        act.setBalance(9000.0);        System.out.println(act.getActno() + &quot;信用账户，余额&quot; + act.getBalance() + &quot;元&quot;);    &#125;&#125;</code></pre><p>有了<strong>继承</strong>，才衍生出<strong>方法的覆盖</strong>和<strong>多态</strong>。</p><h3 id="继承的相关特性"><a href="#继承的相关特性" class="headerlink" title="继承的相关特性"></a>继承的相关特性</h3><ul><li>① B类继承 A类，则称 A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。</li><li>② java 中的继承只支持<strong>单继承</strong>，不支持多继承。</li><li>③ 虽然 java 中不支持多继承，但有的时候会产生<strong>间接继承</strong>的效果。</li><li>④ java 中规定，子类继承父类，除<strong>构造方法</strong>和被 <strong>private 修饰的数据不能继承</strong>外，剩下都可以继承。 <strong>注意</strong>：父类的 private 修饰的属性不能再子类中<strong>直接</strong>访问，可以间接访问。</li></ul><h3 id="测试继承自Object类的方法"><a href="#测试继承自Object类的方法" class="headerlink" title="测试继承自Object类的方法"></a>测试继承自Object类的方法</h3><p>以下是Object类的部分源代码：</p><p><img src="/2020/10/17/javase-ji-chu/13.png" alt="Object类中toString方法源代码"></p><p><strong>注意</strong>：</p><p><img src="/2020/10/17/javase-ji-chu/14.png" alt="native——C++底层"></p><p>尝试调用该方法：</p><pre><code>public class ExtendsTest&#123;    public static void main(String[] args) &#123;        ExtendsTest et = new ExtendsTest();        String s = et.toString();        System.out.println(s);    &#125;&#125;</code></pre><p>运行结果：</p><blockquote><p>ExtendsTest@15db9742</p><p>等同对象在堆内存的内存地址（经过哈希算法）</p></blockquote><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>难点：类和类继承之后的代码执行顺序</p><pre><code>public class Test &#123;    public static void main(String[] args) &#123;        new H2();    &#125;&#125;class H1&#123;       //父类代码块    &#123;            System.out.println(&quot;父类代码块&quot;);//--3    &#125;    public H1()&#123;        System.out.println(&quot;父类构造&quot;);//--4    &#125;        static&#123;        System.out.println(&quot;父类静态代码块&quot;);//--1    &#125;&#125;class H2 extends H1&#123;    static&#123;        System.out.println(&quot;子类静态代码块&quot;);//--2    &#125;    //子类代码块    &#123;        System.out.println(&quot;子类代码块&quot;);//--5    &#125;    public H2()&#123;        System.out.println(&quot;子类构造&quot;);//--6    &#125;&#125;</code></pre><blockquote><p>分析：<br>子类 H2 继承 H1，new H2()执行的时候，会先进行类加载，先加载 H2 的父类 H1，所以 H1 当中的静态代码块先执行，然后再执行 H2 中的静态代码块，静态代码块执行结束之后，不会马上执行构造方法，代码块会先执行。Java 中有一条规则：子类构造方法执行前先执行父类的构造方法。所以父类 H1 的代码块先执行，再执行 H1 的构造方法，然后再执行 H2 的代码块，最后执行 H2 的构造方法。 </p></blockquote><h3 id="println-方法"><a href="#println-方法" class="headerlink" title="println()方法"></a>println()方法</h3><blockquote><p>System.out.println(“Hello”);</p></blockquote><p>System.out中，out后面没有小括号，说明out是变量名。另外System是一个类名，直接使用System.out，说明out是一个<strong>静态变量</strong>。System.out返回一个对象，然后采用“对象.”的方式访问println方法。</p><p>类比例子：</p><pre><code>public class Test&#123;    //静态变量    static Student stu = new Student();    //程序入口    public static void main(String[] args)&#123;        Test.stu.exam();    &#125;&#125;class Student&#123;    public void exam()&#123;        System.out.println(&quot;考试了！&quot;);    &#125;&#125;</code></pre><h2 id="方法覆盖和多态"><a href="#方法覆盖和多态" class="headerlink" title="方法覆盖和多态"></a>方法覆盖和多态</h2><h3 id="知识框架-4"><a href="#知识框架-4" class="headerlink" title="知识框架"></a>知识框架</h3><h3 id="方法覆盖（Override）"><a href="#方法覆盖（Override）" class="headerlink" title="方法覆盖（Override）"></a>方法覆盖（Override）</h3><p>以下是一个简单的程序：</p><pre><code>public class Test&#123;    public static void main(String[] args)&#123;        Person p = new Person();        Chinese c = new Chinese();        American a = new American();        p.eat();        c.eat();        a.eat();    &#125;&#125;class Person&#123;    public void eat()&#123;        System.out.println(&quot;我要吃饭！&quot;);    &#125;&#125;class Chinese extends Person&#123;    public void eat()&#123;        System.out.println(&quot;我要吃中餐！&quot;);    &#125;&#125;class American extends Person&#123;    public void eat()&#123;        System.out.println(&quot;我要吃西餐！&quot;);    &#125;&#125;</code></pre><p>运行结果：</p><blockquote><p>我要吃饭！<br>我要吃中餐！<br>我要吃西餐！</p></blockquote><p>以上的程序中，Chinese和American类继承了Person类中的eat方法，并进行了<strong>覆盖</strong>。之后，子类对象调用了覆盖之后的方法。</p><h4 id="构成方法覆盖的条件"><a href="#构成方法覆盖的条件" class="headerlink" title="构成方法覆盖的条件"></a>构成方法覆盖的条件</h4><ul><li>① 方法覆盖发生在具有<strong>继承</strong>关系的<strong>父子类</strong>之间，这是首要条件；</li><li>② 覆盖之后的方法与原方法具有相同的返回值类型、相同的方法名、相同的形式参数列表，即<strong>相同</strong>；</li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>① 由于覆盖之后的方法与原方法一模一样，建议在开发的时候采用复制粘贴的方式，不建议手写；</li><li>② <strong>私有</strong>的方法不能被继承，所以不能被覆盖；</li><li>③ <strong>构造</strong>方法不能被继承，所以也不能被覆盖； </li><li>④ 覆盖之后的方法不能比原方法拥有更低的访问权限，可以更高</li><li>⑤ 覆盖之后的方法不能比原方法抛出更多的异常，可以相同或更少</li><li>⑥ 方法覆盖只是和方法有关，和属性无关； </li><li>⑦ 静态方法不存在覆盖（不是静态方法不能覆盖，是静态方法覆盖意义不大）； </li></ul><h4 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h4><pre><code>public class Test&#123;    public static void main(String[] args)&#123;        Cat cat = new Cat();        cat.move();        cat.catchM();        Bird bird = new Bird();        bird.move();    &#125;&#125;class Animal&#123;    public void move()&#123;        System.out.println(&quot;动物在移动！&quot;);    &#125;&#125;class Cat&#123;    public void move()&#123;        System.out.println(&quot;猫在走猫步！&quot;);    &#125;    public void catchM()&#123;        System.out.println(&quot;猫在抓老鼠！&quot;);    &#125;&#125;class Bird&#123;    public void move()&#123;        System.out.println(&quot;鸟儿在飞翔！&quot;);    &#125;&#125;</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>当父类中继承过来的方法无法满足当前子类业务需求的时候，子类有必要将父类中继承过来的方法进行覆盖/重写。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>对于多态，向上、向下转型，可以看看这篇文章：<a href="https://blog.csdn.net/qq_44543508/article/details/102409146">深入理解java多态没有烤山药的存在，java就不香了吗？</a></p><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><p>多态就是“同一个行为”发生在“不同的对象上”会产生不同的效果。</p><p>java中允许出现的2中语法：</p><ul><li>向上转型（Upcasting），子类型转换为父类型，自动类型转换</li><li>向下转型（Downcasting），父类型转换为子类型，强制类型转换</li></ul><p>2中转型的前提是：必须有<strong>继承</strong>关系，否则报错。</p><p><img src="/2020/10/17/javase-ji-chu/15.png" alt="向上和向下转型"></p><h4 id="示例及分析"><a href="#示例及分析" class="headerlink" title="示例及分析"></a>示例及分析</h4><pre><code>public class Test&#123;    public static void main(String[] args)&#123;        Animal a1 = new Cat();        a1.move();        a1.catchM();        Animal a2 = new Bird();        a2.move();    &#125;&#125;class Animal&#123;    public void move()&#123;        System.out.println(&quot;动物在移动！&quot;);    &#125;&#125;class Cat&#123;    public void move()&#123;        System.out.println(&quot;猫在走猫步！&quot;);    &#125;    public void catchM()&#123;        System.out.println(&quot;猫在抓老鼠！&quot;);    &#125;&#125;class Bird&#123;    public void move()&#123;        System.out.println(&quot;鸟儿在飞翔！&quot;);    &#125;&#125;</code></pre><p>以上程序演示的就是多态。</p><p>多态就是“同一个行为（move）”作用在“不同的对象上”会有不同的表现结果。</p><p>java 中之所以有多态机制，是因为 java 允许<strong>一个父类型的引用指向一个子类型的对象</strong>。也就是说允许这种写法：<strong>Animal a2 = new Bird()**，属于</strong>向上转型（Upcasting）<strong>，或者叫做</strong>自动类型转换**。 </p><p>对于以下代码的分析：</p><pre><code>Animal a1 = new Cat();a1.move();</code></pre><p>java 程序包括<strong>编译</strong>和<strong>运行</strong>两个阶段，分析 java 程序一定要先分析编译阶段，然后再分析运行阶段：</p><ul><li>在编译阶段，编译器只知道 a1 变量的数据类型是 Animal，那么此时编译器会去 Animal.class 字节码中查找 move() 方法，发现 Animal.class 字节码中存在 move()方法，然后将该 move()方法绑定到 a1 引用上，编译通过了，这个过程我们可以理解为<strong>“静态绑定”</strong>阶段完成了。</li><li>紧接着程序开始运行。进入运行阶段，在运行的时候实际上在堆内存中 new 的对象是 Cat 类型，也就是说真正在 move 移动的时候，是 Cat 猫对象在移动，所以运行的时候就会自动执行 Cat 类当中的 move()方法，这 个过程可以称为<strong>“动态绑定”</strong>。但无论是什么时候，必须<strong>先“静态绑定”成功之后才能进入“动态绑定”阶段</strong>。 </li></ul><pre><code>Animal a1 = new Cat();a1.catchM();</code></pre><p>上述代码，运行报错。原因：是因为“Animal a = new  </p><p>Cat();”在编译的时候，编译器只知道 a 变量的数据类型是 Animal，也就是说它只会去Animal.class 字节码中查找 catchMouse()方法，结果没找到，自然“静态绑定”就失败了，编译没有通过。就像以上描述的错误信息一样：在类型为 Animal 的变量 a 中找不到方法catchMouse()。 </p><p>修改：</p><pre><code>//向上转型Animal a = new Cat();//向下转型：为了调用子类对象特有的方法Cat c = (Cat)a;c.catchMouse();</code></pre><p>因此，得出结论：<strong>只有在访问子类型中特有数据的时候，需要先进行向下转型</strong>。</p><h4 id="instance-of"><a href="#instance-of" class="headerlink" title="instance of"></a>instance of</h4><p>示例代码：</p><pre><code>public class Test05 &#123;    public static void main(String[] args) &#123;        Animal a = new Bird();        Cat c = (Cat)a;    &#125;&#125;</code></pre><p>以上的代码<strong>可以编译</strong>，语法上是没有错误的，但是<strong>运行时出现错误</strong>。这会产生<strong>ClassCastException</strong>，翻译为<strong>类型转换异常</strong>，此时需要<strong>instance of</strong>操作符。</p><p>示例代码：</p><pre><code>public class Test05 &#123;    public static void main(String[] args) &#123;        Animal a = new Bird();        if(a instanceof Cat)&#123;            Cat c = (Cat)a;            c.catchMouse();        &#125; else if(a instanceof Bird)&#123;            Bird b = (Bird)a;            b.sing();        &#125;&#125;</code></pre><h4 id="多态的三个必要条件"><a href="#多态的三个必要条件" class="headerlink" title="多态的三个必要条件"></a>多态的三个必要条件</h4><ul><li>① 继承</li><li>② 方法覆盖 </li><li>③ 父类型引用指向子类型对象</li></ul><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><h3 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h3><p>严格来说，super 其实并不是一个引用，它只是一个<strong>关键字</strong>，super 代表了当前对象中从父类继承过来的那部分<strong>特征</strong>。</p><p>以下有一个例子，便于大家理解 super 和 this。（this 指向一个独立的对象，super 并不是指向某个 “ 独立 ” 的对象）</p><blockquote><p>假设张大明是父亲，张小明是儿子。张小明的眼睛、鼻子和父亲的很像。那么也就是说儿子继承了父亲的眼睛和鼻子特征，那么眼睛和鼻子肯定最终还是长在儿子的身上。假设 this 指向张小明，那么 super 就代表张小明身上的眼睛和鼻子。换句话说 super 其实是 this 的一部分。</p><p>如下图所示：张大明和张小明其实是两个独立的对象，两个对象内存方面没有联系，super 只是代表张小明对象身上的眼睛和鼻子，因为这个是从父类中继承过来的，在内存方面使用了 super 关键字进行了标记，对于下图来说 “ this.眼睛 ” 和 “ super.眼睛 ” 都是访问的同一块内存空间。</p></blockquote><p><img src="/2020/10/17/javase-ji-chu/super%E4%BE%8B%E5%AD%90.png" alt="super例子"></p><ul><li>super 和 this 都可以使用在实例方法当中</li><li>super 不能使用在静态方法当中，因为 super 代表了当前对象上的父类型特征，静态方法中没有 this，肯定也是不能使用 super 的</li><li>super 也有这种用法：“ super(实际参数列表) ; ”，这种用法是<strong>通过当前的构造方法调用父类的构造方法</strong></li></ul><h3 id="super使用在构造方法"><a href="#super使用在构造方法" class="headerlink" title="super使用在构造方法"></a>super使用在构造方法</h3><p>语法：</p><pre><code>super(实际参数列表);</code></pre><p>含义：子类构造方法执行过程中调用父类的构造方法。</p><p>实例：</p><pre><code>public People(String idCard,String name,boolean sex)&#123;    this.idCard = idCard;    this.name = name;    this.sex = sex;&#125;public Student(String idCard,String name,boolean sex,int sno)&#123;    super(idCard,name,sex);    this.sno = sno;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级之索引</title>
      <link href="2020/10/15/mysql-gao-ji-zhi-suo-yin/"/>
      <url>2020/10/15/mysql-gao-ji-zhi-suo-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h2><p>MySQL官方对索引的定义：索引（index）是帮助MySQL高效获取数据的<strong>数据结构</strong>。</p><p>索引的<strong>目的</strong>：提高查询效率。</p><p>简单理解：排好序的快速查找的<strong>数据结构</strong>是<strong>索引</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TestForDatabase</title>
      <link href="2020/10/04/testfordatabase/"/>
      <url>2020/10/04/testfordatabase/</url>
      
        <content type="html"><![CDATA[<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="1、取得每个部门最高薪水的人员名称"><a href="#1、取得每个部门最高薪水的人员名称" class="headerlink" title="1、取得每个部门最高薪水的人员名称"></a>1、取得每个部门最高薪水的人员名称</h3><p><img src="/2020/10/04/testfordatabase/1.png"></p><p>第一步：取得每个部门的最高薪水（按照部门编号分组，找出每一组的最大值）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> maxsal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+———-+<br>| deptno | max(sal) |<br>+——–+———-+<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>|     10 |  5000.00 |<br>+——–+———-+</p></blockquote><p>第二步：将以上的查询结果当做一张临时表 t，t和emp表连接，连接条件是：t.deptno = e.deptno and t.maxsal = e.sal</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span>t<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> maxsal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token punctuation">)</span> t<span class="token keyword">on</span> t<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">and</span> t<span class="token punctuation">.</span>maxsal <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">;</span></code></pre><h3 id="2、哪些人的薪水在部门的平均薪水之上"><a href="#2、哪些人的薪水在部门的平均薪水之上" class="headerlink" title="2、哪些人的薪水在部门的平均薪水之上"></a>2、哪些人的薪水在部门的平均薪水之上</h3><p><img src="/2020/10/04/testfordatabase/2.png"></p><p>第一步：取得每个部门的平均薪水（按照部门编号分组，找出每一组的平均值）</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> avgsal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————-+<br>| deptno | avgsal      |<br>+——–+————-+<br>|     20 | 2175.000000 |<br>|     30 | 1566.666667 |<br>|     10 | 2916.666667 |<br>+——–+————-+</p></blockquote><p>第二步：将以上的查询结果当做一张临时表 t，t 和 emp表连接，连接条件是：t.deptno = e.deptno and t.avgsal &lt; e.sal</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> avgsal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token punctuation">)</span> t<span class="token keyword">on</span> t<span class="token punctuation">.</span>deptno <span class="token operator">=</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno <span class="token operator">and</span> t<span class="token punctuation">.</span>avgsal <span class="token operator">&lt;</span> <span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">;</span></code></pre><h3 id="3、取得部门中（所有人的）平均的薪水等级"><a href="#3、取得部门中（所有人的）平均的薪水等级" class="headerlink" title="3、取得部门中（所有人的）平均的薪水等级"></a>3、取得部门中（所有人的）平均的薪水等级</h3><p><img src="/2020/10/04/testfordatabase/3.png"></p><p>第一步：求每一个员工的薪水等级</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token number">e</span><span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> salgrade s<span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+———+——-+——–+<br>| ename  | sal     | grade | deptno |<br>+——–+———+——-+——–+<br>| SMITH  |  800.00 |     1 |     20 |<br>| ALLEN  | 1600.00 |     3 |     30 |<br>| WARD   | 1250.00 |     2 |     30 |<br>| JONES  | 2975.00 |     4 |     20 |<br>| MARTIN | 1250.00 |     2 |     30 |<br>| BLAKE  | 2850.00 |     4 |     30 |<br>| CLARK  | 2450.00 |     4 |     10 |<br>| SCOTT  | 3000.00 |     4 |     20 |<br>| KING   | 5000.00 |     5 |     10 |<br>| TURNER | 1500.00 |     3 |     30 |<br>| ADAMS  | 1100.00 |     1 |     20 |<br>| JAMES  |  950.00 |     1 |     30 |<br>| FORD   | 3000.00 |     4 |     20 |<br>| MILLER | 1300.00 |     2 |     10 |<br>+——–+———+——-+——–+<br>14 rows in set (0.00 sec)</p></blockquote><p>第二步：根据上表，在按照deptno分组，求grade的平均值</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token keyword">from</span> emp <span class="token number">e</span><span class="token keyword">join</span> salgrade s<span class="token keyword">on</span> <span class="token number">e</span><span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token number">e</span><span class="token punctuation">.</span>deptno<span class="token punctuation">;</span></code></pre><blockquote><p>+——–+————+<br>| deptno | avg(grade) |<br>+——–+————+<br>|     20 |     2.8000 |<br>|     30 |     2.5000 |<br>|     10 |     3.6667 |<br>+——–+————+<br>3 rows in set (0.00 sec)</p></blockquote><h3 id="4、不用组函数Max，取得最高薪水"><a href="#4、不用组函数Max，取得最高薪水" class="headerlink" title="4、不用组函数Max，取得最高薪水"></a>4、不用组函数Max，取得最高薪水</h3><p><img src="/2020/10/04/testfordatabase/4.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
